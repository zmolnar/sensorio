
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	08000239 	.word	0x08000239
 8000008:	0800023b 	.word	0x0800023b
 800000c:	0800023b 	.word	0x0800023b
 8000010:	0800023b 	.word	0x0800023b
 8000014:	0800023b 	.word	0x0800023b
 8000018:	0800023b 	.word	0x0800023b
 800001c:	0800023b 	.word	0x0800023b
 8000020:	0800023b 	.word	0x0800023b
 8000024:	0800023b 	.word	0x0800023b
 8000028:	0800023b 	.word	0x0800023b
 800002c:	08003a11 	.word	0x08003a11
 8000030:	0800023b 	.word	0x0800023b
 8000034:	0800023b 	.word	0x0800023b
 8000038:	0800023b 	.word	0x0800023b
 800003c:	0800023b 	.word	0x0800023b
 8000040:	0800023b 	.word	0x0800023b
 8000044:	0800023b 	.word	0x0800023b
 8000048:	0800023b 	.word	0x0800023b
 800004c:	0800023b 	.word	0x0800023b
 8000050:	0800023b 	.word	0x0800023b
 8000054:	0800023b 	.word	0x0800023b
 8000058:	0800023b 	.word	0x0800023b
 800005c:	0800023b 	.word	0x0800023b
 8000060:	0800023b 	.word	0x0800023b
 8000064:	0800023b 	.word	0x0800023b
 8000068:	0800023b 	.word	0x0800023b
 800006c:	080015c1 	.word	0x080015c1
 8000070:	080015e1 	.word	0x080015e1
 8000074:	08001601 	.word	0x08001601
 8000078:	08001621 	.word	0x08001621
 800007c:	08001641 	.word	0x08001641
 8000080:	08001661 	.word	0x08001661
 8000084:	08001681 	.word	0x08001681
 8000088:	0800023b 	.word	0x0800023b
 800008c:	0800023b 	.word	0x0800023b
 8000090:	0800023b 	.word	0x0800023b
 8000094:	0800023b 	.word	0x0800023b
 8000098:	0800023b 	.word	0x0800023b
 800009c:	0800023b 	.word	0x0800023b
 80000a0:	0800023b 	.word	0x0800023b
 80000a4:	0800023b 	.word	0x0800023b
 80000a8:	0800023b 	.word	0x0800023b
 80000ac:	0800023b 	.word	0x0800023b
 80000b0:	08001ef1 	.word	0x08001ef1
 80000b4:	0800023b 	.word	0x0800023b
 80000b8:	0800023b 	.word	0x0800023b
 80000bc:	0800023b 	.word	0x0800023b
 80000c0:	0800023b 	.word	0x0800023b
 80000c4:	0800023b 	.word	0x0800023b
 80000c8:	0800023b 	.word	0x0800023b
 80000cc:	0800023b 	.word	0x0800023b
 80000d0:	0800023b 	.word	0x0800023b
 80000d4:	0800023b 	.word	0x0800023b
 80000d8:	08002251 	.word	0x08002251
 80000dc:	0800023b 	.word	0x0800023b
 80000e0:	0800023b 	.word	0x0800023b
 80000e4:	0800023b 	.word	0x0800023b
 80000e8:	0800023b 	.word	0x0800023b
 80000ec:	0800023b 	.word	0x0800023b
 80000f0:	0800023b 	.word	0x0800023b
 80000f4:	0800023b 	.word	0x0800023b
 80000f8:	0800023b 	.word	0x0800023b
 80000fc:	0800023b 	.word	0x0800023b
 8000100:	0800023b 	.word	0x0800023b
 8000104:	0800023b 	.word	0x0800023b
 8000108:	0800023b 	.word	0x0800023b
 800010c:	0800023b 	.word	0x0800023b
 8000110:	0800023b 	.word	0x0800023b
 8000114:	0800023b 	.word	0x0800023b
 8000118:	0800023b 	.word	0x0800023b
 800011c:	0800023b 	.word	0x0800023b
 8000120:	0800023b 	.word	0x0800023b
 8000124:	0800023b 	.word	0x0800023b
 8000128:	0800023b 	.word	0x0800023b
 800012c:	0800023b 	.word	0x0800023b
 8000130:	0800023b 	.word	0x0800023b
 8000134:	0800023b 	.word	0x0800023b
 8000138:	0800023b 	.word	0x0800023b
 800013c:	0800023b 	.word	0x0800023b
 8000140:	0800023b 	.word	0x0800023b
 8000144:	0800023b 	.word	0x0800023b
 8000148:	0800023b 	.word	0x0800023b
 800014c:	0800023b 	.word	0x0800023b
 8000150:	0800023b 	.word	0x0800023b
 8000154:	0800023b 	.word	0x0800023b
 8000158:	0800023b 	.word	0x0800023b
 800015c:	0800023b 	.word	0x0800023b

Disassembly of section .text:

08000160 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 8000160:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 8000162:	4827      	ldr	r0, [pc, #156]	; (8000200 <endfiniloop+0x4>)
                msr     MSP, r0
 8000164:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 8000168:	4826      	ldr	r0, [pc, #152]	; (8000204 <endfiniloop+0x8>)
                msr     PSP, r0
 800016a:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 800016e:	4826      	ldr	r0, [pc, #152]	; (8000208 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 8000170:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 8000174:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8000178:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 800017a:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 800017c:	f380 8814 	msr	CONTROL, r0
                isb
 8000180:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 8000184:	f000 fa74 	bl	8000670 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000188:	f002 f882 	bl	8002290 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800018c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000190:	491e      	ldr	r1, [pc, #120]	; (800020c <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 8000192:	4a1b      	ldr	r2, [pc, #108]	; (8000200 <endfiniloop+0x4>)

08000194 <msloop>:
msloop:
                cmp     r1, r2
 8000194:	4291      	cmp	r1, r2
                itt     lo
 8000196:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000198:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800019c:	e7fa      	bcc.n	8000194 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800019e:	491c      	ldr	r1, [pc, #112]	; (8000210 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 80001a0:	4a18      	ldr	r2, [pc, #96]	; (8000204 <endfiniloop+0x8>)

080001a2 <psloop>:
psloop:
                cmp     r1, r2
 80001a2:	4291      	cmp	r1, r2
                itt     lo
 80001a4:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80001a6:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 80001aa:	e7fa      	bcc.n	80001a2 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =__textdata_base__
 80001ac:	4919      	ldr	r1, [pc, #100]	; (8000214 <endfiniloop+0x18>)
                ldr     r2, =__data_base__
 80001ae:	4a1a      	ldr	r2, [pc, #104]	; (8000218 <endfiniloop+0x1c>)
                ldr     r3, =__data_end__
 80001b0:	4b1a      	ldr	r3, [pc, #104]	; (800021c <endfiniloop+0x20>)

080001b2 <dloop>:
dloop:
                cmp     r2, r3
 80001b2:	429a      	cmp	r2, r3
                ittt    lo
 80001b4:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 80001b6:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 80001ba:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 80001be:	e7f8      	bcc.n	80001b2 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 80001c0:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 80001c2:	4917      	ldr	r1, [pc, #92]	; (8000220 <endfiniloop+0x24>)
                ldr     r2, =__bss_end__
 80001c4:	4a17      	ldr	r2, [pc, #92]	; (8000224 <endfiniloop+0x28>)

080001c6 <bloop>:
bloop:
                cmp     r1, r2
 80001c6:	4291      	cmp	r1, r2
                itt     lo
 80001c8:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80001ca:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 80001ce:	e7fa      	bcc.n	80001c6 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 80001d0:	f000 fa66 	bl	80006a0 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 80001d4:	f000 fa54 	bl	8000680 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 80001d8:	4c13      	ldr	r4, [pc, #76]	; (8000228 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end__
 80001da:	4d14      	ldr	r5, [pc, #80]	; (800022c <endfiniloop+0x30>)

080001dc <initloop>:
initloop:
                cmp     r4, r5
 80001dc:	42ac      	cmp	r4, r5
                bge     endinitloop
 80001de:	da03      	bge.n	80001e8 <endinitloop>
                ldr     r1, [r4], #4
 80001e0:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80001e4:	4788      	blx	r1
                b       initloop
 80001e6:	e7f9      	b.n	80001dc <initloop>

080001e8 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 80001e8:	f003 fd0a 	bl	8003c00 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 80001ec:	4c10      	ldr	r4, [pc, #64]	; (8000230 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end__
 80001ee:	4d11      	ldr	r5, [pc, #68]	; (8000234 <endfiniloop+0x38>)

080001f0 <finiloop>:
finiloop:
                cmp     r4, r5
 80001f0:	42ac      	cmp	r4, r5
                bge     endfiniloop
 80001f2:	da03      	bge.n	80001fc <endfiniloop>
                ldr     r1, [r4], #4
 80001f4:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80001f8:	4788      	blx	r1
                b       finiloop
 80001fa:	e7f9      	b.n	80001f0 <finiloop>

080001fc <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 80001fc:	f000 ba48 	b.w	8000690 <__default_exit>
                ldr     r0, =__main_stack_end__
 8000200:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 8000204:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 8000208:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 800020c:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000210:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
 8000214:	08005fc0 	.word	0x08005fc0
                ldr     r2, =__data_base__
 8000218:	20000800 	.word	0x20000800
                ldr     r3, =__data_end__
 800021c:	20000800 	.word	0x20000800
                ldr     r1, =__bss_base__
 8000220:	20000800 	.word	0x20000800
                ldr     r2, =__bss_end__
 8000224:	20001500 	.word	0x20001500
                ldr     r4, =__init_array_base__
 8000228:	08000160 	.word	0x08000160
                ldr     r5, =__init_array_end__
 800022c:	08000160 	.word	0x08000160
                ldr     r4, =__fini_array_base__
 8000230:	08000160 	.word	0x08000160
                ldr     r5, =__fini_array_end__
 8000234:	08000160 	.word	0x08000160

08000238 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 8000238:	e792      	b.n	8000160 <_crt0_entry>

0800023a <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 800023a:	f000 f800 	bl	800023e <_unhandled_exception>

0800023e <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 800023e:	e7fe      	b.n	800023e <_unhandled_exception>

08000240 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8000240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if PORT_SWITCHED_REGIONS_NUMBER == 4
                push    {r4, r5, r6, r7, r8, r9, r10, r11}
#endif
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 8000244:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 8000248:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 800024a:	469d      	mov	sp, r3

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 800024c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000250 <_port_thread_start>:
_port_thread_start:
#if CH_DBG_ENABLE_STACK_CHECK && PORT_ENABLE_GUARD_PAGES
                bl      _port_set_region
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_unlock
 8000250:	f002 f9d6 	bl	8002600 <_dbg_check_unlock>
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 8000254:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 8000256:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 800025a:	4628      	mov	r0, r5
                blx     r4
 800025c:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 800025e:	2000      	movs	r0, #0
                bl      chThdExit
 8000260:	f003 f846 	bl	80032f0 <chThdExit>

08000264 <_zombies>:
_zombies:       b       _zombies
 8000264:	e7fe      	b.n	8000264 <_zombies>

08000266 <_port_switch_from_isr>:
_port_switch_from_isr:
#if CH_DBG_STATISTICS
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
 8000266:	f002 f9b3 	bl	80025d0 <_dbg_check_lock>
#endif
                bl      chSchDoReschedule
 800026a:	f002 fe41 	bl	8002ef0 <chSchDoReschedule>
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_unlock
 800026e:	f002 f9c7 	bl	8002600 <_dbg_check_unlock>

08000272 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 8000272:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 8000274:	e7fe      	b.n	8000274 <_port_exit_from_isr+0x2>
	...

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000288:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800028c:	f000 b974 	b.w	8000578 <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002ac:	468c      	mov	ip, r1
 80002ae:	4604      	mov	r4, r0
 80002b0:	9e08      	ldr	r6, [sp, #32]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d14b      	bne.n	800034e <__udivmoddi4+0xa6>
 80002b6:	428a      	cmp	r2, r1
 80002b8:	4615      	mov	r5, r2
 80002ba:	d967      	bls.n	800038c <__udivmoddi4+0xe4>
 80002bc:	fab2 f282 	clz	r2, r2
 80002c0:	b14a      	cbz	r2, 80002d6 <__udivmoddi4+0x2e>
 80002c2:	f1c2 0720 	rsb	r7, r2, #32
 80002c6:	fa01 f302 	lsl.w	r3, r1, r2
 80002ca:	fa20 f707 	lsr.w	r7, r0, r7
 80002ce:	4095      	lsls	r5, r2
 80002d0:	ea47 0c03 	orr.w	ip, r7, r3
 80002d4:	4094      	lsls	r4, r2
 80002d6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002da:	fbbc f7fe 	udiv	r7, ip, lr
 80002de:	fa1f f885 	uxth.w	r8, r5
 80002e2:	fb0e c317 	mls	r3, lr, r7, ip
 80002e6:	fb07 f908 	mul.w	r9, r7, r8
 80002ea:	0c21      	lsrs	r1, r4, #16
 80002ec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f0:	4599      	cmp	r9, r3
 80002f2:	d909      	bls.n	8000308 <__udivmoddi4+0x60>
 80002f4:	18eb      	adds	r3, r5, r3
 80002f6:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 80002fa:	f080 811c 	bcs.w	8000536 <__udivmoddi4+0x28e>
 80002fe:	4599      	cmp	r9, r3
 8000300:	f240 8119 	bls.w	8000536 <__udivmoddi4+0x28e>
 8000304:	3f02      	subs	r7, #2
 8000306:	442b      	add	r3, r5
 8000308:	eba3 0309 	sub.w	r3, r3, r9
 800030c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000310:	fb0e 3310 	mls	r3, lr, r0, r3
 8000314:	fb00 f108 	mul.w	r1, r0, r8
 8000318:	b2a4      	uxth	r4, r4
 800031a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800031e:	42a1      	cmp	r1, r4
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x8e>
 8000322:	192c      	adds	r4, r5, r4
 8000324:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000328:	f080 8107 	bcs.w	800053a <__udivmoddi4+0x292>
 800032c:	42a1      	cmp	r1, r4
 800032e:	f240 8104 	bls.w	800053a <__udivmoddi4+0x292>
 8000332:	3802      	subs	r0, #2
 8000334:	442c      	add	r4, r5
 8000336:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800033a:	2700      	movs	r7, #0
 800033c:	1a64      	subs	r4, r4, r1
 800033e:	b11e      	cbz	r6, 8000348 <__udivmoddi4+0xa0>
 8000340:	2300      	movs	r3, #0
 8000342:	40d4      	lsrs	r4, r2
 8000344:	e9c6 4300 	strd	r4, r3, [r6]
 8000348:	4639      	mov	r1, r7
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0xbe>
 8000352:	2e00      	cmp	r6, #0
 8000354:	f000 80ec 	beq.w	8000530 <__udivmoddi4+0x288>
 8000358:	2700      	movs	r7, #0
 800035a:	e9c6 0100 	strd	r0, r1, [r6]
 800035e:	4638      	mov	r0, r7
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f783 	clz	r7, r3
 800036a:	2f00      	cmp	r7, #0
 800036c:	d148      	bne.n	8000400 <__udivmoddi4+0x158>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xd0>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80fb 	bhi.w	800056e <__udivmoddi4+0x2c6>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0303 	sbc.w	r3, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	469c      	mov	ip, r3
 8000382:	2e00      	cmp	r6, #0
 8000384:	d0e0      	beq.n	8000348 <__udivmoddi4+0xa0>
 8000386:	e9c6 4c00 	strd	r4, ip, [r6]
 800038a:	e7dd      	b.n	8000348 <__udivmoddi4+0xa0>
 800038c:	b902      	cbnz	r2, 8000390 <__udivmoddi4+0xe8>
 800038e:	deff      	udf	#255	; 0xff
 8000390:	fab2 f282 	clz	r2, r2
 8000394:	2a00      	cmp	r2, #0
 8000396:	f040 808f 	bne.w	80004b8 <__udivmoddi4+0x210>
 800039a:	2701      	movs	r7, #1
 800039c:	1b49      	subs	r1, r1, r5
 800039e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80003a2:	fa1f f985 	uxth.w	r9, r5
 80003a6:	fbb1 fef8 	udiv	lr, r1, r8
 80003aa:	fb08 111e 	mls	r1, r8, lr, r1
 80003ae:	fb09 f00e 	mul.w	r0, r9, lr
 80003b2:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80003b6:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 80003ba:	4298      	cmp	r0, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x126>
 80003be:	18eb      	adds	r3, r5, r3
 80003c0:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x124>
 80003c6:	4298      	cmp	r0, r3
 80003c8:	f200 80cd 	bhi.w	8000566 <__udivmoddi4+0x2be>
 80003cc:	468e      	mov	lr, r1
 80003ce:	1a1b      	subs	r3, r3, r0
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3310 	mls	r3, r8, r0, r3
 80003d8:	fb09 f900 	mul.w	r9, r9, r0
 80003dc:	b2a4      	uxth	r4, r4
 80003de:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	d907      	bls.n	80003f6 <__udivmoddi4+0x14e>
 80003e6:	192c      	adds	r4, r5, r4
 80003e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x14c>
 80003ee:	45a1      	cmp	r9, r4
 80003f0:	f200 80b6 	bhi.w	8000560 <__udivmoddi4+0x2b8>
 80003f4:	4618      	mov	r0, r3
 80003f6:	eba4 0409 	sub.w	r4, r4, r9
 80003fa:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80003fe:	e79e      	b.n	800033e <__udivmoddi4+0x96>
 8000400:	f1c7 0520 	rsb	r5, r7, #32
 8000404:	40bb      	lsls	r3, r7
 8000406:	fa22 fc05 	lsr.w	ip, r2, r5
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa21 f405 	lsr.w	r4, r1, r5
 8000412:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000416:	fbb4 f9fe 	udiv	r9, r4, lr
 800041a:	fa1f f88c 	uxth.w	r8, ip
 800041e:	fb0e 4419 	mls	r4, lr, r9, r4
 8000422:	fa20 f305 	lsr.w	r3, r0, r5
 8000426:	40b9      	lsls	r1, r7
 8000428:	fb09 fa08 	mul.w	sl, r9, r8
 800042c:	4319      	orrs	r1, r3
 800042e:	0c0b      	lsrs	r3, r1, #16
 8000430:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000434:	45a2      	cmp	sl, r4
 8000436:	fa02 f207 	lsl.w	r2, r2, r7
 800043a:	fa00 f307 	lsl.w	r3, r0, r7
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b0>
 8000440:	eb1c 0404 	adds.w	r4, ip, r4
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2b4>
 800044c:	45a2      	cmp	sl, r4
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2b4>
 8000452:	f1a9 0902 	sub.w	r9, r9, #2
 8000456:	4464      	add	r4, ip
 8000458:	eba4 040a 	sub.w	r4, r4, sl
 800045c:	fbb4 f0fe 	udiv	r0, r4, lr
 8000460:	fb0e 4410 	mls	r4, lr, r0, r4
 8000464:	fb00 fa08 	mul.w	sl, r0, r8
 8000468:	b289      	uxth	r1, r1
 800046a:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800046e:	45a2      	cmp	sl, r4
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x1dc>
 8000472:	eb1c 0404 	adds.w	r4, ip, r4
 8000476:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800047a:	d26b      	bcs.n	8000554 <__udivmoddi4+0x2ac>
 800047c:	45a2      	cmp	sl, r4
 800047e:	d969      	bls.n	8000554 <__udivmoddi4+0x2ac>
 8000480:	3802      	subs	r0, #2
 8000482:	4464      	add	r4, ip
 8000484:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000488:	fba0 8902 	umull	r8, r9, r0, r2
 800048c:	eba4 040a 	sub.w	r4, r4, sl
 8000490:	454c      	cmp	r4, r9
 8000492:	4641      	mov	r1, r8
 8000494:	46ce      	mov	lr, r9
 8000496:	d354      	bcc.n	8000542 <__udivmoddi4+0x29a>
 8000498:	d051      	beq.n	800053e <__udivmoddi4+0x296>
 800049a:	2e00      	cmp	r6, #0
 800049c:	d069      	beq.n	8000572 <__udivmoddi4+0x2ca>
 800049e:	1a5a      	subs	r2, r3, r1
 80004a0:	eb64 040e 	sbc.w	r4, r4, lr
 80004a4:	fa04 f505 	lsl.w	r5, r4, r5
 80004a8:	fa22 f307 	lsr.w	r3, r2, r7
 80004ac:	40fc      	lsrs	r4, r7
 80004ae:	431d      	orrs	r5, r3
 80004b0:	e9c6 5400 	strd	r5, r4, [r6]
 80004b4:	2700      	movs	r7, #0
 80004b6:	e747      	b.n	8000348 <__udivmoddi4+0xa0>
 80004b8:	4095      	lsls	r5, r2
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa21 f003 	lsr.w	r0, r1, r3
 80004c2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80004c6:	fbb0 f7f8 	udiv	r7, r0, r8
 80004ca:	fa1f f985 	uxth.w	r9, r5
 80004ce:	fb08 0017 	mls	r0, r8, r7, r0
 80004d2:	fa24 f303 	lsr.w	r3, r4, r3
 80004d6:	4091      	lsls	r1, r2
 80004d8:	fb07 fc09 	mul.w	ip, r7, r9
 80004dc:	430b      	orrs	r3, r1
 80004de:	0c19      	lsrs	r1, r3, #16
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	458c      	cmp	ip, r1
 80004e6:	fa04 f402 	lsl.w	r4, r4, r2
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x254>
 80004ec:	1869      	adds	r1, r5, r1
 80004ee:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80004f2:	d231      	bcs.n	8000558 <__udivmoddi4+0x2b0>
 80004f4:	458c      	cmp	ip, r1
 80004f6:	d92f      	bls.n	8000558 <__udivmoddi4+0x2b0>
 80004f8:	3f02      	subs	r7, #2
 80004fa:	4429      	add	r1, r5
 80004fc:	eba1 010c 	sub.w	r1, r1, ip
 8000500:	fbb1 f0f8 	udiv	r0, r1, r8
 8000504:	fb08 1c10 	mls	ip, r8, r0, r1
 8000508:	fb00 fe09 	mul.w	lr, r0, r9
 800050c:	b299      	uxth	r1, r3
 800050e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000512:	458e      	cmp	lr, r1
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x27e>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800051c:	d218      	bcs.n	8000550 <__udivmoddi4+0x2a8>
 800051e:	458e      	cmp	lr, r1
 8000520:	d916      	bls.n	8000550 <__udivmoddi4+0x2a8>
 8000522:	3802      	subs	r0, #2
 8000524:	4429      	add	r1, r5
 8000526:	eba1 010e 	sub.w	r1, r1, lr
 800052a:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800052e:	e73a      	b.n	80003a6 <__udivmoddi4+0xfe>
 8000530:	4637      	mov	r7, r6
 8000532:	4630      	mov	r0, r6
 8000534:	e708      	b.n	8000348 <__udivmoddi4+0xa0>
 8000536:	460f      	mov	r7, r1
 8000538:	e6e6      	b.n	8000308 <__udivmoddi4+0x60>
 800053a:	4618      	mov	r0, r3
 800053c:	e6fb      	b.n	8000336 <__udivmoddi4+0x8e>
 800053e:	4543      	cmp	r3, r8
 8000540:	d2ab      	bcs.n	800049a <__udivmoddi4+0x1f2>
 8000542:	ebb8 0102 	subs.w	r1, r8, r2
 8000546:	eb69 020c 	sbc.w	r2, r9, ip
 800054a:	3801      	subs	r0, #1
 800054c:	4696      	mov	lr, r2
 800054e:	e7a4      	b.n	800049a <__udivmoddi4+0x1f2>
 8000550:	4618      	mov	r0, r3
 8000552:	e7e8      	b.n	8000526 <__udivmoddi4+0x27e>
 8000554:	4608      	mov	r0, r1
 8000556:	e795      	b.n	8000484 <__udivmoddi4+0x1dc>
 8000558:	4607      	mov	r7, r0
 800055a:	e7cf      	b.n	80004fc <__udivmoddi4+0x254>
 800055c:	4681      	mov	r9, r0
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b0>
 8000560:	3802      	subs	r0, #2
 8000562:	442c      	add	r4, r5
 8000564:	e747      	b.n	80003f6 <__udivmoddi4+0x14e>
 8000566:	f1ae 0e02 	sub.w	lr, lr, #2
 800056a:	442b      	add	r3, r5
 800056c:	e72f      	b.n	80003ce <__udivmoddi4+0x126>
 800056e:	4638      	mov	r0, r7
 8000570:	e707      	b.n	8000382 <__udivmoddi4+0xda>
 8000572:	4637      	mov	r7, r6
 8000574:	e6e8      	b.n	8000348 <__udivmoddi4+0xa0>
 8000576:	bf00      	nop

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <memcpy>:
 800057c:	4684      	mov	ip, r0
 800057e:	ea41 0300 	orr.w	r3, r1, r0
 8000582:	f013 0303 	ands.w	r3, r3, #3
 8000586:	d149      	bne.n	800061c <memcpy+0xa0>
 8000588:	3a40      	subs	r2, #64	; 0x40
 800058a:	d323      	bcc.n	80005d4 <memcpy+0x58>
 800058c:	680b      	ldr	r3, [r1, #0]
 800058e:	6003      	str	r3, [r0, #0]
 8000590:	684b      	ldr	r3, [r1, #4]
 8000592:	6043      	str	r3, [r0, #4]
 8000594:	688b      	ldr	r3, [r1, #8]
 8000596:	6083      	str	r3, [r0, #8]
 8000598:	68cb      	ldr	r3, [r1, #12]
 800059a:	60c3      	str	r3, [r0, #12]
 800059c:	690b      	ldr	r3, [r1, #16]
 800059e:	6103      	str	r3, [r0, #16]
 80005a0:	694b      	ldr	r3, [r1, #20]
 80005a2:	6143      	str	r3, [r0, #20]
 80005a4:	698b      	ldr	r3, [r1, #24]
 80005a6:	6183      	str	r3, [r0, #24]
 80005a8:	69cb      	ldr	r3, [r1, #28]
 80005aa:	61c3      	str	r3, [r0, #28]
 80005ac:	6a0b      	ldr	r3, [r1, #32]
 80005ae:	6203      	str	r3, [r0, #32]
 80005b0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80005b2:	6243      	str	r3, [r0, #36]	; 0x24
 80005b4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80005b6:	6283      	str	r3, [r0, #40]	; 0x28
 80005b8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80005ba:	62c3      	str	r3, [r0, #44]	; 0x2c
 80005bc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80005be:	6303      	str	r3, [r0, #48]	; 0x30
 80005c0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80005c2:	6343      	str	r3, [r0, #52]	; 0x34
 80005c4:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 80005c6:	6383      	str	r3, [r0, #56]	; 0x38
 80005c8:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80005ca:	63c3      	str	r3, [r0, #60]	; 0x3c
 80005cc:	3040      	adds	r0, #64	; 0x40
 80005ce:	3140      	adds	r1, #64	; 0x40
 80005d0:	3a40      	subs	r2, #64	; 0x40
 80005d2:	d2db      	bcs.n	800058c <memcpy+0x10>
 80005d4:	3230      	adds	r2, #48	; 0x30
 80005d6:	d30b      	bcc.n	80005f0 <memcpy+0x74>
 80005d8:	680b      	ldr	r3, [r1, #0]
 80005da:	6003      	str	r3, [r0, #0]
 80005dc:	684b      	ldr	r3, [r1, #4]
 80005de:	6043      	str	r3, [r0, #4]
 80005e0:	688b      	ldr	r3, [r1, #8]
 80005e2:	6083      	str	r3, [r0, #8]
 80005e4:	68cb      	ldr	r3, [r1, #12]
 80005e6:	60c3      	str	r3, [r0, #12]
 80005e8:	3010      	adds	r0, #16
 80005ea:	3110      	adds	r1, #16
 80005ec:	3a10      	subs	r2, #16
 80005ee:	d2f3      	bcs.n	80005d8 <memcpy+0x5c>
 80005f0:	320c      	adds	r2, #12
 80005f2:	d305      	bcc.n	8000600 <memcpy+0x84>
 80005f4:	f851 3b04 	ldr.w	r3, [r1], #4
 80005f8:	f840 3b04 	str.w	r3, [r0], #4
 80005fc:	3a04      	subs	r2, #4
 80005fe:	d2f9      	bcs.n	80005f4 <memcpy+0x78>
 8000600:	3204      	adds	r2, #4
 8000602:	d008      	beq.n	8000616 <memcpy+0x9a>
 8000604:	07d2      	lsls	r2, r2, #31
 8000606:	bf1c      	itt	ne
 8000608:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800060c:	f800 3b01 	strbne.w	r3, [r0], #1
 8000610:	d301      	bcc.n	8000616 <memcpy+0x9a>
 8000612:	880b      	ldrh	r3, [r1, #0]
 8000614:	8003      	strh	r3, [r0, #0]
 8000616:	4660      	mov	r0, ip
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	2a08      	cmp	r2, #8
 800061e:	d313      	bcc.n	8000648 <memcpy+0xcc>
 8000620:	078b      	lsls	r3, r1, #30
 8000622:	d0b1      	beq.n	8000588 <memcpy+0xc>
 8000624:	f010 0303 	ands.w	r3, r0, #3
 8000628:	d0ae      	beq.n	8000588 <memcpy+0xc>
 800062a:	f1c3 0304 	rsb	r3, r3, #4
 800062e:	1ad2      	subs	r2, r2, r3
 8000630:	07db      	lsls	r3, r3, #31
 8000632:	bf1c      	itt	ne
 8000634:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000638:	f800 3b01 	strbne.w	r3, [r0], #1
 800063c:	d3a4      	bcc.n	8000588 <memcpy+0xc>
 800063e:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000642:	f820 3b02 	strh.w	r3, [r0], #2
 8000646:	e79f      	b.n	8000588 <memcpy+0xc>
 8000648:	3a04      	subs	r2, #4
 800064a:	d3d9      	bcc.n	8000600 <memcpy+0x84>
 800064c:	3a01      	subs	r2, #1
 800064e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000652:	f800 3b01 	strb.w	r3, [r0], #1
 8000656:	d2f9      	bcs.n	800064c <memcpy+0xd0>
 8000658:	780b      	ldrb	r3, [r1, #0]
 800065a:	7003      	strb	r3, [r0, #0]
 800065c:	784b      	ldrb	r3, [r1, #1]
 800065e:	7043      	strb	r3, [r0, #1]
 8000660:	788b      	ldrb	r3, [r1, #2]
 8000662:	7083      	strb	r3, [r0, #2]
 8000664:	4660      	mov	r0, ip
 8000666:	4770      	bx	lr
	...

08000670 <__core_init>:

#if CORTEX_MODEL == 7
  SCB_EnableICache();
  SCB_EnableDCache();
#endif
}
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
	...

08000680 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
	...

08000690 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 8000690:	e7fe      	b.n	8000690 <__default_exit>
 8000692:	bf00      	nop
	...

080006a0 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 80006a0:	b084      	sub	sp, #16
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
 80006a2:	4b16      	ldr	r3, [pc, #88]	; (80006fc <__init_ram_areas+0x5c>)
 80006a4:	9303      	str	r3, [sp, #12]

  do {
    uint32_t *tp = rap->init_text_area;
 80006a6:	9b03      	ldr	r3, [sp, #12]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	9302      	str	r3, [sp, #8]
    uint32_t *p = rap->init_area;
 80006ac:	9b03      	ldr	r3, [sp, #12]
 80006ae:	685b      	ldr	r3, [r3, #4]
 80006b0:	9301      	str	r3, [sp, #4]
 80006b2:	e009      	b.n	80006c8 <__init_ram_areas+0x28>

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
      *p = *tp;
 80006b4:	9b02      	ldr	r3, [sp, #8]
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	9b01      	ldr	r3, [sp, #4]
 80006ba:	601a      	str	r2, [r3, #0]
      p++;
 80006bc:	9b01      	ldr	r3, [sp, #4]
 80006be:	3304      	adds	r3, #4
 80006c0:	9301      	str	r3, [sp, #4]
      tp++;
 80006c2:	9b02      	ldr	r3, [sp, #8]
 80006c4:	3304      	adds	r3, #4
 80006c6:	9302      	str	r3, [sp, #8]
    while (p < rap->clear_area) {
 80006c8:	9b03      	ldr	r3, [sp, #12]
 80006ca:	689b      	ldr	r3, [r3, #8]
 80006cc:	9a01      	ldr	r2, [sp, #4]
 80006ce:	429a      	cmp	r2, r3
 80006d0:	d3f0      	bcc.n	80006b4 <__init_ram_areas+0x14>
 80006d2:	e005      	b.n	80006e0 <__init_ram_areas+0x40>
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 80006d4:	9b01      	ldr	r3, [sp, #4]
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
      p++;
 80006da:	9b01      	ldr	r3, [sp, #4]
 80006dc:	3304      	adds	r3, #4
 80006de:	9301      	str	r3, [sp, #4]
    while (p < rap->no_init_area) {
 80006e0:	9b03      	ldr	r3, [sp, #12]
 80006e2:	68db      	ldr	r3, [r3, #12]
 80006e4:	9a01      	ldr	r2, [sp, #4]
 80006e6:	429a      	cmp	r2, r3
 80006e8:	d3f4      	bcc.n	80006d4 <__init_ram_areas+0x34>
    }
    rap++;
 80006ea:	9b03      	ldr	r3, [sp, #12]
 80006ec:	3310      	adds	r3, #16
 80006ee:	9303      	str	r3, [sp, #12]
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 80006f0:	9b03      	ldr	r3, [sp, #12]
 80006f2:	4a03      	ldr	r2, [pc, #12]	; (8000700 <__init_ram_areas+0x60>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d3d6      	bcc.n	80006a6 <__init_ram_areas+0x6>
#endif
}
 80006f8:	b004      	add	sp, #16
 80006fa:	4770      	bx	lr
 80006fc:	080049e8 	.word	0x080049e8
 8000700:	08004a68 	.word	0x08004a68
	...

08000710 <osalInit>:
 *
 * @api
 */
static inline void osalInit(void) {

}
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
	...

08000720 <halInit>:
 *          board-specific initialization is performed by invoking
 *          @p boardInit() (usually defined in @p board.c).
 *
 * @init
 */
void halInit(void) {
 8000720:	b508      	push	{r3, lr}

  /* Initializes the OS Abstraction Layer.*/
  osalInit();
 8000722:	f7ff fff5 	bl	8000710 <osalInit>

  /* Platform low level initializations.*/
  hal_lld_init();
 8000726:	f000 fecb 	bl	80014c0 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
#if defined(PAL_NEW_INIT)
  palInit();
#else
  palInit(&pal_default_config);
 800072a:	4806      	ldr	r0, [pc, #24]	; (8000744 <halInit+0x24>)
 800072c:	f001 f8a8 	bl	8001880 <_pal_lld_init>
#endif
#if (HAL_USE_PWM == TRUE) || defined(__DOXYGEN__)
  pwmInit();
#endif
#if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  sdInit();
 8000730:	f000 fcbe 	bl	80010b0 <sdInit>
#endif
#if (HAL_USE_SDC == TRUE) || defined(__DOXYGEN__)
  sdcInit();
#endif
#if (HAL_USE_SPI == TRUE) || defined(__DOXYGEN__)
  spiInit();
 8000734:	f000 fd74 	bl	8001220 <spiInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
 8000738:	f001 fdb2 	bl	80022a0 <boardInit>
/*
 *  The ST driver is a special case, it is only initialized if the OSAL is
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
 800073c:	f000 f840 	bl	80007c0 <stInit>
#endif
}
 8000740:	bd08      	pop	{r3, pc}
 8000742:	bf00      	nop
 8000744:	08004bb4 	.word	0x08004bb4
	...

08000750 <st_lld_get_counter>:
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000750:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000756:	b29b      	uxth	r3, r3
}
 8000758:	4618      	mov	r0, r3
 800075a:	4770      	bx	lr
 800075c:	0000      	movs	r0, r0
	...

08000760 <st_lld_start_alarm>:
 *
 * @param[in] abstime   the time to be set for the first alarm
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t abstime) {
 8000760:	b082      	sub	sp, #8
 8000762:	4603      	mov	r3, r0
 8000764:	f8ad 3006 	strh.w	r3, [sp, #6]

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8000768:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800076c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000770:	6353      	str	r3, [r2, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8000772:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000776:	2200      	movs	r2, #0
 8000778:	611a      	str	r2, [r3, #16]
#if ST_LLD_NUM_ALARMS == 1
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800077a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800077e:	2202      	movs	r2, #2
 8000780:	60da      	str	r2, [r3, #12]
#else
  STM32_ST_TIM->DIER  |= STM32_TIM_DIER_CC1IE;
#endif
}
 8000782:	b002      	add	sp, #8
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
	...

08000790 <st_lld_stop_alarm>:
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

#if ST_LLD_NUM_ALARMS == 1
  STM32_ST_TIM->DIER = 0U;
 8000790:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000794:	2200      	movs	r2, #0
 8000796:	60da      	str	r2, [r3, #12]
#else
 STM32_ST_TIM->DIER &= ~STM32_TIM_DIER_CC1IE;
#endif
}
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	0000      	movs	r0, r0
	...

080007a0 <st_lld_set_alarm>:
 *
 * @param[in] abstime   the time to be set for the next alarm
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t abstime) {
 80007a0:	b082      	sub	sp, #8
 80007a2:	4603      	mov	r3, r0
 80007a4:	f8ad 3006 	strh.w	r3, [sp, #6]

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80007a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007ac:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80007b0:	6353      	str	r3, [r2, #52]	; 0x34
}
 80007b2:	b002      	add	sp, #8
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
	...

080007c0 <stInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void stInit(void) {
 80007c0:	b508      	push	{r3, lr}

  for (i = 0U; i < (unsigned)ST_LLD_NUM_ALARMS - 1U; i++) {
    st_callbacks[i] = NULL;
  }
#endif
  st_lld_init();
 80007c2:	f001 fba5 	bl	8001f10 <st_lld_init>
}
 80007c6:	bd08      	pop	{r3, pc}
	...

080007d0 <stStartAlarm>:
 *
 * @param[in] abstime   the time to be set for the first alarm
 *
 * @api
 */
void stStartAlarm(systime_t abstime) {
 80007d0:	b500      	push	{lr}
 80007d2:	b083      	sub	sp, #12
 80007d4:	4603      	mov	r3, r0
 80007d6:	f8ad 3006 	strh.w	r3, [sp, #6]

  osalDbgAssert(stIsAlarmActive() == false, "already active");

  st_lld_start_alarm(abstime);
 80007da:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff ffbe 	bl	8000760 <st_lld_start_alarm>
}
 80007e4:	b003      	add	sp, #12
 80007e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80007ea:	bf00      	nop
 80007ec:	0000      	movs	r0, r0
	...

080007f0 <stStopAlarm>:
 * @note    This functionality is only available in free running mode, the
 *          behavior in periodic mode is undefined.
 *
 * @api
 */
void stStopAlarm(void) {
 80007f0:	b508      	push	{r3, lr}

  st_lld_stop_alarm();
 80007f2:	f7ff ffcd 	bl	8000790 <st_lld_stop_alarm>
}
 80007f6:	bd08      	pop	{r3, pc}
	...

08000800 <stSetAlarm>:
 *
 * @param[in] abstime   the time to be set for the next alarm
 *
 * @api
 */
void stSetAlarm(systime_t abstime) {
 8000800:	b500      	push	{lr}
 8000802:	b083      	sub	sp, #12
 8000804:	4603      	mov	r3, r0
 8000806:	f8ad 3006 	strh.w	r3, [sp, #6]

  osalDbgAssert(stIsAlarmActive() != false, "not active");

  st_lld_set_alarm(abstime);
 800080a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff ffc6 	bl	80007a0 <st_lld_set_alarm>
}
 8000814:	b003      	add	sp, #12
 8000816:	f85d fb04 	ldr.w	pc, [sp], #4
 800081a:	bf00      	nop
 800081c:	0000      	movs	r0, r0
	...

08000820 <stGetCounter>:
 *
 * @return              The counter value.
 *
 * @api
 */
systime_t stGetCounter(void) {
 8000820:	b508      	push	{r3, lr}

  return st_lld_get_counter();
 8000822:	f7ff ff95 	bl	8000750 <st_lld_get_counter>
 8000826:	4603      	mov	r3, r0
}
 8000828:	4618      	mov	r0, r3
 800082a:	bd08      	pop	{r3, pc}
 800082c:	0000      	movs	r0, r0
	...

08000830 <queue_init.lto_priv.90>:
 *
 * @param[in] tqp       pointer to the threads queue object
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {
 8000830:	b082      	sub	sp, #8
 8000832:	9001      	str	r0, [sp, #4]

  tqp->next = (thread_t *)tqp;
 8000834:	9b01      	ldr	r3, [sp, #4]
 8000836:	9a01      	ldr	r2, [sp, #4]
 8000838:	601a      	str	r2, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 800083a:	9b01      	ldr	r3, [sp, #4]
 800083c:	9a01      	ldr	r2, [sp, #4]
 800083e:	605a      	str	r2, [r3, #4]
}
 8000840:	b002      	add	sp, #8
 8000842:	4770      	bx	lr
	...

08000850 <chSysLock.lto_priv.30>:
/**
 * @brief   Enters the kernel lock state.
 *
 * @special
 */
static inline void chSysLock(void) {
 8000850:	b500      	push	{lr}
 8000852:	b083      	sub	sp, #12
 8000854:	2320      	movs	r3, #32
 8000856:	9301      	str	r3, [sp, #4]
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000858:	9b01      	ldr	r3, [sp, #4]
 800085a:	f383 8811 	msr	BASEPRI, r3

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 800085e:	f001 feb7 	bl	80025d0 <_dbg_check_lock>
}
 8000862:	b003      	add	sp, #12
 8000864:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000870 <chSysUnlock.lto_priv.8>:
/**
 * @brief   Leaves the kernel lock state.
 *
 * @special
 */
static inline void chSysUnlock(void) {
 8000870:	b500      	push	{lr}
 8000872:	b083      	sub	sp, #12

  _dbg_check_unlock();
 8000874:	f001 fec4 	bl	8002600 <_dbg_check_unlock>
 8000878:	2300      	movs	r3, #0
 800087a:	9301      	str	r3, [sp, #4]
 800087c:	9b01      	ldr	r3, [sp, #4]
 800087e:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
              (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
              "priority order violation");

  port_unlock();
}
 8000882:	b003      	add	sp, #12
 8000884:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000890 <chThdQueueObjectInit.lto_priv.87>:
 *
 * @param[out] tqp      pointer to the threads queue object
 *
 * @init
 */
static inline void chThdQueueObjectInit(threads_queue_t *tqp) {
 8000890:	b500      	push	{lr}
 8000892:	b083      	sub	sp, #12
 8000894:	9001      	str	r0, [sp, #4]

  queue_init(tqp);
 8000896:	9801      	ldr	r0, [sp, #4]
 8000898:	f7ff ffca 	bl	8000830 <queue_init.lto_priv.90>
}
 800089c:	b003      	add	sp, #12
 800089e:	f85d fb04 	ldr.w	pc, [sp], #4
 80008a2:	bf00      	nop
	...

080008b0 <osalSysLock.lto_priv.164>:
 * @brief   Enters a critical zone from thread context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysLock(void) {
 80008b0:	b508      	push	{r3, lr}

  chSysLock();
 80008b2:	f7ff ffcd 	bl	8000850 <chSysLock.lto_priv.30>
}
 80008b6:	bd08      	pop	{r3, pc}
	...

080008c0 <osalSysUnlock.lto_priv.159>:
 * @brief   Leaves a critical zone from thread context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysUnlock(void) {
 80008c0:	b508      	push	{r3, lr}

  chSysUnlock();
 80008c2:	f7ff ffd5 	bl	8000870 <chSysUnlock.lto_priv.8>
}
 80008c6:	bd08      	pop	{r3, pc}
	...

080008d0 <osalThreadQueueObjectInit.lto_priv.181>:
 *
 * @param[out] tqp      pointer to the threads queue object
 *
 * @init
 */
static inline void osalThreadQueueObjectInit(threads_queue_t *tqp) {
 80008d0:	b500      	push	{lr}
 80008d2:	b083      	sub	sp, #12
 80008d4:	9001      	str	r0, [sp, #4]

  chThdQueueObjectInit(tqp);
 80008d6:	9801      	ldr	r0, [sp, #4]
 80008d8:	f7ff ffda 	bl	8000890 <chThdQueueObjectInit.lto_priv.87>
}
 80008dc:	b003      	add	sp, #12
 80008de:	f85d fb04 	ldr.w	pc, [sp], #4
 80008e2:	bf00      	nop
	...

080008f0 <osalThreadEnqueueTimeoutS.lto_priv.179>:
 *                      specification.
 *
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {
 80008f0:	b500      	push	{lr}
 80008f2:	b083      	sub	sp, #12
 80008f4:	9001      	str	r0, [sp, #4]
 80008f6:	9100      	str	r1, [sp, #0]

  return chThdEnqueueTimeoutS(tqp, timeout);
 80008f8:	9900      	ldr	r1, [sp, #0]
 80008fa:	9801      	ldr	r0, [sp, #4]
 80008fc:	f002 fd90 	bl	8003420 <chThdEnqueueTimeoutS>
 8000900:	4603      	mov	r3, r0
}
 8000902:	4618      	mov	r0, r3
 8000904:	b003      	add	sp, #12
 8000906:	f85d fb04 	ldr.w	pc, [sp], #4
 800090a:	bf00      	nop
 800090c:	0000      	movs	r0, r0
	...

08000910 <osalThreadDequeueNextI.lto_priv.177>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8000910:	b500      	push	{lr}
 8000912:	b083      	sub	sp, #12
 8000914:	9001      	str	r0, [sp, #4]
 8000916:	9100      	str	r1, [sp, #0]

  chThdDequeueNextI(tqp, msg);
 8000918:	9900      	ldr	r1, [sp, #0]
 800091a:	9801      	ldr	r0, [sp, #4]
 800091c:	f002 fda0 	bl	8003460 <chThdDequeueNextI>
}
 8000920:	b003      	add	sp, #12
 8000922:	f85d fb04 	ldr.w	pc, [sp], #4
 8000926:	bf00      	nop
	...

08000930 <iq_read>:
 *                      value 0 is reserved
 * @return              The number of bytes effectively transferred.
 *
 * @notapi
 */
static size_t iq_read(input_queue_t *iqp, uint8_t *bp, size_t n) {
 8000930:	b500      	push	{lr}
 8000932:	b087      	sub	sp, #28
 8000934:	9003      	str	r0, [sp, #12]
 8000936:	9102      	str	r1, [sp, #8]
 8000938:	9201      	str	r2, [sp, #4]
  size_t s1, s2;

  osalDbgCheck(n > 0U);
 800093a:	9b01      	ldr	r3, [sp, #4]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d102      	bne.n	8000946 <iq_read+0x16>
 8000940:	482d      	ldr	r0, [pc, #180]	; (80009f8 <iq_read+0xc8>)
 8000942:	f001 fe15 	bl	8002570 <chSysHalt>

  /* Number of bytes that can be read in a single atomic operation.*/
  if (n > iqGetFullI(iqp)) {
 8000946:	9b03      	ldr	r3, [sp, #12]
 8000948:	689b      	ldr	r3, [r3, #8]
 800094a:	9a01      	ldr	r2, [sp, #4]
 800094c:	429a      	cmp	r2, r3
 800094e:	d902      	bls.n	8000956 <iq_read+0x26>
    n = iqGetFullI(iqp);
 8000950:	9b03      	ldr	r3, [sp, #12]
 8000952:	689b      	ldr	r3, [r3, #8]
 8000954:	9301      	str	r3, [sp, #4]
  }

  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8000956:	9b03      	ldr	r3, [sp, #12]
 8000958:	691b      	ldr	r3, [r3, #16]
 800095a:	461a      	mov	r2, r3
 800095c:	9b03      	ldr	r3, [sp, #12]
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	9305      	str	r3, [sp, #20]
  /*lint -restore*/
  if (n < s1) {
 8000964:	9a01      	ldr	r2, [sp, #4]
 8000966:	9b05      	ldr	r3, [sp, #20]
 8000968:	429a      	cmp	r2, r3
 800096a:	d20d      	bcs.n	8000988 <iq_read+0x58>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 800096c:	9b03      	ldr	r3, [sp, #12]
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	9a01      	ldr	r2, [sp, #4]
 8000972:	4619      	mov	r1, r3
 8000974:	9802      	ldr	r0, [sp, #8]
 8000976:	f7ff fe01 	bl	800057c <memcpy>
    iqp->q_rdptr += n;
 800097a:	9b03      	ldr	r3, [sp, #12]
 800097c:	699a      	ldr	r2, [r3, #24]
 800097e:	9b01      	ldr	r3, [sp, #4]
 8000980:	441a      	add	r2, r3
 8000982:	9b03      	ldr	r3, [sp, #12]
 8000984:	619a      	str	r2, [r3, #24]
 8000986:	e02b      	b.n	80009e0 <iq_read+0xb0>
  }
  else if (n > s1) {
 8000988:	9a01      	ldr	r2, [sp, #4]
 800098a:	9b05      	ldr	r3, [sp, #20]
 800098c:	429a      	cmp	r2, r3
 800098e:	d91c      	bls.n	80009ca <iq_read+0x9a>
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8000990:	9b03      	ldr	r3, [sp, #12]
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	9a05      	ldr	r2, [sp, #20]
 8000996:	4619      	mov	r1, r3
 8000998:	9802      	ldr	r0, [sp, #8]
 800099a:	f7ff fdef 	bl	800057c <memcpy>
    bp += s1;
 800099e:	9a02      	ldr	r2, [sp, #8]
 80009a0:	9b05      	ldr	r3, [sp, #20]
 80009a2:	4413      	add	r3, r2
 80009a4:	9302      	str	r3, [sp, #8]
    s2 = n - s1;
 80009a6:	9a01      	ldr	r2, [sp, #4]
 80009a8:	9b05      	ldr	r3, [sp, #20]
 80009aa:	1ad3      	subs	r3, r2, r3
 80009ac:	9304      	str	r3, [sp, #16]
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 80009ae:	9b03      	ldr	r3, [sp, #12]
 80009b0:	68db      	ldr	r3, [r3, #12]
 80009b2:	9a04      	ldr	r2, [sp, #16]
 80009b4:	4619      	mov	r1, r3
 80009b6:	9802      	ldr	r0, [sp, #8]
 80009b8:	f7ff fde0 	bl	800057c <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
 80009bc:	9b03      	ldr	r3, [sp, #12]
 80009be:	68da      	ldr	r2, [r3, #12]
 80009c0:	9b04      	ldr	r3, [sp, #16]
 80009c2:	441a      	add	r2, r3
 80009c4:	9b03      	ldr	r3, [sp, #12]
 80009c6:	619a      	str	r2, [r3, #24]
 80009c8:	e00a      	b.n	80009e0 <iq_read+0xb0>
  }
  else {
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 80009ca:	9b03      	ldr	r3, [sp, #12]
 80009cc:	699b      	ldr	r3, [r3, #24]
 80009ce:	9a01      	ldr	r2, [sp, #4]
 80009d0:	4619      	mov	r1, r3
 80009d2:	9802      	ldr	r0, [sp, #8]
 80009d4:	f7ff fdd2 	bl	800057c <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 80009d8:	9b03      	ldr	r3, [sp, #12]
 80009da:	68da      	ldr	r2, [r3, #12]
 80009dc:	9b03      	ldr	r3, [sp, #12]
 80009de:	619a      	str	r2, [r3, #24]
  }

  iqp->q_counter -= n;
 80009e0:	9b03      	ldr	r3, [sp, #12]
 80009e2:	689a      	ldr	r2, [r3, #8]
 80009e4:	9b01      	ldr	r3, [sp, #4]
 80009e6:	1ad2      	subs	r2, r2, r3
 80009e8:	9b03      	ldr	r3, [sp, #12]
 80009ea:	609a      	str	r2, [r3, #8]
  return n;
 80009ec:	9b01      	ldr	r3, [sp, #4]
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	b007      	add	sp, #28
 80009f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80009f6:	bf00      	nop
 80009f8:	08004a68 	.word	0x08004a68
 80009fc:	00000000 	.word	0x00000000

08000a00 <oq_write>:
 *                      value 0 is reserved
 * @return              The number of bytes effectively transferred.
 *
 * @notapi
 */
static size_t oq_write(output_queue_t *oqp, const uint8_t *bp, size_t n) {
 8000a00:	b500      	push	{lr}
 8000a02:	b087      	sub	sp, #28
 8000a04:	9003      	str	r0, [sp, #12]
 8000a06:	9102      	str	r1, [sp, #8]
 8000a08:	9201      	str	r2, [sp, #4]
  size_t s1, s2;

  osalDbgCheck(n > 0U);
 8000a0a:	9b01      	ldr	r3, [sp, #4]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d102      	bne.n	8000a16 <oq_write+0x16>
 8000a10:	482d      	ldr	r0, [pc, #180]	; (8000ac8 <oq_write+0xc8>)
 8000a12:	f001 fdad 	bl	8002570 <chSysHalt>

  /* Number of bytes that can be written in a single atomic operation.*/
  if (n > oqGetEmptyI(oqp)) {
 8000a16:	9b03      	ldr	r3, [sp, #12]
 8000a18:	689b      	ldr	r3, [r3, #8]
 8000a1a:	9a01      	ldr	r2, [sp, #4]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d902      	bls.n	8000a26 <oq_write+0x26>
    n = oqGetEmptyI(oqp);
 8000a20:	9b03      	ldr	r3, [sp, #12]
 8000a22:	689b      	ldr	r3, [r3, #8]
 8000a24:	9301      	str	r3, [sp, #4]
  }

  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8000a26:	9b03      	ldr	r3, [sp, #12]
 8000a28:	691b      	ldr	r3, [r3, #16]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	9b03      	ldr	r3, [sp, #12]
 8000a2e:	695b      	ldr	r3, [r3, #20]
 8000a30:	1ad3      	subs	r3, r2, r3
 8000a32:	9305      	str	r3, [sp, #20]
  /*lint -restore*/
  if (n < s1) {
 8000a34:	9a01      	ldr	r2, [sp, #4]
 8000a36:	9b05      	ldr	r3, [sp, #20]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d20d      	bcs.n	8000a58 <oq_write+0x58>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8000a3c:	9b03      	ldr	r3, [sp, #12]
 8000a3e:	695b      	ldr	r3, [r3, #20]
 8000a40:	9a01      	ldr	r2, [sp, #4]
 8000a42:	9902      	ldr	r1, [sp, #8]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff fd99 	bl	800057c <memcpy>
    oqp->q_wrptr += n;
 8000a4a:	9b03      	ldr	r3, [sp, #12]
 8000a4c:	695a      	ldr	r2, [r3, #20]
 8000a4e:	9b01      	ldr	r3, [sp, #4]
 8000a50:	441a      	add	r2, r3
 8000a52:	9b03      	ldr	r3, [sp, #12]
 8000a54:	615a      	str	r2, [r3, #20]
 8000a56:	e02b      	b.n	8000ab0 <oq_write+0xb0>
  }
  else if (n > s1) {
 8000a58:	9a01      	ldr	r2, [sp, #4]
 8000a5a:	9b05      	ldr	r3, [sp, #20]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d91c      	bls.n	8000a9a <oq_write+0x9a>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8000a60:	9b03      	ldr	r3, [sp, #12]
 8000a62:	695b      	ldr	r3, [r3, #20]
 8000a64:	9a05      	ldr	r2, [sp, #20]
 8000a66:	9902      	ldr	r1, [sp, #8]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff fd87 	bl	800057c <memcpy>
    bp += s1;
 8000a6e:	9a02      	ldr	r2, [sp, #8]
 8000a70:	9b05      	ldr	r3, [sp, #20]
 8000a72:	4413      	add	r3, r2
 8000a74:	9302      	str	r3, [sp, #8]
    s2 = n - s1;
 8000a76:	9a01      	ldr	r2, [sp, #4]
 8000a78:	9b05      	ldr	r3, [sp, #20]
 8000a7a:	1ad3      	subs	r3, r2, r3
 8000a7c:	9304      	str	r3, [sp, #16]
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 8000a7e:	9b03      	ldr	r3, [sp, #12]
 8000a80:	68db      	ldr	r3, [r3, #12]
 8000a82:	9a04      	ldr	r2, [sp, #16]
 8000a84:	9902      	ldr	r1, [sp, #8]
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fd78 	bl	800057c <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
 8000a8c:	9b03      	ldr	r3, [sp, #12]
 8000a8e:	68da      	ldr	r2, [r3, #12]
 8000a90:	9b04      	ldr	r3, [sp, #16]
 8000a92:	441a      	add	r2, r3
 8000a94:	9b03      	ldr	r3, [sp, #12]
 8000a96:	615a      	str	r2, [r3, #20]
 8000a98:	e00a      	b.n	8000ab0 <oq_write+0xb0>
  }
  else {
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8000a9a:	9b03      	ldr	r3, [sp, #12]
 8000a9c:	695b      	ldr	r3, [r3, #20]
 8000a9e:	9a01      	ldr	r2, [sp, #4]
 8000aa0:	9902      	ldr	r1, [sp, #8]
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff fd6a 	bl	800057c <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 8000aa8:	9b03      	ldr	r3, [sp, #12]
 8000aaa:	68da      	ldr	r2, [r3, #12]
 8000aac:	9b03      	ldr	r3, [sp, #12]
 8000aae:	615a      	str	r2, [r3, #20]
  }

  oqp->q_counter -= n;
 8000ab0:	9b03      	ldr	r3, [sp, #12]
 8000ab2:	689a      	ldr	r2, [r3, #8]
 8000ab4:	9b01      	ldr	r3, [sp, #4]
 8000ab6:	1ad2      	subs	r2, r2, r3
 8000ab8:	9b03      	ldr	r3, [sp, #12]
 8000aba:	609a      	str	r2, [r3, #8]
  return n;
 8000abc:	9b01      	ldr	r3, [sp, #4]
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	b007      	add	sp, #28
 8000ac2:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ac6:	bf00      	nop
 8000ac8:	08004a70 	.word	0x08004a70
 8000acc:	00000000 	.word	0x00000000

08000ad0 <iqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {
 8000ad0:	b500      	push	{lr}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	9003      	str	r0, [sp, #12]
 8000ad6:	9102      	str	r1, [sp, #8]
 8000ad8:	9201      	str	r2, [sp, #4]
 8000ada:	9300      	str	r3, [sp, #0]

  osalThreadQueueObjectInit(&iqp->q_waiting);
 8000adc:	9b03      	ldr	r3, [sp, #12]
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff fef6 	bl	80008d0 <osalThreadQueueObjectInit.lto_priv.181>
  iqp->q_counter = 0;
 8000ae4:	9b03      	ldr	r3, [sp, #12]
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  iqp->q_buffer  = bp;
 8000aea:	9b03      	ldr	r3, [sp, #12]
 8000aec:	9a02      	ldr	r2, [sp, #8]
 8000aee:	60da      	str	r2, [r3, #12]
  iqp->q_rdptr   = bp;
 8000af0:	9b03      	ldr	r3, [sp, #12]
 8000af2:	9a02      	ldr	r2, [sp, #8]
 8000af4:	619a      	str	r2, [r3, #24]
  iqp->q_wrptr   = bp;
 8000af6:	9b03      	ldr	r3, [sp, #12]
 8000af8:	9a02      	ldr	r2, [sp, #8]
 8000afa:	615a      	str	r2, [r3, #20]
  iqp->q_top     = bp + size;
 8000afc:	9a02      	ldr	r2, [sp, #8]
 8000afe:	9b01      	ldr	r3, [sp, #4]
 8000b00:	441a      	add	r2, r3
 8000b02:	9b03      	ldr	r3, [sp, #12]
 8000b04:	611a      	str	r2, [r3, #16]
  iqp->q_notify  = infy;
 8000b06:	9b03      	ldr	r3, [sp, #12]
 8000b08:	9a00      	ldr	r2, [sp, #0]
 8000b0a:	61da      	str	r2, [r3, #28]
  iqp->q_link    = link;
 8000b0c:	9b03      	ldr	r3, [sp, #12]
 8000b0e:	9a06      	ldr	r2, [sp, #24]
 8000b10:	621a      	str	r2, [r3, #32]
}
 8000b12:	b005      	add	sp, #20
 8000b14:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000b20 <iqPutI>:
 * @retval MSG_OK       if the operation has been completed with success.
 * @retval MSG_TIMEOUT  if the queue is full.
 *
 * @iclass
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {
 8000b20:	b500      	push	{lr}
 8000b22:	b083      	sub	sp, #12
 8000b24:	9001      	str	r0, [sp, #4]
 8000b26:	460b      	mov	r3, r1
 8000b28:	f88d 3003 	strb.w	r3, [sp, #3]

  osalDbgCheckClassI();
 8000b2c:	f001 fe00 	bl	8002730 <chDbgCheckClassI>

  /* Queue space check.*/
  if (!iqIsFullI(iqp)) {
 8000b30:	9b01      	ldr	r3, [sp, #4]
 8000b32:	695a      	ldr	r2, [r3, #20]
 8000b34:	9b01      	ldr	r3, [sp, #4]
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d105      	bne.n	8000b48 <iqPutI+0x28>
 8000b3c:	9b01      	ldr	r3, [sp, #4]
 8000b3e:	689b      	ldr	r3, [r3, #8]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <iqPutI+0x28>
 8000b44:	2301      	movs	r3, #1
 8000b46:	e000      	b.n	8000b4a <iqPutI+0x2a>
 8000b48:	2300      	movs	r3, #0
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	f083 0301 	eor.w	r3, r3, #1
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d01d      	beq.n	8000b96 <iqPutI+0x76>
    iqp->q_counter++;
 8000b5a:	9b01      	ldr	r3, [sp, #4]
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	1c5a      	adds	r2, r3, #1
 8000b60:	9b01      	ldr	r3, [sp, #4]
 8000b62:	609a      	str	r2, [r3, #8]
    *iqp->q_wrptr++ = b;
 8000b64:	9b01      	ldr	r3, [sp, #4]
 8000b66:	695b      	ldr	r3, [r3, #20]
 8000b68:	1c59      	adds	r1, r3, #1
 8000b6a:	9a01      	ldr	r2, [sp, #4]
 8000b6c:	6151      	str	r1, [r2, #20]
 8000b6e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8000b72:	701a      	strb	r2, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top) {
 8000b74:	9b01      	ldr	r3, [sp, #4]
 8000b76:	695a      	ldr	r2, [r3, #20]
 8000b78:	9b01      	ldr	r3, [sp, #4]
 8000b7a:	691b      	ldr	r3, [r3, #16]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d303      	bcc.n	8000b88 <iqPutI+0x68>
      iqp->q_wrptr = iqp->q_buffer;
 8000b80:	9b01      	ldr	r3, [sp, #4]
 8000b82:	68da      	ldr	r2, [r3, #12]
 8000b84:	9b01      	ldr	r3, [sp, #4]
 8000b86:	615a      	str	r2, [r3, #20]
    }

    osalThreadDequeueNextI(&iqp->q_waiting, MSG_OK);
 8000b88:	9b01      	ldr	r3, [sp, #4]
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff febf 	bl	8000910 <osalThreadDequeueNextI.lto_priv.177>

    return MSG_OK;
 8000b92:	2300      	movs	r3, #0
 8000b94:	e001      	b.n	8000b9a <iqPutI+0x7a>
  }

  return MSG_TIMEOUT;
 8000b96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	b003      	add	sp, #12
 8000b9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ba2:	bf00      	nop
	...

08000bb0 <iqGetTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 8000bb0:	b500      	push	{lr}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	9001      	str	r0, [sp, #4]
 8000bb6:	9100      	str	r1, [sp, #0]
  uint8_t b;

  osalSysLock();
 8000bb8:	f7ff fe7a 	bl	80008b0 <osalSysLock.lto_priv.164>
 8000bbc:	e00c      	b.n	8000bd8 <iqGetTimeout+0x28>

  /* Waiting until there is a character available or a timeout occurs.*/
  while (iqIsEmptyI(iqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
 8000bbe:	9b01      	ldr	r3, [sp, #4]
 8000bc0:	9900      	ldr	r1, [sp, #0]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff fe94 	bl	80008f0 <osalThreadEnqueueTimeoutS.lto_priv.179>
 8000bc8:	9002      	str	r0, [sp, #8]
    if (msg < MSG_OK) {
 8000bca:	9b02      	ldr	r3, [sp, #8]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	da03      	bge.n	8000bd8 <iqGetTimeout+0x28>
      osalSysUnlock();
 8000bd0:	f7ff fe76 	bl	80008c0 <osalSysUnlock.lto_priv.159>
      return msg;
 8000bd4:	9b02      	ldr	r3, [sp, #8]
 8000bd6:	e026      	b.n	8000c26 <iqGetTimeout+0x76>
  while (iqIsEmptyI(iqp)) {
 8000bd8:	9b01      	ldr	r3, [sp, #4]
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d0ee      	beq.n	8000bbe <iqGetTimeout+0xe>
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
 8000be0:	9b01      	ldr	r3, [sp, #4]
 8000be2:	689b      	ldr	r3, [r3, #8]
 8000be4:	1e5a      	subs	r2, r3, #1
 8000be6:	9b01      	ldr	r3, [sp, #4]
 8000be8:	609a      	str	r2, [r3, #8]
  b = *iqp->q_rdptr++;
 8000bea:	9b01      	ldr	r3, [sp, #4]
 8000bec:	699b      	ldr	r3, [r3, #24]
 8000bee:	1c59      	adds	r1, r3, #1
 8000bf0:	9a01      	ldr	r2, [sp, #4]
 8000bf2:	6191      	str	r1, [r2, #24]
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	f88d 300f 	strb.w	r3, [sp, #15]
  if (iqp->q_rdptr >= iqp->q_top) {
 8000bfa:	9b01      	ldr	r3, [sp, #4]
 8000bfc:	699a      	ldr	r2, [r3, #24]
 8000bfe:	9b01      	ldr	r3, [sp, #4]
 8000c00:	691b      	ldr	r3, [r3, #16]
 8000c02:	429a      	cmp	r2, r3
 8000c04:	d303      	bcc.n	8000c0e <iqGetTimeout+0x5e>
    iqp->q_rdptr = iqp->q_buffer;
 8000c06:	9b01      	ldr	r3, [sp, #4]
 8000c08:	68da      	ldr	r2, [r3, #12]
 8000c0a:	9b01      	ldr	r3, [sp, #4]
 8000c0c:	619a      	str	r2, [r3, #24]
  }

  /* Inform the low side that the queue has at least one slot available.*/
  if (iqp->q_notify != NULL) {
 8000c0e:	9b01      	ldr	r3, [sp, #4]
 8000c10:	69db      	ldr	r3, [r3, #28]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d003      	beq.n	8000c1e <iqGetTimeout+0x6e>
    iqp->q_notify(iqp);
 8000c16:	9b01      	ldr	r3, [sp, #4]
 8000c18:	69db      	ldr	r3, [r3, #28]
 8000c1a:	9801      	ldr	r0, [sp, #4]
 8000c1c:	4798      	blx	r3
  }

  osalSysUnlock();
 8000c1e:	f7ff fe4f 	bl	80008c0 <osalSysUnlock.lto_priv.159>

  return (msg_t)b;
 8000c22:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	b005      	add	sp, #20
 8000c2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c2e:	bf00      	nop

08000c30 <iqReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
                     size_t n, sysinterval_t timeout) {
 8000c30:	b500      	push	{lr}
 8000c32:	b089      	sub	sp, #36	; 0x24
 8000c34:	9003      	str	r0, [sp, #12]
 8000c36:	9102      	str	r1, [sp, #8]
 8000c38:	9201      	str	r2, [sp, #4]
 8000c3a:	9300      	str	r3, [sp, #0]
  qnotify_t nfy = iqp->q_notify;
 8000c3c:	9b03      	ldr	r3, [sp, #12]
 8000c3e:	69db      	ldr	r3, [r3, #28]
 8000c40:	9307      	str	r3, [sp, #28]
  size_t max = n;
 8000c42:	9b01      	ldr	r3, [sp, #4]
 8000c44:	9306      	str	r3, [sp, #24]

  osalDbgCheck(n > 0U);
 8000c46:	9b01      	ldr	r3, [sp, #4]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d102      	bne.n	8000c52 <iqReadTimeout+0x22>
 8000c4c:	481b      	ldr	r0, [pc, #108]	; (8000cbc <iqReadTimeout+0x8c>)
 8000c4e:	f001 fc8f 	bl	8002570 <chSysHalt>

  osalSysLock();
 8000c52:	f7ff fe2d 	bl	80008b0 <osalSysLock.lto_priv.164>
 8000c56:	e024      	b.n	8000ca2 <iqReadTimeout+0x72>

  while (n > 0U) {
    size_t done;

    done = iq_read(iqp, bp, n);
 8000c58:	9a01      	ldr	r2, [sp, #4]
 8000c5a:	9902      	ldr	r1, [sp, #8]
 8000c5c:	9803      	ldr	r0, [sp, #12]
 8000c5e:	f7ff fe67 	bl	8000930 <iq_read>
 8000c62:	9005      	str	r0, [sp, #20]
    if (done == (size_t)0) {
 8000c64:	9b05      	ldr	r3, [sp, #20]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d109      	bne.n	8000c7e <iqReadTimeout+0x4e>
      msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
 8000c6a:	9b03      	ldr	r3, [sp, #12]
 8000c6c:	9900      	ldr	r1, [sp, #0]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff fe3e 	bl	80008f0 <osalThreadEnqueueTimeoutS.lto_priv.179>
 8000c74:	9004      	str	r0, [sp, #16]

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 8000c76:	9b04      	ldr	r3, [sp, #16]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d115      	bne.n	8000ca8 <iqReadTimeout+0x78>
 8000c7c:	e011      	b.n	8000ca2 <iqReadTimeout+0x72>
      }
    }
    else {
      /* Inform the low side that the queue has at least one empty slot
         available.*/
      if (nfy != NULL) {
 8000c7e:	9b07      	ldr	r3, [sp, #28]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d002      	beq.n	8000c8a <iqReadTimeout+0x5a>
        nfy(iqp);
 8000c84:	9b07      	ldr	r3, [sp, #28]
 8000c86:	9803      	ldr	r0, [sp, #12]
 8000c88:	4798      	blx	r3
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();
 8000c8a:	f7ff fe19 	bl	80008c0 <osalSysUnlock.lto_priv.159>

      n  -= done;
 8000c8e:	9a01      	ldr	r2, [sp, #4]
 8000c90:	9b05      	ldr	r3, [sp, #20]
 8000c92:	1ad3      	subs	r3, r2, r3
 8000c94:	9301      	str	r3, [sp, #4]
      bp += done;
 8000c96:	9a02      	ldr	r2, [sp, #8]
 8000c98:	9b05      	ldr	r3, [sp, #20]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	9302      	str	r3, [sp, #8]

      osalSysLock();
 8000c9e:	f7ff fe07 	bl	80008b0 <osalSysLock.lto_priv.164>
  while (n > 0U) {
 8000ca2:	9b01      	ldr	r3, [sp, #4]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d1d7      	bne.n	8000c58 <iqReadTimeout+0x28>
    }
  }

  osalSysUnlock();
 8000ca8:	f7ff fe0a 	bl	80008c0 <osalSysUnlock.lto_priv.159>
  return max - n;
 8000cac:	9a06      	ldr	r2, [sp, #24]
 8000cae:	9b01      	ldr	r3, [sp, #4]
 8000cb0:	1ad3      	subs	r3, r2, r3
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	b009      	add	sp, #36	; 0x24
 8000cb6:	f85d fb04 	ldr.w	pc, [sp], #4
 8000cba:	bf00      	nop
 8000cbc:	08004a7c 	.word	0x08004a7c

08000cc0 <oqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {
 8000cc0:	b500      	push	{lr}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	9003      	str	r0, [sp, #12]
 8000cc6:	9102      	str	r1, [sp, #8]
 8000cc8:	9201      	str	r2, [sp, #4]
 8000cca:	9300      	str	r3, [sp, #0]

  osalThreadQueueObjectInit(&oqp->q_waiting);
 8000ccc:	9b03      	ldr	r3, [sp, #12]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fdfe 	bl	80008d0 <osalThreadQueueObjectInit.lto_priv.181>
  oqp->q_counter = size;
 8000cd4:	9b03      	ldr	r3, [sp, #12]
 8000cd6:	9a01      	ldr	r2, [sp, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
  oqp->q_buffer  = bp;
 8000cda:	9b03      	ldr	r3, [sp, #12]
 8000cdc:	9a02      	ldr	r2, [sp, #8]
 8000cde:	60da      	str	r2, [r3, #12]
  oqp->q_rdptr   = bp;
 8000ce0:	9b03      	ldr	r3, [sp, #12]
 8000ce2:	9a02      	ldr	r2, [sp, #8]
 8000ce4:	619a      	str	r2, [r3, #24]
  oqp->q_wrptr   = bp;
 8000ce6:	9b03      	ldr	r3, [sp, #12]
 8000ce8:	9a02      	ldr	r2, [sp, #8]
 8000cea:	615a      	str	r2, [r3, #20]
  oqp->q_top     = bp + size;
 8000cec:	9a02      	ldr	r2, [sp, #8]
 8000cee:	9b01      	ldr	r3, [sp, #4]
 8000cf0:	441a      	add	r2, r3
 8000cf2:	9b03      	ldr	r3, [sp, #12]
 8000cf4:	611a      	str	r2, [r3, #16]
  oqp->q_notify  = onfy;
 8000cf6:	9b03      	ldr	r3, [sp, #12]
 8000cf8:	9a00      	ldr	r2, [sp, #0]
 8000cfa:	61da      	str	r2, [r3, #28]
  oqp->q_link    = link;
 8000cfc:	9b03      	ldr	r3, [sp, #12]
 8000cfe:	9a06      	ldr	r2, [sp, #24]
 8000d00:	621a      	str	r2, [r3, #32]
}
 8000d02:	b005      	add	sp, #20
 8000d04:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000d10 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8000d10:	b500      	push	{lr}
 8000d12:	b087      	sub	sp, #28
 8000d14:	9003      	str	r0, [sp, #12]
 8000d16:	460b      	mov	r3, r1
 8000d18:	9201      	str	r2, [sp, #4]
 8000d1a:	f88d 300b 	strb.w	r3, [sp, #11]

  osalSysLock();
 8000d1e:	f7ff fdc7 	bl	80008b0 <osalSysLock.lto_priv.164>
 8000d22:	e00c      	b.n	8000d3e <oqPutTimeout+0x2e>

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8000d24:	9b03      	ldr	r3, [sp, #12]
 8000d26:	9901      	ldr	r1, [sp, #4]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff fde1 	bl	80008f0 <osalThreadEnqueueTimeoutS.lto_priv.179>
 8000d2e:	9005      	str	r0, [sp, #20]
    if (msg < MSG_OK) {
 8000d30:	9b05      	ldr	r3, [sp, #20]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	da03      	bge.n	8000d3e <oqPutTimeout+0x2e>
      osalSysUnlock();
 8000d36:	f7ff fdc3 	bl	80008c0 <osalSysUnlock.lto_priv.159>
      return msg;
 8000d3a:	9b05      	ldr	r3, [sp, #20]
 8000d3c:	e025      	b.n	8000d8a <oqPutTimeout+0x7a>
  while (oqIsFullI(oqp)) {
 8000d3e:	9b03      	ldr	r3, [sp, #12]
 8000d40:	689b      	ldr	r3, [r3, #8]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d0ee      	beq.n	8000d24 <oqPutTimeout+0x14>
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
 8000d46:	9b03      	ldr	r3, [sp, #12]
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	1e5a      	subs	r2, r3, #1
 8000d4c:	9b03      	ldr	r3, [sp, #12]
 8000d4e:	609a      	str	r2, [r3, #8]
  *oqp->q_wrptr++ = b;
 8000d50:	9b03      	ldr	r3, [sp, #12]
 8000d52:	695b      	ldr	r3, [r3, #20]
 8000d54:	1c59      	adds	r1, r3, #1
 8000d56:	9a03      	ldr	r2, [sp, #12]
 8000d58:	6151      	str	r1, [r2, #20]
 8000d5a:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8000d5e:	701a      	strb	r2, [r3, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8000d60:	9b03      	ldr	r3, [sp, #12]
 8000d62:	695a      	ldr	r2, [r3, #20]
 8000d64:	9b03      	ldr	r3, [sp, #12]
 8000d66:	691b      	ldr	r3, [r3, #16]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d303      	bcc.n	8000d74 <oqPutTimeout+0x64>
    oqp->q_wrptr = oqp->q_buffer;
 8000d6c:	9b03      	ldr	r3, [sp, #12]
 8000d6e:	68da      	ldr	r2, [r3, #12]
 8000d70:	9b03      	ldr	r3, [sp, #12]
 8000d72:	615a      	str	r2, [r3, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
 8000d74:	9b03      	ldr	r3, [sp, #12]
 8000d76:	69db      	ldr	r3, [r3, #28]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d003      	beq.n	8000d84 <oqPutTimeout+0x74>
    oqp->q_notify(oqp);
 8000d7c:	9b03      	ldr	r3, [sp, #12]
 8000d7e:	69db      	ldr	r3, [r3, #28]
 8000d80:	9803      	ldr	r0, [sp, #12]
 8000d82:	4798      	blx	r3
  }

  osalSysUnlock();
 8000d84:	f7ff fd9c 	bl	80008c0 <osalSysUnlock.lto_priv.159>

  return MSG_OK;
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	b007      	add	sp, #28
 8000d8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d92:	bf00      	nop
	...

08000da0 <oqGetI>:
 * @return              The byte value from the queue.
 * @retval MSG_TIMEOUT  if the queue is empty.
 *
 * @iclass
 */
msg_t oqGetI(output_queue_t *oqp) {
 8000da0:	b500      	push	{lr}
 8000da2:	b085      	sub	sp, #20
 8000da4:	9001      	str	r0, [sp, #4]

  osalDbgCheckClassI();
 8000da6:	f001 fcc3 	bl	8002730 <chDbgCheckClassI>

  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
 8000daa:	9b01      	ldr	r3, [sp, #4]
 8000dac:	695a      	ldr	r2, [r3, #20]
 8000dae:	9b01      	ldr	r3, [sp, #4]
 8000db0:	699b      	ldr	r3, [r3, #24]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d105      	bne.n	8000dc2 <oqGetI+0x22>
 8000db6:	9b01      	ldr	r3, [sp, #4]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <oqGetI+0x22>
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e000      	b.n	8000dc4 <oqGetI+0x24>
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	f083 0301 	eor.w	r3, r3, #1
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d01e      	beq.n	8000e12 <oqGetI+0x72>
    uint8_t b;

    oqp->q_counter++;
 8000dd4:	9b01      	ldr	r3, [sp, #4]
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	1c5a      	adds	r2, r3, #1
 8000dda:	9b01      	ldr	r3, [sp, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
    b = *oqp->q_rdptr++;
 8000dde:	9b01      	ldr	r3, [sp, #4]
 8000de0:	699b      	ldr	r3, [r3, #24]
 8000de2:	1c59      	adds	r1, r3, #1
 8000de4:	9a01      	ldr	r2, [sp, #4]
 8000de6:	6191      	str	r1, [r2, #24]
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	f88d 300f 	strb.w	r3, [sp, #15]
    if (oqp->q_rdptr >= oqp->q_top) {
 8000dee:	9b01      	ldr	r3, [sp, #4]
 8000df0:	699a      	ldr	r2, [r3, #24]
 8000df2:	9b01      	ldr	r3, [sp, #4]
 8000df4:	691b      	ldr	r3, [r3, #16]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d303      	bcc.n	8000e02 <oqGetI+0x62>
      oqp->q_rdptr = oqp->q_buffer;
 8000dfa:	9b01      	ldr	r3, [sp, #4]
 8000dfc:	68da      	ldr	r2, [r3, #12]
 8000dfe:	9b01      	ldr	r3, [sp, #4]
 8000e00:	619a      	str	r2, [r3, #24]
    }

    osalThreadDequeueNextI(&oqp->q_waiting, MSG_OK);
 8000e02:	9b01      	ldr	r3, [sp, #4]
 8000e04:	2100      	movs	r1, #0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fd82 	bl	8000910 <osalThreadDequeueNextI.lto_priv.177>

    return (msg_t)b;
 8000e0c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8000e10:	e001      	b.n	8000e16 <oqGetI+0x76>
  }

  return MSG_TIMEOUT;
 8000e12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	b005      	add	sp, #20
 8000e1a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e1e:	bf00      	nop

08000e20 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8000e20:	b500      	push	{lr}
 8000e22:	b089      	sub	sp, #36	; 0x24
 8000e24:	9003      	str	r0, [sp, #12]
 8000e26:	9102      	str	r1, [sp, #8]
 8000e28:	9201      	str	r2, [sp, #4]
 8000e2a:	9300      	str	r3, [sp, #0]
  qnotify_t nfy = oqp->q_notify;
 8000e2c:	9b03      	ldr	r3, [sp, #12]
 8000e2e:	69db      	ldr	r3, [r3, #28]
 8000e30:	9307      	str	r3, [sp, #28]
  size_t max = n;
 8000e32:	9b01      	ldr	r3, [sp, #4]
 8000e34:	9306      	str	r3, [sp, #24]

  osalDbgCheck(n > 0U);
 8000e36:	9b01      	ldr	r3, [sp, #4]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d102      	bne.n	8000e42 <oqWriteTimeout+0x22>
 8000e3c:	481b      	ldr	r0, [pc, #108]	; (8000eac <oqWriteTimeout+0x8c>)
 8000e3e:	f001 fb97 	bl	8002570 <chSysHalt>

  osalSysLock();
 8000e42:	f7ff fd35 	bl	80008b0 <osalSysLock.lto_priv.164>
 8000e46:	e024      	b.n	8000e92 <oqWriteTimeout+0x72>

  while (n > 0U) {
    size_t done;

    done = oq_write(oqp, bp, n);
 8000e48:	9a01      	ldr	r2, [sp, #4]
 8000e4a:	9902      	ldr	r1, [sp, #8]
 8000e4c:	9803      	ldr	r0, [sp, #12]
 8000e4e:	f7ff fdd7 	bl	8000a00 <oq_write>
 8000e52:	9005      	str	r0, [sp, #20]
    if (done == (size_t)0) {
 8000e54:	9b05      	ldr	r3, [sp, #20]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d109      	bne.n	8000e6e <oqWriteTimeout+0x4e>
      msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8000e5a:	9b03      	ldr	r3, [sp, #12]
 8000e5c:	9900      	ldr	r1, [sp, #0]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff fd46 	bl	80008f0 <osalThreadEnqueueTimeoutS.lto_priv.179>
 8000e64:	9004      	str	r0, [sp, #16]

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 8000e66:	9b04      	ldr	r3, [sp, #16]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d115      	bne.n	8000e98 <oqWriteTimeout+0x78>
 8000e6c:	e011      	b.n	8000e92 <oqWriteTimeout+0x72>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 8000e6e:	9b07      	ldr	r3, [sp, #28]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d002      	beq.n	8000e7a <oqWriteTimeout+0x5a>
        nfy(oqp);
 8000e74:	9b07      	ldr	r3, [sp, #28]
 8000e76:	9803      	ldr	r0, [sp, #12]
 8000e78:	4798      	blx	r3
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();
 8000e7a:	f7ff fd21 	bl	80008c0 <osalSysUnlock.lto_priv.159>

      n  -= done;
 8000e7e:	9a01      	ldr	r2, [sp, #4]
 8000e80:	9b05      	ldr	r3, [sp, #20]
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	9301      	str	r3, [sp, #4]
      bp += done;
 8000e86:	9a02      	ldr	r2, [sp, #8]
 8000e88:	9b05      	ldr	r3, [sp, #20]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	9302      	str	r3, [sp, #8]

      osalSysLock();
 8000e8e:	f7ff fd0f 	bl	80008b0 <osalSysLock.lto_priv.164>
  while (n > 0U) {
 8000e92:	9b01      	ldr	r3, [sp, #4]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d1d7      	bne.n	8000e48 <oqWriteTimeout+0x28>
    }
  }

  osalSysUnlock();
 8000e98:	f7ff fd12 	bl	80008c0 <osalSysUnlock.lto_priv.159>
  return max - n;
 8000e9c:	9a06      	ldr	r2, [sp, #24]
 8000e9e:	9b01      	ldr	r3, [sp, #4]
 8000ea0:	1ad3      	subs	r3, r2, r3
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	b009      	add	sp, #36	; 0x24
 8000ea6:	f85d fb04 	ldr.w	pc, [sp], #4
 8000eaa:	bf00      	nop
 8000eac:	08004a8c 	.word	0x08004a8c

08000eb0 <chEvtObjectInit>:
 *
 * @param[in] esp       pointer to the @p event_source_t structure
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	9001      	str	r0, [sp, #4]

  esp->next = (event_listener_t *)esp;
 8000eb4:	9b01      	ldr	r3, [sp, #4]
 8000eb6:	9a01      	ldr	r2, [sp, #4]
 8000eb8:	601a      	str	r2, [r3, #0]
}
 8000eba:	b002      	add	sp, #8
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <osalEventObjectInit>:
 *
 * @param[out] esp      pointer to the event source object
 *
 * @init
 */
static inline void osalEventObjectInit(event_source_t *esp) {
 8000ec0:	b500      	push	{lr}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	9001      	str	r0, [sp, #4]

  chEvtObjectInit(esp);
 8000ec6:	9801      	ldr	r0, [sp, #4]
 8000ec8:	f7ff fff2 	bl	8000eb0 <chEvtObjectInit>
}
 8000ecc:	b003      	add	sp, #12
 8000ece:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ed2:	bf00      	nop
	...

08000ee0 <osalEventBroadcastFlagsI.lto_priv.146>:
 * @param[in] flags     flags to be ORed to the flags mask
 *
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {
 8000ee0:	b500      	push	{lr}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	9001      	str	r0, [sp, #4]
 8000ee6:	9100      	str	r1, [sp, #0]

  chEvtBroadcastFlagsI(esp, flags);
 8000ee8:	9900      	ldr	r1, [sp, #0]
 8000eea:	9801      	ldr	r0, [sp, #4]
 8000eec:	f002 fba8 	bl	8003640 <chEvtBroadcastFlagsI>
}
 8000ef0:	b003      	add	sp, #12
 8000ef2:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ef6:	bf00      	nop
	...

08000f00 <_write>:
/*
 * Interface implementation, the following functions just invoke the equivalent
 * queue-level function or macro.
 */

static size_t _write(void *ip, const uint8_t *bp, size_t n) {
 8000f00:	b500      	push	{lr}
 8000f02:	b085      	sub	sp, #20
 8000f04:	9003      	str	r0, [sp, #12]
 8000f06:	9102      	str	r1, [sp, #8]
 8000f08:	9201      	str	r2, [sp, #4]

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8000f0a:	9b03      	ldr	r3, [sp, #12]
 8000f0c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000f10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f14:	9a01      	ldr	r2, [sp, #4]
 8000f16:	9902      	ldr	r1, [sp, #8]
 8000f18:	f7ff ff82 	bl	8000e20 <oqWriteTimeout>
 8000f1c:	4603      	mov	r3, r0
                        n, TIME_INFINITE);
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	b005      	add	sp, #20
 8000f22:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f26:	bf00      	nop
	...

08000f30 <_read>:

static size_t _read(void *ip, uint8_t *bp, size_t n) {
 8000f30:	b500      	push	{lr}
 8000f32:	b085      	sub	sp, #20
 8000f34:	9003      	str	r0, [sp, #12]
 8000f36:	9102      	str	r1, [sp, #8]
 8000f38:	9201      	str	r2, [sp, #4]

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8000f3a:	9b03      	ldr	r3, [sp, #12]
 8000f3c:	f103 000c 	add.w	r0, r3, #12
 8000f40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f44:	9a01      	ldr	r2, [sp, #4]
 8000f46:	9902      	ldr	r1, [sp, #8]
 8000f48:	f7ff fe72 	bl	8000c30 <iqReadTimeout>
 8000f4c:	4603      	mov	r3, r0
                       n, TIME_INFINITE);
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	b005      	add	sp, #20
 8000f52:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f56:	bf00      	nop
	...

08000f60 <_put>:

static msg_t _put(void *ip, uint8_t b) {
 8000f60:	b500      	push	{lr}
 8000f62:	b083      	sub	sp, #12
 8000f64:	9001      	str	r0, [sp, #4]
 8000f66:	460b      	mov	r3, r1
 8000f68:	f88d 3003 	strb.w	r3, [sp, #3]

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8000f6c:	9b01      	ldr	r3, [sp, #4]
 8000f6e:	3330      	adds	r3, #48	; 0x30
 8000f70:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8000f74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff fec9 	bl	8000d10 <oqPutTimeout>
 8000f7e:	4603      	mov	r3, r0
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	b003      	add	sp, #12
 8000f84:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000f90 <_get>:

static msg_t _get(void *ip) {
 8000f90:	b500      	push	{lr}
 8000f92:	b083      	sub	sp, #12
 8000f94:	9001      	str	r0, [sp, #4]

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8000f96:	9b01      	ldr	r3, [sp, #4]
 8000f98:	330c      	adds	r3, #12
 8000f9a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff fe06 	bl	8000bb0 <iqGetTimeout>
 8000fa4:	4603      	mov	r3, r0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	b003      	add	sp, #12
 8000faa:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fae:	bf00      	nop

08000fb0 <_putt>:

static msg_t _putt(void *ip, uint8_t b, sysinterval_t timeout) {
 8000fb0:	b500      	push	{lr}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	9003      	str	r0, [sp, #12]
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	9201      	str	r2, [sp, #4]
 8000fba:	f88d 300b 	strb.w	r3, [sp, #11]

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8000fbe:	9b03      	ldr	r3, [sp, #12]
 8000fc0:	3330      	adds	r3, #48	; 0x30
 8000fc2:	f89d 100b 	ldrb.w	r1, [sp, #11]
 8000fc6:	9a01      	ldr	r2, [sp, #4]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fea1 	bl	8000d10 <oqPutTimeout>
 8000fce:	4603      	mov	r3, r0
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	b005      	add	sp, #20
 8000fd4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000fe0 <_gett>:

static msg_t _gett(void *ip, sysinterval_t timeout) {
 8000fe0:	b500      	push	{lr}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	9001      	str	r0, [sp, #4]
 8000fe6:	9100      	str	r1, [sp, #0]

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8000fe8:	9b01      	ldr	r3, [sp, #4]
 8000fea:	330c      	adds	r3, #12
 8000fec:	9900      	ldr	r1, [sp, #0]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fdde 	bl	8000bb0 <iqGetTimeout>
 8000ff4:	4603      	mov	r3, r0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	b003      	add	sp, #12
 8000ffa:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ffe:	bf00      	nop

08001000 <_writet>:

static size_t _writet(void *ip, const uint8_t *bp, size_t n,
                      sysinterval_t timeout) {
 8001000:	b500      	push	{lr}
 8001002:	b085      	sub	sp, #20
 8001004:	9003      	str	r0, [sp, #12]
 8001006:	9102      	str	r1, [sp, #8]
 8001008:	9201      	str	r2, [sp, #4]
 800100a:	9300      	str	r3, [sp, #0]

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 800100c:	9b03      	ldr	r3, [sp, #12]
 800100e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8001012:	9b00      	ldr	r3, [sp, #0]
 8001014:	9a01      	ldr	r2, [sp, #4]
 8001016:	9902      	ldr	r1, [sp, #8]
 8001018:	f7ff ff02 	bl	8000e20 <oqWriteTimeout>
 800101c:	4603      	mov	r3, r0
}
 800101e:	4618      	mov	r0, r3
 8001020:	b005      	add	sp, #20
 8001022:	f85d fb04 	ldr.w	pc, [sp], #4
 8001026:	bf00      	nop
	...

08001030 <_readt>:

static size_t _readt(void *ip, uint8_t *bp, size_t n,
                     sysinterval_t timeout) {
 8001030:	b500      	push	{lr}
 8001032:	b085      	sub	sp, #20
 8001034:	9003      	str	r0, [sp, #12]
 8001036:	9102      	str	r1, [sp, #8]
 8001038:	9201      	str	r2, [sp, #4]
 800103a:	9300      	str	r3, [sp, #0]

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 800103c:	9b03      	ldr	r3, [sp, #12]
 800103e:	f103 000c 	add.w	r0, r3, #12
 8001042:	9b00      	ldr	r3, [sp, #0]
 8001044:	9a01      	ldr	r2, [sp, #4]
 8001046:	9902      	ldr	r1, [sp, #8]
 8001048:	f7ff fdf2 	bl	8000c30 <iqReadTimeout>
 800104c:	4603      	mov	r3, r0
}
 800104e:	4618      	mov	r0, r3
 8001050:	b005      	add	sp, #20
 8001052:	f85d fb04 	ldr.w	pc, [sp], #4
 8001056:	bf00      	nop
	...

08001060 <_ctl>:

static msg_t _ctl(void *ip, unsigned int operation, void *arg) {
 8001060:	b500      	push	{lr}
 8001062:	b087      	sub	sp, #28
 8001064:	9003      	str	r0, [sp, #12]
 8001066:	9102      	str	r1, [sp, #8]
 8001068:	9201      	str	r2, [sp, #4]
  SerialDriver *sdp = (SerialDriver *)ip;
 800106a:	9b03      	ldr	r3, [sp, #12]
 800106c:	9305      	str	r3, [sp, #20]

  osalDbgCheck(sdp != NULL);
 800106e:	9b05      	ldr	r3, [sp, #20]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d102      	bne.n	800107a <_ctl+0x1a>
 8001074:	480a      	ldr	r0, [pc, #40]	; (80010a0 <_ctl+0x40>)
 8001076:	f001 fa7b 	bl	8002570 <chSysHalt>

  switch (operation) {
 800107a:	9b02      	ldr	r3, [sp, #8]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d008      	beq.n	8001092 <_ctl+0x32>
 8001080:	2b01      	cmp	r3, #1
 8001082:	d107      	bne.n	8001094 <_ctl+0x34>
  case CHN_CTL_NOP:
    osalDbgCheck(arg == NULL);
 8001084:	9b01      	ldr	r3, [sp, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d004      	beq.n	8001094 <_ctl+0x34>
 800108a:	4805      	ldr	r0, [pc, #20]	; (80010a0 <_ctl+0x40>)
 800108c:	f001 fa70 	bl	8002570 <chSysHalt>
 8001090:	e000      	b.n	8001094 <_ctl+0x34>
    break;
  case CHN_CTL_INVALID:
 8001092:	bf00      	nop
    return sd_lld_control(sdp, operation, arg);
#else
    break;
#endif
  }
  return MSG_OK;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	b007      	add	sp, #28
 800109a:	f85d fb04 	ldr.w	pc, [sp], #4
 800109e:	bf00      	nop
 80010a0:	08004ac4 	.word	0x08004ac4
	...

080010b0 <sdInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void sdInit(void) {
 80010b0:	b508      	push	{r3, lr}

  sd_lld_init();
 80010b2:	f001 f8dd 	bl	8002270 <sd_lld_init>
}
 80010b6:	bd08      	pop	{r3, pc}
	...

080010c0 <sdObjectInit>:
 * @init
 */
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 80010c0:	b500      	push	{lr}
 80010c2:	b087      	sub	sp, #28
 80010c4:	9005      	str	r0, [sp, #20]
 80010c6:	9104      	str	r1, [sp, #16]
 80010c8:	9203      	str	r2, [sp, #12]

  sdp->vmt = &vmt;
 80010ca:	9b05      	ldr	r3, [sp, #20]
 80010cc:	4a12      	ldr	r2, [pc, #72]	; (8001118 <sdObjectInit+0x58>)
 80010ce:	601a      	str	r2, [r3, #0]
  osalEventObjectInit(&sdp->event);
 80010d0:	9b05      	ldr	r3, [sp, #20]
 80010d2:	3304      	adds	r3, #4
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fef3 	bl	8000ec0 <osalEventObjectInit>
  sdp->state = SD_STOP;
 80010da:	9b05      	ldr	r3, [sp, #20]
 80010dc:	2201      	movs	r2, #1
 80010de:	721a      	strb	r2, [r3, #8]
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 80010e0:	9b05      	ldr	r3, [sp, #20]
 80010e2:	f103 000c 	add.w	r0, r3, #12
 80010e6:	9b05      	ldr	r3, [sp, #20]
 80010e8:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80010ec:	9b05      	ldr	r3, [sp, #20]
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	9b04      	ldr	r3, [sp, #16]
 80010f2:	2210      	movs	r2, #16
 80010f4:	f7ff fcec 	bl	8000ad0 <iqObjectInit>
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
 80010f8:	9b05      	ldr	r3, [sp, #20]
 80010fa:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80010fe:	9b05      	ldr	r3, [sp, #20]
 8001100:	f103 0164 	add.w	r1, r3, #100	; 0x64
 8001104:	9b05      	ldr	r3, [sp, #20]
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	9b03      	ldr	r3, [sp, #12]
 800110a:	2210      	movs	r2, #16
 800110c:	f7ff fdd8 	bl	8000cc0 <oqObjectInit>
}
 8001110:	b007      	add	sp, #28
 8001112:	f85d fb04 	ldr.w	pc, [sp], #4
 8001116:	bf00      	nop
 8001118:	08004a9c 	.word	0x08004a9c
 800111c:	00000000 	.word	0x00000000

08001120 <sdIncomingDataI>:
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
 8001120:	b500      	push	{lr}
 8001122:	b083      	sub	sp, #12
 8001124:	9001      	str	r0, [sp, #4]
 8001126:	460b      	mov	r3, r1
 8001128:	f88d 3003 	strb.w	r3, [sp, #3]

  osalDbgCheckClassI();
 800112c:	f001 fb00 	bl	8002730 <chDbgCheckClassI>
  osalDbgCheck(sdp != NULL);
 8001130:	9b01      	ldr	r3, [sp, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d102      	bne.n	800113c <sdIncomingDataI+0x1c>
 8001136:	4811      	ldr	r0, [pc, #68]	; (800117c <sdIncomingDataI+0x5c>)
 8001138:	f001 fa1a 	bl	8002570 <chSysHalt>

  if (iqIsEmptyI(&sdp->iqueue))
 800113c:	9b01      	ldr	r3, [sp, #4]
 800113e:	695b      	ldr	r3, [r3, #20]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d105      	bne.n	8001150 <sdIncomingDataI+0x30>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
 8001144:	9b01      	ldr	r3, [sp, #4]
 8001146:	3304      	adds	r3, #4
 8001148:	2104      	movs	r1, #4
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff fec8 	bl	8000ee0 <osalEventBroadcastFlagsI.lto_priv.146>
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
 8001150:	9b01      	ldr	r3, [sp, #4]
 8001152:	330c      	adds	r3, #12
 8001154:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001158:	4611      	mov	r1, r2
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff fce0 	bl	8000b20 <iqPutI>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	da06      	bge.n	8001174 <sdIncomingDataI+0x54>
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
 8001166:	9b01      	ldr	r3, [sp, #4]
 8001168:	3304      	adds	r3, #4
 800116a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff feb6 	bl	8000ee0 <osalEventBroadcastFlagsI.lto_priv.146>
}
 8001174:	b003      	add	sp, #12
 8001176:	f85d fb04 	ldr.w	pc, [sp], #4
 800117a:	bf00      	nop
 800117c:	08004acc 	.word	0x08004acc

08001180 <chSysLock.lto_priv.32>:
static inline void chSysLock(void) {
 8001180:	b500      	push	{lr}
 8001182:	b083      	sub	sp, #12
 8001184:	2320      	movs	r3, #32
 8001186:	9301      	str	r3, [sp, #4]
 8001188:	9b01      	ldr	r3, [sp, #4]
 800118a:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800118e:	f001 fa1f 	bl	80025d0 <_dbg_check_lock>
}
 8001192:	b003      	add	sp, #12
 8001194:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080011a0 <chSysUnlock.lto_priv.10>:
static inline void chSysUnlock(void) {
 80011a0:	b500      	push	{lr}
 80011a2:	b083      	sub	sp, #12
  _dbg_check_unlock();
 80011a4:	f001 fa2c 	bl	8002600 <_dbg_check_unlock>
 80011a8:	2300      	movs	r3, #0
 80011aa:	9301      	str	r3, [sp, #4]
 80011ac:	9b01      	ldr	r3, [sp, #4]
 80011ae:	f383 8811 	msr	BASEPRI, r3
}
 80011b2:	b003      	add	sp, #12
 80011b4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080011c0 <osalSysLock.lto_priv.166>:
static inline void osalSysLock(void) {
 80011c0:	b508      	push	{r3, lr}
  chSysLock();
 80011c2:	f7ff ffdd 	bl	8001180 <chSysLock.lto_priv.32>
}
 80011c6:	bd08      	pop	{r3, pc}
	...

080011d0 <osalSysUnlock.lto_priv.161>:
static inline void osalSysUnlock(void) {
 80011d0:	b508      	push	{r3, lr}
  chSysUnlock();
 80011d2:	f7ff ffe5 	bl	80011a0 <chSysUnlock.lto_priv.10>
}
 80011d6:	bd08      	pop	{r3, pc}
	...

080011e0 <osalThreadSuspendS>:
static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {
 80011e0:	b500      	push	{lr}
 80011e2:	b083      	sub	sp, #12
 80011e4:	9001      	str	r0, [sp, #4]
  return chThdSuspendTimeoutS(trp, TIME_INFINITE);
 80011e6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011ea:	9801      	ldr	r0, [sp, #4]
 80011ec:	f002 f8e0 	bl	80033b0 <chThdSuspendTimeoutS>
 80011f0:	4603      	mov	r3, r0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	b003      	add	sp, #12
 80011f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80011fa:	bf00      	nop
 80011fc:	0000      	movs	r0, r0
	...

08001200 <osalMutexObjectInit>:
 *
 * @param[out] mp       pointer to the @p mutex_t object
 *
 * @init
 */
static inline void osalMutexObjectInit(mutex_t *mp) {
 8001200:	b500      	push	{lr}
 8001202:	b083      	sub	sp, #12
 8001204:	9001      	str	r0, [sp, #4]

#if CH_CFG_USE_MUTEXES
  chMtxObjectInit(mp);
 8001206:	9801      	ldr	r0, [sp, #4]
 8001208:	f002 fa02 	bl	8003610 <chMtxObjectInit>
#elif CH_CFG_USE_SEMAPHORES
  chSemObjectInit((semaphore_t *)mp, 1);
#else
 *mp = 0;
#endif
}
 800120c:	b003      	add	sp, #12
 800120e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001212:	bf00      	nop
	...

08001220 <spiInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void spiInit(void) {
 8001220:	b508      	push	{r3, lr}

  spi_lld_init();
 8001222:	f000 fce5 	bl	8001bf0 <spi_lld_init>
}
 8001226:	bd08      	pop	{r3, pc}
	...

08001230 <spiObjectInit>:
 *
 * @param[out] spip     pointer to the @p SPIDriver object
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {
 8001230:	b500      	push	{lr}
 8001232:	b083      	sub	sp, #12
 8001234:	9001      	str	r0, [sp, #4]

  spip->state = SPI_STOP;
 8001236:	9b01      	ldr	r3, [sp, #4]
 8001238:	2201      	movs	r2, #1
 800123a:	701a      	strb	r2, [r3, #0]
  spip->config = NULL;
 800123c:	9b01      	ldr	r3, [sp, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	605a      	str	r2, [r3, #4]
#if SPI_USE_WAIT == TRUE
  spip->thread = NULL;
 8001242:	9b01      	ldr	r3, [sp, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
#endif
#if SPI_USE_MUTUAL_EXCLUSION == TRUE
  osalMutexObjectInit(&spip->mutex);
 8001248:	9b01      	ldr	r3, [sp, #4]
 800124a:	330c      	adds	r3, #12
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ffd7 	bl	8001200 <osalMutexObjectInit>
#endif
#if defined(SPI_DRIVER_EXT_INIT_HOOK)
  SPI_DRIVER_EXT_INIT_HOOK(spip);
#endif
}
 8001252:	b003      	add	sp, #12
 8001254:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001260 <spiStart>:
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] config    pointer to the @p SPIConfig object
 *
 * @api
 */
void spiStart(SPIDriver *spip, const SPIConfig *config) {
 8001260:	b500      	push	{lr}
 8001262:	b083      	sub	sp, #12
 8001264:	9001      	str	r0, [sp, #4]
 8001266:	9100      	str	r1, [sp, #0]

  osalDbgCheck((spip != NULL) && (config != NULL));
 8001268:	9b01      	ldr	r3, [sp, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d002      	beq.n	8001274 <spiStart+0x14>
 800126e:	9b00      	ldr	r3, [sp, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d102      	bne.n	800127a <spiStart+0x1a>
 8001274:	4809      	ldr	r0, [pc, #36]	; (800129c <spiStart+0x3c>)
 8001276:	f001 f97b 	bl	8002570 <chSysHalt>

  osalSysLock();
 800127a:	f7ff ffa1 	bl	80011c0 <osalSysLock.lto_priv.166>
  osalDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
                "invalid state");
  spip->config = config;
 800127e:	9b01      	ldr	r3, [sp, #4]
 8001280:	9a00      	ldr	r2, [sp, #0]
 8001282:	605a      	str	r2, [r3, #4]
  spi_lld_start(spip);
 8001284:	9801      	ldr	r0, [sp, #4]
 8001286:	f000 fcd3 	bl	8001c30 <spi_lld_start>
  spip->state = SPI_READY;
 800128a:	9b01      	ldr	r3, [sp, #4]
 800128c:	2202      	movs	r2, #2
 800128e:	701a      	strb	r2, [r3, #0]
  osalSysUnlock();
 8001290:	f7ff ff9e 	bl	80011d0 <osalSysUnlock.lto_priv.161>
}
 8001294:	b003      	add	sp, #12
 8001296:	f85d fb04 	ldr.w	pc, [sp], #4
 800129a:	bf00      	nop
 800129c:	08004adc 	.word	0x08004adc

080012a0 <spiSelect>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @api
 */
void spiSelect(SPIDriver *spip) {
 80012a0:	b500      	push	{lr}
 80012a2:	b083      	sub	sp, #12
 80012a4:	9001      	str	r0, [sp, #4]

  osalDbgCheck(spip != NULL);
 80012a6:	9b01      	ldr	r3, [sp, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d102      	bne.n	80012b2 <spiSelect+0x12>
 80012ac:	4809      	ldr	r0, [pc, #36]	; (80012d4 <spiSelect+0x34>)
 80012ae:	f001 f95f 	bl	8002570 <chSysHalt>

  osalSysLock();
 80012b2:	f7ff ff85 	bl	80011c0 <osalSysLock.lto_priv.166>
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  spiSelectI(spip);
 80012b6:	9b01      	ldr	r3, [sp, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	68da      	ldr	r2, [r3, #12]
 80012bc:	9b01      	ldr	r3, [sp, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	2101      	movs	r1, #1
 80012c4:	fa01 f202 	lsl.w	r2, r1, r2
 80012c8:	615a      	str	r2, [r3, #20]
  osalSysUnlock();
 80012ca:	f7ff ff81 	bl	80011d0 <osalSysUnlock.lto_priv.161>
}
 80012ce:	b003      	add	sp, #12
 80012d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80012d4:	08004ae8 	.word	0x08004ae8
	...

080012e0 <spiUnselect>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @api
 */
void spiUnselect(SPIDriver *spip) {
 80012e0:	b500      	push	{lr}
 80012e2:	b083      	sub	sp, #12
 80012e4:	9001      	str	r0, [sp, #4]

  osalDbgCheck(spip != NULL);
 80012e6:	9b01      	ldr	r3, [sp, #4]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d102      	bne.n	80012f2 <spiUnselect+0x12>
 80012ec:	4809      	ldr	r0, [pc, #36]	; (8001314 <spiUnselect+0x34>)
 80012ee:	f001 f93f 	bl	8002570 <chSysHalt>

  osalSysLock();
 80012f2:	f7ff ff65 	bl	80011c0 <osalSysLock.lto_priv.166>
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  spiUnselectI(spip);
 80012f6:	9b01      	ldr	r3, [sp, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	68da      	ldr	r2, [r3, #12]
 80012fc:	9b01      	ldr	r3, [sp, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	2101      	movs	r1, #1
 8001304:	fa01 f202 	lsl.w	r2, r1, r2
 8001308:	611a      	str	r2, [r3, #16]
  osalSysUnlock();
 800130a:	f7ff ff61 	bl	80011d0 <osalSysUnlock.lto_priv.161>
}
 800130e:	b003      	add	sp, #12
 8001310:	f85d fb04 	ldr.w	pc, [sp], #4
 8001314:	08004af4 	.word	0x08004af4
	...

08001320 <spiSend>:
 * @param[in] n         number of words to send
 * @param[in] txbuf     the pointer to the transmit buffer
 *
 * @api
 */
void spiSend(SPIDriver *spip, size_t n, const void *txbuf) {
 8001320:	b500      	push	{lr}
 8001322:	b085      	sub	sp, #20
 8001324:	9003      	str	r0, [sp, #12]
 8001326:	9102      	str	r1, [sp, #8]
 8001328:	9201      	str	r2, [sp, #4]

  osalDbgCheck((spip != NULL) && (n > 0U) && (txbuf != NULL));
 800132a:	9b03      	ldr	r3, [sp, #12]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d005      	beq.n	800133c <spiSend+0x1c>
 8001330:	9b02      	ldr	r3, [sp, #8]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d002      	beq.n	800133c <spiSend+0x1c>
 8001336:	9b01      	ldr	r3, [sp, #4]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d102      	bne.n	8001342 <spiSend+0x22>
 800133c:	4811      	ldr	r0, [pc, #68]	; (8001384 <spiSend+0x64>)
 800133e:	f001 f917 	bl	8002570 <chSysHalt>
#if SPI_SUPPORTS_CIRCULAR
  osalDbgCheck((spip->config->circular == false) || ((n & 1U) == 0U));
 8001342:	9b03      	ldr	r3, [sp, #12]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d007      	beq.n	800135c <spiSend+0x3c>
 800134c:	9b02      	ldr	r3, [sp, #8]
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	2b00      	cmp	r3, #0
 8001354:	d002      	beq.n	800135c <spiSend+0x3c>
 8001356:	480b      	ldr	r0, [pc, #44]	; (8001384 <spiSend+0x64>)
 8001358:	f001 f90a 	bl	8002570 <chSysHalt>
#endif

  osalSysLock();
 800135c:	f7ff ff30 	bl	80011c0 <osalSysLock.lto_priv.166>
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  spiStartSendI(spip, n, txbuf);
 8001360:	9b03      	ldr	r3, [sp, #12]
 8001362:	2203      	movs	r2, #3
 8001364:	701a      	strb	r2, [r3, #0]
 8001366:	9a01      	ldr	r2, [sp, #4]
 8001368:	9902      	ldr	r1, [sp, #8]
 800136a:	9803      	ldr	r0, [sp, #12]
 800136c:	f000 fd08 	bl	8001d80 <spi_lld_send>
  (void) osalThreadSuspendS(&spip->thread);
 8001370:	9b03      	ldr	r3, [sp, #12]
 8001372:	3308      	adds	r3, #8
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ff33 	bl	80011e0 <osalThreadSuspendS>
  osalSysUnlock();
 800137a:	f7ff ff29 	bl	80011d0 <osalSysUnlock.lto_priv.161>
}
 800137e:	b005      	add	sp, #20
 8001380:	f85d fb04 	ldr.w	pc, [sp], #4
 8001384:	08004b00 	.word	0x08004b00
	...

08001390 <spiReceive>:
 * @param[in] n         number of words to receive
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @api
 */
void spiReceive(SPIDriver *spip, size_t n, void *rxbuf) {
 8001390:	b500      	push	{lr}
 8001392:	b085      	sub	sp, #20
 8001394:	9003      	str	r0, [sp, #12]
 8001396:	9102      	str	r1, [sp, #8]
 8001398:	9201      	str	r2, [sp, #4]

  osalDbgCheck((spip != NULL) && (n > 0U) && (rxbuf != NULL));
 800139a:	9b03      	ldr	r3, [sp, #12]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d005      	beq.n	80013ac <spiReceive+0x1c>
 80013a0:	9b02      	ldr	r3, [sp, #8]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d002      	beq.n	80013ac <spiReceive+0x1c>
 80013a6:	9b01      	ldr	r3, [sp, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d102      	bne.n	80013b2 <spiReceive+0x22>
 80013ac:	4811      	ldr	r0, [pc, #68]	; (80013f4 <spiReceive+0x64>)
 80013ae:	f001 f8df 	bl	8002570 <chSysHalt>
#if SPI_SUPPORTS_CIRCULAR
  osalDbgCheck((spip->config->circular == false) || ((n & 1U) == 0U));
 80013b2:	9b03      	ldr	r3, [sp, #12]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d007      	beq.n	80013cc <spiReceive+0x3c>
 80013bc:	9b02      	ldr	r3, [sp, #8]
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d002      	beq.n	80013cc <spiReceive+0x3c>
 80013c6:	480b      	ldr	r0, [pc, #44]	; (80013f4 <spiReceive+0x64>)
 80013c8:	f001 f8d2 	bl	8002570 <chSysHalt>
#endif

  osalSysLock();
 80013cc:	f7ff fef8 	bl	80011c0 <osalSysLock.lto_priv.166>
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  spiStartReceiveI(spip, n, rxbuf);
 80013d0:	9b03      	ldr	r3, [sp, #12]
 80013d2:	2203      	movs	r2, #3
 80013d4:	701a      	strb	r2, [r3, #0]
 80013d6:	9a01      	ldr	r2, [sp, #4]
 80013d8:	9902      	ldr	r1, [sp, #8]
 80013da:	9803      	ldr	r0, [sp, #12]
 80013dc:	f000 fd10 	bl	8001e00 <spi_lld_receive>
  (void) osalThreadSuspendS(&spip->thread);
 80013e0:	9b03      	ldr	r3, [sp, #12]
 80013e2:	3308      	adds	r3, #8
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff fefb 	bl	80011e0 <osalThreadSuspendS>
  osalSysUnlock();
 80013ea:	f7ff fef1 	bl	80011d0 <osalSysUnlock.lto_priv.161>
}
 80013ee:	b005      	add	sp, #20
 80013f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80013f4:	08004b08 	.word	0x08004b08
	...

08001400 <nvicEnableVector>:
 * @brief   Sets the priority of an interrupt handler and enables it.
 *
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {
 8001400:	b082      	sub	sp, #8
 8001402:	9001      	str	r0, [sp, #4]
 8001404:	9100      	str	r1, [sp, #0]

#if defined(__CORE_CM0_H_GENERIC) || defined(__CORE_CM0PLUS_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001406:	9b00      	ldr	r3, [sp, #0]
 8001408:	b2db      	uxtb	r3, r3
 800140a:	4a11      	ldr	r2, [pc, #68]	; (8001450 <nvicEnableVector+0x50>)
 800140c:	011b      	lsls	r3, r3, #4
 800140e:	b2d9      	uxtb	r1, r3
 8001410:	9b01      	ldr	r3, [sp, #4]
 8001412:	4413      	add	r3, r2
 8001414:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001418:	460a      	mov	r2, r1
 800141a:	701a      	strb	r2, [r3, #0]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800141c:	9b01      	ldr	r3, [sp, #4]
 800141e:	f003 021f 	and.w	r2, r3, #31
 8001422:	490b      	ldr	r1, [pc, #44]	; (8001450 <nvicEnableVector+0x50>)
 8001424:	9b01      	ldr	r3, [sp, #4]
 8001426:	095b      	lsrs	r3, r3, #5
 8001428:	2001      	movs	r0, #1
 800142a:	fa00 f202 	lsl.w	r2, r0, r2
 800142e:	3360      	adds	r3, #96	; 0x60
 8001430:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001434:	9b01      	ldr	r3, [sp, #4]
 8001436:	f003 021f 	and.w	r2, r3, #31
 800143a:	4905      	ldr	r1, [pc, #20]	; (8001450 <nvicEnableVector+0x50>)
 800143c:	9b01      	ldr	r3, [sp, #4]
 800143e:	095b      	lsrs	r3, r3, #5
 8001440:	2001      	movs	r0, #1
 8001442:	fa00 f202 	lsl.w	r2, r0, r2
 8001446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800144a:	b002      	add	sp, #8
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	e000e100 	.word	0xe000e100
	...

08001460 <irqInit>:
/**
 * @brief   Enables IRQ sources.
 *
 * @notapi
 */
void irqInit(void) {
 8001460:	b508      	push	{r3, lr}

#if HAL_USE_PAL
  nvicEnableVector(EXTI0_IRQn, STM32_IRQ_EXTI0_PRIORITY);
 8001462:	2106      	movs	r1, #6
 8001464:	2006      	movs	r0, #6
 8001466:	f7ff ffcb 	bl	8001400 <nvicEnableVector>
  nvicEnableVector(EXTI1_IRQn, STM32_IRQ_EXTI1_PRIORITY);
 800146a:	2106      	movs	r1, #6
 800146c:	2007      	movs	r0, #7
 800146e:	f7ff ffc7 	bl	8001400 <nvicEnableVector>
  nvicEnableVector(EXTI2_IRQn, STM32_IRQ_EXTI2_PRIORITY);
 8001472:	2106      	movs	r1, #6
 8001474:	2008      	movs	r0, #8
 8001476:	f7ff ffc3 	bl	8001400 <nvicEnableVector>
  nvicEnableVector(EXTI3_IRQn, STM32_IRQ_EXTI3_PRIORITY);
 800147a:	2106      	movs	r1, #6
 800147c:	2009      	movs	r0, #9
 800147e:	f7ff ffbf 	bl	8001400 <nvicEnableVector>
  nvicEnableVector(EXTI4_IRQn, STM32_IRQ_EXTI4_PRIORITY);
 8001482:	2106      	movs	r1, #6
 8001484:	200a      	movs	r0, #10
 8001486:	f7ff ffbb 	bl	8001400 <nvicEnableVector>
  nvicEnableVector(EXTI9_5_IRQn, STM32_IRQ_EXTI5_9_PRIORITY);
 800148a:	2106      	movs	r1, #6
 800148c:	2017      	movs	r0, #23
 800148e:	f7ff ffb7 	bl	8001400 <nvicEnableVector>
  nvicEnableVector(EXTI15_10_IRQn, STM32_IRQ_EXTI10_15_PRIORITY);
 8001492:	2106      	movs	r1, #6
 8001494:	2028      	movs	r0, #40	; 0x28
 8001496:	f7ff ffb3 	bl	8001400 <nvicEnableVector>
#endif
}
 800149a:	bd08      	pop	{r3, pc}
 800149c:	0000      	movs	r0, r0
	...

080014a0 <hal_lld_backup_domain_init>:
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 80014a0:	4b03      	ldr	r3, [pc, #12]	; (80014b0 <hal_lld_backup_domain_init+0x10>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a02      	ldr	r2, [pc, #8]	; (80014b0 <hal_lld_backup_domain_init+0x10>)
 80014a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014aa:	6013      	str	r3, [r2, #0]
    /* RTC clock enabled.*/
    RCC->BDCR |= RCC_BDCR_RTCEN;
  }
#endif /* STM32_RTCSEL != STM32_RTCSEL_NOCLOCK */
#endif /* HAL_USE_RTC */
}
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	40007000 	.word	0x40007000
	...

080014c0 <hal_lld_init>:
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
 80014c0:	b508      	push	{r3, lr}

  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
 80014c2:	4b18      	ldr	r3, [pc, #96]	; (8001524 <hal_lld_init+0x64>)
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	4b17      	ldr	r3, [pc, #92]	; (8001524 <hal_lld_init+0x64>)
 80014c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014cc:	611a      	str	r2, [r3, #16]
 80014ce:	4b15      	ldr	r3, [pc, #84]	; (8001524 <hal_lld_init+0x64>)
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	4b14      	ldr	r3, [pc, #80]	; (8001524 <hal_lld_init+0x64>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	611a      	str	r2, [r3, #16]
 80014d8:	4b12      	ldr	r3, [pc, #72]	; (8001524 <hal_lld_init+0x64>)
 80014da:	691b      	ldr	r3, [r3, #16]
  rccResetAPB2(0xFFFFFFFF);
 80014dc:	4b11      	ldr	r3, [pc, #68]	; (8001524 <hal_lld_init+0x64>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	4b10      	ldr	r3, [pc, #64]	; (8001524 <hal_lld_init+0x64>)
 80014e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014e6:	60da      	str	r2, [r3, #12]
 80014e8:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <hal_lld_init+0x64>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	4b0d      	ldr	r3, [pc, #52]	; (8001524 <hal_lld_init+0x64>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <hal_lld_init+0x64>)
 80014f4:	68db      	ldr	r3, [r3, #12]

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(true);
 80014f6:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <hal_lld_init+0x64>)
 80014f8:	69db      	ldr	r3, [r3, #28]
 80014fa:	4a0a      	ldr	r2, [pc, #40]	; (8001524 <hal_lld_init+0x64>)
 80014fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001500:	61d3      	str	r3, [r2, #28]
 8001502:	4b08      	ldr	r3, [pc, #32]	; (8001524 <hal_lld_init+0x64>)
 8001504:	69db      	ldr	r3, [r3, #28]
  rccEnableBKPInterface(true);
 8001506:	4b07      	ldr	r3, [pc, #28]	; (8001524 <hal_lld_init+0x64>)
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	4a06      	ldr	r2, [pc, #24]	; (8001524 <hal_lld_init+0x64>)
 800150c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001510:	61d3      	str	r3, [r2, #28]
 8001512:	4b04      	ldr	r3, [pc, #16]	; (8001524 <hal_lld_init+0x64>)
 8001514:	69db      	ldr	r3, [r3, #28]

  /* Initializes the backup domain.*/
  hal_lld_backup_domain_init();
 8001516:	f7ff ffc3 	bl	80014a0 <hal_lld_backup_domain_init>

  /* DMA subsystems initialization.*/
#if defined(STM32_DMA_REQUIRED)
  dmaInit();
 800151a:	f000 f8c1 	bl	80016a0 <dmaInit>
#endif

  /* IRQ subsystem initialization.*/
  irqInit();
 800151e:	f7ff ff9f 	bl	8001460 <irqInit>

  /* Programmable voltage detector enable.*/
#if STM32_PVD_ENABLE
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */
}
 8001522:	bd08      	pop	{r3, pc}
 8001524:	40021000 	.word	0x40021000
	...

08001530 <stm32_clock_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8001530:	4b1f      	ldr	r3, [pc, #124]	; (80015b0 <stm32_clock_init+0x80>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a1e      	ldr	r2, [pc, #120]	; (80015b0 <stm32_clock_init+0x80>)
 8001536:	f043 0301 	orr.w	r3, r3, #1
 800153a:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 800153c:	4b1c      	ldr	r3, [pc, #112]	; (80015b0 <stm32_clock_init+0x80>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d0f9      	beq.n	800153c <stm32_clock_init+0xc>
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8001548:	4b19      	ldr	r3, [pc, #100]	; (80015b0 <stm32_clock_init+0x80>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a18      	ldr	r2, [pc, #96]	; (80015b0 <stm32_clock_init+0x80>)
 800154e:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
 8001552:	6013      	str	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8001554:	4b16      	ldr	r3, [pc, #88]	; (80015b0 <stm32_clock_init+0x80>)
 8001556:	2200      	movs	r2, #0
 8001558:	605a      	str	r2, [r3, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <stm32_clock_init+0x80>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f003 030c 	and.w	r3, r3, #12
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f9      	bne.n	800155a <stm32_clock_init+0x2a>
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 8001566:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <stm32_clock_init+0x80>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	4a11      	ldr	r2, [pc, #68]	; (80015b0 <stm32_clock_init+0x80>)
 800156c:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
 8001570:	6053      	str	r3, [r2, #4]
  RCC->CR   |= RCC_CR_PLLON;
 8001572:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <stm32_clock_init+0x80>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a0e      	ldr	r2, [pc, #56]	; (80015b0 <stm32_clock_init+0x80>)
 8001578:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800157c:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800157e:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <stm32_clock_init+0x80>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d0f9      	beq.n	800157e <stm32_clock_init+0x4e>
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Clock settings.*/
#if STM32_HAS_USB
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 800158a:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <stm32_clock_init+0x80>)
 800158c:	4a09      	ldr	r2, [pc, #36]	; (80015b4 <stm32_clock_init+0x84>)
 800158e:	605a      	str	r2, [r3, #4]
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8001590:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <stm32_clock_init+0x88>)
 8001592:	2211      	movs	r2, #17
 8001594:	601a      	str	r2, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 8001596:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <stm32_clock_init+0x80>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	4a05      	ldr	r2, [pc, #20]	; (80015b0 <stm32_clock_init+0x80>)
 800159c:	f043 0302 	orr.w	r3, r3, #2
 80015a0:	6053      	str	r3, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 80015a2:	4b03      	ldr	r3, [pc, #12]	; (80015b0 <stm32_clock_init+0x80>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f003 030c 	and.w	r3, r3, #12
 80015aa:	2b08      	cmp	r3, #8
 80015ac:	d1f9      	bne.n	80015a2 <stm32_clock_init+0x72>

#if !STM32_HSI_ENABLED
  RCC->CR &= ~RCC_CR_HSION;
#endif
#endif /* !STM32_NO_INIT */
}
 80015ae:	4770      	bx	lr
 80015b0:	40021000 	.word	0x40021000
 80015b4:	00686400 	.word	0x00686400
 80015b8:	40022000 	.word	0x40022000
 80015bc:	00000000 	.word	0x00000000

080015c0 <Vector6C>:
/**
 * @brief   DMA1 stream 1 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 80015c0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 80015c2:	f001 f865 	bl	8002690 <_dbg_check_enter_isr>

  dmaServeInterrupt(STM32_DMA1_STREAM1);
 80015c6:	4804      	ldr	r0, [pc, #16]	; (80015d8 <Vector6C+0x18>)
 80015c8:	f000 f922 	bl	8001810 <dmaServeInterrupt>

  OSAL_IRQ_EPILOGUE();
 80015cc:	f001 f888 	bl	80026e0 <_dbg_check_leave_isr>
 80015d0:	f002 fa5e 	bl	8003a90 <_port_irq_epilogue>
}
 80015d4:	bd08      	pop	{r3, pc}
 80015d6:	bf00      	nop
 80015d8:	08004b14 	.word	0x08004b14
 80015dc:	00000000 	.word	0x00000000

080015e0 <Vector70>:
/**
 * @brief   DMA1 stream 2 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 80015e0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 80015e2:	f001 f855 	bl	8002690 <_dbg_check_enter_isr>

  dmaServeInterrupt(STM32_DMA1_STREAM2);
 80015e6:	4804      	ldr	r0, [pc, #16]	; (80015f8 <Vector70+0x18>)
 80015e8:	f000 f912 	bl	8001810 <dmaServeInterrupt>

  OSAL_IRQ_EPILOGUE();
 80015ec:	f001 f878 	bl	80026e0 <_dbg_check_leave_isr>
 80015f0:	f002 fa4e 	bl	8003a90 <_port_irq_epilogue>
}
 80015f4:	bd08      	pop	{r3, pc}
 80015f6:	bf00      	nop
 80015f8:	08004b24 	.word	0x08004b24
 80015fc:	00000000 	.word	0x00000000

08001600 <Vector74>:
/**
 * @brief   DMA1 stream 3 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 8001600:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 8001602:	f001 f845 	bl	8002690 <_dbg_check_enter_isr>

  dmaServeInterrupt(STM32_DMA1_STREAM3);
 8001606:	4804      	ldr	r0, [pc, #16]	; (8001618 <Vector74+0x18>)
 8001608:	f000 f902 	bl	8001810 <dmaServeInterrupt>

  OSAL_IRQ_EPILOGUE();
 800160c:	f001 f868 	bl	80026e0 <_dbg_check_leave_isr>
 8001610:	f002 fa3e 	bl	8003a90 <_port_irq_epilogue>
}
 8001614:	bd08      	pop	{r3, pc}
 8001616:	bf00      	nop
 8001618:	08004b34 	.word	0x08004b34
 800161c:	00000000 	.word	0x00000000

08001620 <Vector78>:
/**
 * @brief   DMA1 stream 4 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8001620:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 8001622:	f001 f835 	bl	8002690 <_dbg_check_enter_isr>

  dmaServeInterrupt(STM32_DMA1_STREAM4);
 8001626:	4804      	ldr	r0, [pc, #16]	; (8001638 <Vector78+0x18>)
 8001628:	f000 f8f2 	bl	8001810 <dmaServeInterrupt>

  OSAL_IRQ_EPILOGUE();
 800162c:	f001 f858 	bl	80026e0 <_dbg_check_leave_isr>
 8001630:	f002 fa2e 	bl	8003a90 <_port_irq_epilogue>
}
 8001634:	bd08      	pop	{r3, pc}
 8001636:	bf00      	nop
 8001638:	08004b44 	.word	0x08004b44
 800163c:	00000000 	.word	0x00000000

08001640 <Vector7C>:
/**
 * @brief   DMA1 stream 5 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8001640:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 8001642:	f001 f825 	bl	8002690 <_dbg_check_enter_isr>

  dmaServeInterrupt(STM32_DMA1_STREAM5);
 8001646:	4804      	ldr	r0, [pc, #16]	; (8001658 <Vector7C+0x18>)
 8001648:	f000 f8e2 	bl	8001810 <dmaServeInterrupt>

  OSAL_IRQ_EPILOGUE();
 800164c:	f001 f848 	bl	80026e0 <_dbg_check_leave_isr>
 8001650:	f002 fa1e 	bl	8003a90 <_port_irq_epilogue>
}
 8001654:	bd08      	pop	{r3, pc}
 8001656:	bf00      	nop
 8001658:	08004b54 	.word	0x08004b54
 800165c:	00000000 	.word	0x00000000

08001660 <Vector80>:
/**
 * @brief   DMA1 stream 6 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8001660:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 8001662:	f001 f815 	bl	8002690 <_dbg_check_enter_isr>

  dmaServeInterrupt(STM32_DMA1_STREAM6);
 8001666:	4804      	ldr	r0, [pc, #16]	; (8001678 <Vector80+0x18>)
 8001668:	f000 f8d2 	bl	8001810 <dmaServeInterrupt>

  OSAL_IRQ_EPILOGUE();
 800166c:	f001 f838 	bl	80026e0 <_dbg_check_leave_isr>
 8001670:	f002 fa0e 	bl	8003a90 <_port_irq_epilogue>
}
 8001674:	bd08      	pop	{r3, pc}
 8001676:	bf00      	nop
 8001678:	08004b64 	.word	0x08004b64
 800167c:	00000000 	.word	0x00000000

08001680 <Vector84>:
/**
 * @brief   DMA1 stream 7 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 8001680:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 8001682:	f001 f805 	bl	8002690 <_dbg_check_enter_isr>

  dmaServeInterrupt(STM32_DMA1_STREAM7);
 8001686:	4804      	ldr	r0, [pc, #16]	; (8001698 <Vector84+0x18>)
 8001688:	f000 f8c2 	bl	8001810 <dmaServeInterrupt>

  OSAL_IRQ_EPILOGUE();
 800168c:	f001 f828 	bl	80026e0 <_dbg_check_leave_isr>
 8001690:	f002 f9fe 	bl	8003a90 <_port_irq_epilogue>
}
 8001694:	bd08      	pop	{r3, pc}
 8001696:	bf00      	nop
 8001698:	08004b74 	.word	0x08004b74
 800169c:	00000000 	.word	0x00000000

080016a0 <dmaInit>:
/**
 * @brief   STM32 DMA helper initialization.
 *
 * @init
 */
void dmaInit(void) {
 80016a0:	b082      	sub	sp, #8
  int i;

  dma.allocated_mask = 0U;
 80016a2:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <dmaInit+0x48>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
  dma.isr_mask       = 0U;
 80016a8:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <dmaInit+0x48>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	605a      	str	r2, [r3, #4]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 80016ae:	2300      	movs	r3, #0
 80016b0:	9301      	str	r3, [sp, #4]
 80016b2:	e010      	b.n	80016d6 <dmaInit+0x36>
    _stm32_dma_streams[i].channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 80016b4:	4a0d      	ldr	r2, [pc, #52]	; (80016ec <dmaInit+0x4c>)
 80016b6:	9b01      	ldr	r3, [sp, #4]
 80016b8:	011b      	lsls	r3, r3, #4
 80016ba:	4413      	add	r3, r2
 80016bc:	3304      	adds	r3, #4
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
    dma.streams[i].func = NULL;
 80016c4:	4a08      	ldr	r2, [pc, #32]	; (80016e8 <dmaInit+0x48>)
 80016c6:	9b01      	ldr	r3, [sp, #4]
 80016c8:	3301      	adds	r3, #1
 80016ca:	2100      	movs	r1, #0
 80016cc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 80016d0:	9b01      	ldr	r3, [sp, #4]
 80016d2:	3301      	adds	r3, #1
 80016d4:	9301      	str	r3, [sp, #4]
 80016d6:	9b01      	ldr	r3, [sp, #4]
 80016d8:	2b06      	cmp	r3, #6
 80016da:	ddeb      	ble.n	80016b4 <dmaInit+0x14>
  }
  DMA1->IFCR = 0xFFFFFFFFU;
 80016dc:	4b04      	ldr	r3, [pc, #16]	; (80016f0 <dmaInit+0x50>)
 80016de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016e2:	605a      	str	r2, [r3, #4]
#if STM32_DMA2_NUM_CHANNELS > 0
  DMA2->IFCR = 0xFFFFFFFFU;
#endif
}
 80016e4:	b002      	add	sp, #8
 80016e6:	4770      	bx	lr
 80016e8:	20000800 	.word	0x20000800
 80016ec:	08004b14 	.word	0x08004b14
 80016f0:	40020000 	.word	0x40020000
	...

08001700 <dmaStreamAllocI>:
 * @iclass
 */
const stm32_dma_stream_t *dmaStreamAllocI(uint32_t id,
                                          uint32_t priority,
                                          stm32_dmaisr_t func,
                                          void *param) {
 8001700:	b500      	push	{lr}
 8001702:	b08b      	sub	sp, #44	; 0x2c
 8001704:	9003      	str	r0, [sp, #12]
 8001706:	9102      	str	r1, [sp, #8]
 8001708:	9201      	str	r2, [sp, #4]
 800170a:	9300      	str	r3, [sp, #0]
  uint32_t i, startid, endid;

  osalDbgCheckClassI();
 800170c:	f001 f810 	bl	8002730 <chDbgCheckClassI>

  if (id < STM32_DMA_STREAMS) {
 8001710:	9b03      	ldr	r3, [sp, #12]
 8001712:	2b06      	cmp	r3, #6
 8001714:	d806      	bhi.n	8001724 <dmaStreamAllocI+0x24>
    startid = id;
 8001716:	9b03      	ldr	r3, [sp, #12]
 8001718:	9308      	str	r3, [sp, #32]
    endid   = id;
 800171a:	9b03      	ldr	r3, [sp, #12]
 800171c:	9307      	str	r3, [sp, #28]
  else {
    osalDbgCheck(false);
    return NULL;
  }

  for (i = startid; i <= endid; i++) {
 800171e:	9b08      	ldr	r3, [sp, #32]
 8001720:	9309      	str	r3, [sp, #36]	; 0x24
 8001722:	e064      	b.n	80017ee <dmaStreamAllocI+0xee>
    osalDbgCheck(false);
 8001724:	4836      	ldr	r0, [pc, #216]	; (8001800 <dmaStreamAllocI+0x100>)
 8001726:	f000 ff23 	bl	8002570 <chSysHalt>
    return NULL;
 800172a:	2300      	movs	r3, #0
 800172c:	e064      	b.n	80017f8 <dmaStreamAllocI+0xf8>
    uint32_t mask = (1U << i);
 800172e:	2201      	movs	r2, #1
 8001730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	9306      	str	r3, [sp, #24]
    if ((dma.allocated_mask & mask) == 0U) {
 8001738:	4b32      	ldr	r3, [pc, #200]	; (8001804 <dmaStreamAllocI+0x104>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	9b06      	ldr	r3, [sp, #24]
 800173e:	4013      	ands	r3, r2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d151      	bne.n	80017e8 <dmaStreamAllocI+0xe8>
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 8001744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001746:	011b      	lsls	r3, r3, #4
 8001748:	4a2f      	ldr	r2, [pc, #188]	; (8001808 <dmaStreamAllocI+0x108>)
 800174a:	4413      	add	r3, r2
 800174c:	9305      	str	r3, [sp, #20]

      /* Installs the DMA handler.*/
      dma.streams[i].func  = func;
 800174e:	492d      	ldr	r1, [pc, #180]	; (8001804 <dmaStreamAllocI+0x104>)
 8001750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001752:	3301      	adds	r3, #1
 8001754:	9a01      	ldr	r2, [sp, #4]
 8001756:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
      dma.streams[i].param = param;
 800175a:	4a2a      	ldr	r2, [pc, #168]	; (8001804 <dmaStreamAllocI+0x104>)
 800175c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800175e:	3301      	adds	r3, #1
 8001760:	00db      	lsls	r3, r3, #3
 8001762:	4413      	add	r3, r2
 8001764:	9a00      	ldr	r2, [sp, #0]
 8001766:	605a      	str	r2, [r3, #4]
      dma.allocated_mask  |= mask;
 8001768:	4b26      	ldr	r3, [pc, #152]	; (8001804 <dmaStreamAllocI+0x104>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	9b06      	ldr	r3, [sp, #24]
 800176e:	4313      	orrs	r3, r2
 8001770:	4a24      	ldr	r2, [pc, #144]	; (8001804 <dmaStreamAllocI+0x104>)
 8001772:	6013      	str	r3, [r2, #0]

      /* Enabling DMA clocks required by the current streams set.*/
      if ((STM32_DMA1_STREAMS_MASK & mask) != 0U) {
 8001774:	9b06      	ldr	r3, [sp, #24]
 8001776:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800177a:	2b00      	cmp	r3, #0
 800177c:	d007      	beq.n	800178e <dmaStreamAllocI+0x8e>
        rccEnableDMA1(true);
 800177e:	4b23      	ldr	r3, [pc, #140]	; (800180c <dmaStreamAllocI+0x10c>)
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	4a22      	ldr	r2, [pc, #136]	; (800180c <dmaStreamAllocI+0x10c>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	6153      	str	r3, [r2, #20]
 800178a:	4b20      	ldr	r3, [pc, #128]	; (800180c <dmaStreamAllocI+0x10c>)
 800178c:	695b      	ldr	r3, [r3, #20]
      }
#endif

      /* Enables the associated IRQ vector if not already enabled and if a
         callback is defined.*/
      if (func != NULL) {
 800178e:	9b01      	ldr	r3, [sp, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d012      	beq.n	80017ba <dmaStreamAllocI+0xba>
        if ((dma.isr_mask & dmastp->cmask) == 0U) {
 8001794:	4b1b      	ldr	r3, [pc, #108]	; (8001804 <dmaStreamAllocI+0x104>)
 8001796:	685a      	ldr	r2, [r3, #4]
 8001798:	9b05      	ldr	r3, [sp, #20]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	4013      	ands	r3, r2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d105      	bne.n	80017ae <dmaStreamAllocI+0xae>
          nvicEnableVector(dmastp->vector, priority);
 80017a2:	9b05      	ldr	r3, [sp, #20]
 80017a4:	7bdb      	ldrb	r3, [r3, #15]
 80017a6:	9902      	ldr	r1, [sp, #8]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fe29 	bl	8001400 <nvicEnableVector>
        }
        dma.isr_mask |= mask;
 80017ae:	4b15      	ldr	r3, [pc, #84]	; (8001804 <dmaStreamAllocI+0x104>)
 80017b0:	685a      	ldr	r2, [r3, #4]
 80017b2:	9b06      	ldr	r3, [sp, #24]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	4a13      	ldr	r2, [pc, #76]	; (8001804 <dmaStreamAllocI+0x104>)
 80017b8:	6053      	str	r3, [r2, #4]
      }

      /* Putting the stream in a known state.*/
      dmaStreamDisable(dmastp);
 80017ba:	9b05      	ldr	r3, [sp, #20]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	9b05      	ldr	r3, [sp, #20]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f022 020f 	bic.w	r2, r2, #15
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	9b05      	ldr	r3, [sp, #20]
 80017cc:	7b5b      	ldrb	r3, [r3, #13]
 80017ce:	461a      	mov	r2, r3
 80017d0:	230e      	movs	r3, #14
 80017d2:	fa03 f202 	lsl.w	r2, r3, r2
 80017d6:	9b05      	ldr	r3, [sp, #20]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	605a      	str	r2, [r3, #4]
      dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 80017dc:	9b05      	ldr	r3, [sp, #20]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]

      return dmastp;
 80017e4:	9b05      	ldr	r3, [sp, #20]
 80017e6:	e007      	b.n	80017f8 <dmaStreamAllocI+0xf8>
  for (i = startid; i <= endid; i++) {
 80017e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80017ea:	3301      	adds	r3, #1
 80017ec:	9309      	str	r3, [sp, #36]	; 0x24
 80017ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80017f0:	9b07      	ldr	r3, [sp, #28]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d99b      	bls.n	800172e <dmaStreamAllocI+0x2e>
    }
  }

  return NULL;
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	b00b      	add	sp, #44	; 0x2c
 80017fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8001800:	08004b84 	.word	0x08004b84
 8001804:	20000800 	.word	0x20000800
 8001808:	08004b14 	.word	0x08004b14
 800180c:	40021000 	.word	0x40021000

08001810 <dmaServeInterrupt>:
 *
 * @param[in] dmastp    pointer to a stm32_dma_stream_t structure
 *
 * @special
 */
void dmaServeInterrupt(const stm32_dma_stream_t *dmastp) {
 8001810:	b500      	push	{lr}
 8001812:	b085      	sub	sp, #20
 8001814:	9001      	str	r0, [sp, #4]
  uint32_t flags;
  uint32_t selfindex = (uint32_t)dmastp->selfindex;
 8001816:	9b01      	ldr	r3, [sp, #4]
 8001818:	7b9b      	ldrb	r3, [r3, #14]
 800181a:	9303      	str	r3, [sp, #12]

  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 800181c:	9b01      	ldr	r3, [sp, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	9a01      	ldr	r2, [sp, #4]
 8001824:	7b52      	ldrb	r2, [r2, #13]
 8001826:	40d3      	lsrs	r3, r2
 8001828:	f003 030e 	and.w	r3, r3, #14
 800182c:	9302      	str	r3, [sp, #8]
  if (flags & dmastp->channel->CCR) {
 800182e:	9b01      	ldr	r3, [sp, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	9b02      	ldr	r3, [sp, #8]
 8001836:	4013      	ands	r3, r2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d01c      	beq.n	8001876 <dmaServeInterrupt+0x66>
    dmastp->dma->IFCR = flags << dmastp->shift;
 800183c:	9b01      	ldr	r3, [sp, #4]
 800183e:	7b5b      	ldrb	r3, [r3, #13]
 8001840:	4619      	mov	r1, r3
 8001842:	9b01      	ldr	r3, [sp, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	9a02      	ldr	r2, [sp, #8]
 8001848:	408a      	lsls	r2, r1
 800184a:	605a      	str	r2, [r3, #4]
    if (dma.streams[selfindex].func) {
 800184c:	4a0b      	ldr	r2, [pc, #44]	; (800187c <dmaServeInterrupt+0x6c>)
 800184e:	9b03      	ldr	r3, [sp, #12]
 8001850:	3301      	adds	r3, #1
 8001852:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d00d      	beq.n	8001876 <dmaServeInterrupt+0x66>
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 800185a:	4a08      	ldr	r2, [pc, #32]	; (800187c <dmaServeInterrupt+0x6c>)
 800185c:	9b03      	ldr	r3, [sp, #12]
 800185e:	3301      	adds	r3, #1
 8001860:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001864:	4905      	ldr	r1, [pc, #20]	; (800187c <dmaServeInterrupt+0x6c>)
 8001866:	9b03      	ldr	r3, [sp, #12]
 8001868:	3301      	adds	r3, #1
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	440b      	add	r3, r1
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	9902      	ldr	r1, [sp, #8]
 8001872:	4618      	mov	r0, r3
 8001874:	4790      	blx	r2
    }
  }
}
 8001876:	b005      	add	sp, #20
 8001878:	f85d fb04 	ldr.w	pc, [sp], #4
 800187c:	20000800 	.word	0x20000800

08001880 <_pal_lld_init>:
 *
 * @param[in] config    the STM32 ports configuration
 *
 * @notapi
 */
void _pal_lld_init(const PALConfig *config) {
 8001880:	b082      	sub	sp, #8
 8001882:	9001      	str	r0, [sp, #4]
#endif

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, true);
 8001884:	4b22      	ldr	r3, [pc, #136]	; (8001910 <_pal_lld_init+0x90>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	4a21      	ldr	r2, [pc, #132]	; (8001910 <_pal_lld_init+0x90>)
 800188a:	f043 037d 	orr.w	r3, r3, #125	; 0x7d
 800188e:	6193      	str	r3, [r2, #24]
 8001890:	4b1f      	ldr	r3, [pc, #124]	; (8001910 <_pal_lld_init+0x90>)
 8001892:	699b      	ldr	r3, [r3, #24]

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 8001894:	4a1f      	ldr	r2, [pc, #124]	; (8001914 <_pal_lld_init+0x94>)
 8001896:	9b01      	ldr	r3, [sp, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	60d3      	str	r3, [r2, #12]
  GPIOA->CRH = config->PAData.crh;
 800189c:	4a1d      	ldr	r2, [pc, #116]	; (8001914 <_pal_lld_init+0x94>)
 800189e:	9b01      	ldr	r3, [sp, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	6053      	str	r3, [r2, #4]
  GPIOA->CRL = config->PAData.crl;
 80018a4:	4a1b      	ldr	r2, [pc, #108]	; (8001914 <_pal_lld_init+0x94>)
 80018a6:	9b01      	ldr	r3, [sp, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	6013      	str	r3, [r2, #0]
  GPIOB->ODR = config->PBData.odr;
 80018ac:	4a1a      	ldr	r2, [pc, #104]	; (8001918 <_pal_lld_init+0x98>)
 80018ae:	9b01      	ldr	r3, [sp, #4]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	60d3      	str	r3, [r2, #12]
  GPIOB->CRH = config->PBData.crh;
 80018b4:	4a18      	ldr	r2, [pc, #96]	; (8001918 <_pal_lld_init+0x98>)
 80018b6:	9b01      	ldr	r3, [sp, #4]
 80018b8:	695b      	ldr	r3, [r3, #20]
 80018ba:	6053      	str	r3, [r2, #4]
  GPIOB->CRL = config->PBData.crl;
 80018bc:	4a16      	ldr	r2, [pc, #88]	; (8001918 <_pal_lld_init+0x98>)
 80018be:	9b01      	ldr	r3, [sp, #4]
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	6013      	str	r3, [r2, #0]
  GPIOC->ODR = config->PCData.odr;
 80018c4:	4a15      	ldr	r2, [pc, #84]	; (800191c <_pal_lld_init+0x9c>)
 80018c6:	9b01      	ldr	r3, [sp, #4]
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	60d3      	str	r3, [r2, #12]
  GPIOC->CRH = config->PCData.crh;
 80018cc:	4a13      	ldr	r2, [pc, #76]	; (800191c <_pal_lld_init+0x9c>)
 80018ce:	9b01      	ldr	r3, [sp, #4]
 80018d0:	6a1b      	ldr	r3, [r3, #32]
 80018d2:	6053      	str	r3, [r2, #4]
  GPIOC->CRL = config->PCData.crl;
 80018d4:	4a11      	ldr	r2, [pc, #68]	; (800191c <_pal_lld_init+0x9c>)
 80018d6:	9b01      	ldr	r3, [sp, #4]
 80018d8:	69db      	ldr	r3, [r3, #28]
 80018da:	6013      	str	r3, [r2, #0]
  GPIOD->ODR = config->PDData.odr;
 80018dc:	4a10      	ldr	r2, [pc, #64]	; (8001920 <_pal_lld_init+0xa0>)
 80018de:	9b01      	ldr	r3, [sp, #4]
 80018e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e2:	60d3      	str	r3, [r2, #12]
  GPIOD->CRH = config->PDData.crh;
 80018e4:	4a0e      	ldr	r2, [pc, #56]	; (8001920 <_pal_lld_init+0xa0>)
 80018e6:	9b01      	ldr	r3, [sp, #4]
 80018e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ea:	6053      	str	r3, [r2, #4]
  GPIOD->CRL = config->PDData.crl;
 80018ec:	4a0c      	ldr	r2, [pc, #48]	; (8001920 <_pal_lld_init+0xa0>)
 80018ee:	9b01      	ldr	r3, [sp, #4]
 80018f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f2:	6013      	str	r3, [r2, #0]
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 80018f4:	4a0b      	ldr	r2, [pc, #44]	; (8001924 <_pal_lld_init+0xa4>)
 80018f6:	9b01      	ldr	r3, [sp, #4]
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	60d3      	str	r3, [r2, #12]
  GPIOE->CRH = config->PEData.crh;
 80018fc:	4a09      	ldr	r2, [pc, #36]	; (8001924 <_pal_lld_init+0xa4>)
 80018fe:	9b01      	ldr	r3, [sp, #4]
 8001900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001902:	6053      	str	r3, [r2, #4]
  GPIOE->CRL = config->PEData.crl;
 8001904:	4a07      	ldr	r2, [pc, #28]	; (8001924 <_pal_lld_init+0xa4>)
 8001906:	9b01      	ldr	r3, [sp, #4]
 8001908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800190a:	6013      	str	r3, [r2, #0]
  GPIOG->CRH = config->PGData.crh;
  GPIOG->CRL = config->PGData.crl;
#endif
#endif
#endif
}
 800190c:	b002      	add	sp, #8
 800190e:	4770      	bx	lr
 8001910:	40021000 	.word	0x40021000
 8001914:	40010800 	.word	0x40010800
 8001918:	40010c00 	.word	0x40010c00
 800191c:	40011000 	.word	0x40011000
 8001920:	40011400 	.word	0x40011400
 8001924:	40011800 	.word	0x40011800
	...

08001930 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 8001930:	b08a      	sub	sp, #40	; 0x28
 8001932:	9003      	str	r0, [sp, #12]
 8001934:	9102      	str	r1, [sp, #8]
 8001936:	9201      	str	r2, [sp, #4]
    0xF,        /* PAL_MODE_STM32_ALTERNATE_OPENDRAIN, 50MHz.*/
  };
  uint32_t mh, ml, crh, crl, cfg;
  unsigned i;

  if (mode == PAL_MODE_INPUT_PULLUP)
 8001938:	9b01      	ldr	r3, [sp, #4]
 800193a:	2b03      	cmp	r3, #3
 800193c:	d103      	bne.n	8001946 <_pal_lld_setgroupmode+0x16>
    port->BSRR = mask;
 800193e:	9b03      	ldr	r3, [sp, #12]
 8001940:	9a02      	ldr	r2, [sp, #8]
 8001942:	611a      	str	r2, [r3, #16]
 8001944:	e005      	b.n	8001952 <_pal_lld_setgroupmode+0x22>
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
 8001946:	9b01      	ldr	r3, [sp, #4]
 8001948:	2b04      	cmp	r3, #4
 800194a:	d102      	bne.n	8001952 <_pal_lld_setgroupmode+0x22>
    port->BRR = mask;
 800194c:	9b03      	ldr	r3, [sp, #12]
 800194e:	9a02      	ldr	r2, [sp, #8]
 8001950:	615a      	str	r2, [r3, #20]
  cfg = cfgtab[mode];
 8001952:	4a29      	ldr	r2, [pc, #164]	; (80019f8 <_pal_lld_setgroupmode+0xc8>)
 8001954:	9b01      	ldr	r3, [sp, #4]
 8001956:	4413      	add	r3, r2
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	9304      	str	r3, [sp, #16]
  mh = ml = crh = crl = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	9306      	str	r3, [sp, #24]
 8001960:	9b06      	ldr	r3, [sp, #24]
 8001962:	9307      	str	r3, [sp, #28]
 8001964:	9b07      	ldr	r3, [sp, #28]
 8001966:	9308      	str	r3, [sp, #32]
 8001968:	9b08      	ldr	r3, [sp, #32]
 800196a:	9309      	str	r3, [sp, #36]	; 0x24
  for (i = 0; i < 8; i++) {
 800196c:	2300      	movs	r3, #0
 800196e:	9305      	str	r3, [sp, #20]
 8001970:	e02d      	b.n	80019ce <_pal_lld_setgroupmode+0x9e>
    ml <<= 4;
 8001972:	9b08      	ldr	r3, [sp, #32]
 8001974:	011b      	lsls	r3, r3, #4
 8001976:	9308      	str	r3, [sp, #32]
    mh <<= 4;
 8001978:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800197a:	011b      	lsls	r3, r3, #4
 800197c:	9309      	str	r3, [sp, #36]	; 0x24
    crl <<= 4;
 800197e:	9b06      	ldr	r3, [sp, #24]
 8001980:	011b      	lsls	r3, r3, #4
 8001982:	9306      	str	r3, [sp, #24]
    crh <<= 4;
 8001984:	9b07      	ldr	r3, [sp, #28]
 8001986:	011b      	lsls	r3, r3, #4
 8001988:	9307      	str	r3, [sp, #28]
    if ((mask & 0x0080) == 0)
 800198a:	9b02      	ldr	r3, [sp, #8]
 800198c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001990:	2b00      	cmp	r3, #0
 8001992:	d104      	bne.n	800199e <_pal_lld_setgroupmode+0x6e>
      ml |= 0xf;
 8001994:	9b08      	ldr	r3, [sp, #32]
 8001996:	f043 030f 	orr.w	r3, r3, #15
 800199a:	9308      	str	r3, [sp, #32]
 800199c:	e003      	b.n	80019a6 <_pal_lld_setgroupmode+0x76>
    else
      crl |= cfg;
 800199e:	9a06      	ldr	r2, [sp, #24]
 80019a0:	9b04      	ldr	r3, [sp, #16]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	9306      	str	r3, [sp, #24]
    if ((mask & 0x8000) == 0)
 80019a6:	9b02      	ldr	r3, [sp, #8]
 80019a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d104      	bne.n	80019ba <_pal_lld_setgroupmode+0x8a>
      mh |= 0xf;
 80019b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80019b2:	f043 030f 	orr.w	r3, r3, #15
 80019b6:	9309      	str	r3, [sp, #36]	; 0x24
 80019b8:	e003      	b.n	80019c2 <_pal_lld_setgroupmode+0x92>
    else
      crh |= cfg;
 80019ba:	9a07      	ldr	r2, [sp, #28]
 80019bc:	9b04      	ldr	r3, [sp, #16]
 80019be:	4313      	orrs	r3, r2
 80019c0:	9307      	str	r3, [sp, #28]
    mask <<= 1;
 80019c2:	9b02      	ldr	r3, [sp, #8]
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	9302      	str	r3, [sp, #8]
  for (i = 0; i < 8; i++) {
 80019c8:	9b05      	ldr	r3, [sp, #20]
 80019ca:	3301      	adds	r3, #1
 80019cc:	9305      	str	r3, [sp, #20]
 80019ce:	9b05      	ldr	r3, [sp, #20]
 80019d0:	2b07      	cmp	r3, #7
 80019d2:	d9ce      	bls.n	8001972 <_pal_lld_setgroupmode+0x42>
  }
  port->CRH = (port->CRH & mh) | crh;
 80019d4:	9b03      	ldr	r3, [sp, #12]
 80019d6:	685a      	ldr	r2, [r3, #4]
 80019d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80019da:	401a      	ands	r2, r3
 80019dc:	9b07      	ldr	r3, [sp, #28]
 80019de:	431a      	orrs	r2, r3
 80019e0:	9b03      	ldr	r3, [sp, #12]
 80019e2:	605a      	str	r2, [r3, #4]
  port->CRL = (port->CRL & ml) | crl;
 80019e4:	9b03      	ldr	r3, [sp, #12]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	9b08      	ldr	r3, [sp, #32]
 80019ea:	401a      	ands	r2, r3
 80019ec:	9b06      	ldr	r3, [sp, #24]
 80019ee:	431a      	orrs	r2, r3
 80019f0:	9b03      	ldr	r3, [sp, #12]
 80019f2:	601a      	str	r2, [r3, #0]
}
 80019f4:	b00a      	add	sp, #40	; 0x28
 80019f6:	4770      	bx	lr
 80019f8:	08004b94 	.word	0x08004b94
 80019fc:	00000000 	.word	0x00000000

08001a00 <chSysLockFromISR.lto_priv.133>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysLockFromISR(void) {
 8001a00:	b500      	push	{lr}
 8001a02:	b083      	sub	sp, #12
 8001a04:	2320      	movs	r3, #32
 8001a06:	9301      	str	r3, [sp, #4]
 8001a08:	9b01      	ldr	r3, [sp, #4]
 8001a0a:	f383 8811 	msr	BASEPRI, r3

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 8001a0e:	f000 fe0f 	bl	8002630 <_dbg_check_lock_from_isr>
}
 8001a12:	b003      	add	sp, #12
 8001a14:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001a20 <chSysUnlockFromISR.lto_priv.128>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {
 8001a20:	b500      	push	{lr}
 8001a22:	b083      	sub	sp, #12

  _dbg_check_unlock_from_isr();
 8001a24:	f000 fe1c 	bl	8002660 <_dbg_check_unlock_from_isr>
 8001a28:	2300      	movs	r3, #0
 8001a2a:	9301      	str	r3, [sp, #4]
 8001a2c:	9b01      	ldr	r3, [sp, #4]
 8001a2e:	f383 8811 	msr	BASEPRI, r3
  _stats_stop_measure_crit_isr();
  port_unlock_from_isr();
}
 8001a32:	b003      	add	sp, #12
 8001a34:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001a40 <osalSysHalt>:
static inline void osalSysHalt(const char *reason) {
 8001a40:	b500      	push	{lr}
 8001a42:	b083      	sub	sp, #12
 8001a44:	9001      	str	r0, [sp, #4]
  chSysHalt(reason);
 8001a46:	9801      	ldr	r0, [sp, #4]
 8001a48:	f000 fd92 	bl	8002570 <chSysHalt>
}
 8001a4c:	b003      	add	sp, #12
 8001a4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a52:	bf00      	nop
	...

08001a60 <osalSysLockFromISR.lto_priv.151>:
static inline void osalSysLockFromISR(void) {
 8001a60:	b508      	push	{r3, lr}
  chSysLockFromISR();
 8001a62:	f7ff ffcd 	bl	8001a00 <chSysLockFromISR.lto_priv.133>
}
 8001a66:	bd08      	pop	{r3, pc}
	...

08001a70 <osalSysUnlockFromISR.lto_priv.148>:
static inline void osalSysUnlockFromISR(void) {
 8001a70:	b508      	push	{r3, lr}
  chSysUnlockFromISR();
 8001a72:	f7ff ffd5 	bl	8001a20 <chSysUnlockFromISR.lto_priv.128>
}
 8001a76:	bd08      	pop	{r3, pc}
	...

08001a80 <osalThreadResumeI.lto_priv.155>:
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {
 8001a80:	b500      	push	{lr}
 8001a82:	b083      	sub	sp, #12
 8001a84:	9001      	str	r0, [sp, #4]
 8001a86:	9100      	str	r1, [sp, #0]
  chThdResumeI(trp, msg);
 8001a88:	9900      	ldr	r1, [sp, #0]
 8001a8a:	9801      	ldr	r0, [sp, #4]
 8001a8c:	f001 fcb0 	bl	80033f0 <chThdResumeI>
}
 8001a90:	b003      	add	sp, #12
 8001a92:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a96:	bf00      	nop
	...

08001aa0 <spi_lld_serve_rx_interrupt>:
 * @brief   Shared end-of-rx service routine.
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {
 8001aa0:	b500      	push	{lr}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	9001      	str	r0, [sp, #4]
 8001aa6:	9100      	str	r1, [sp, #0]

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001aa8:	9b00      	ldr	r3, [sp, #0]
 8001aaa:	f003 0308 	and.w	r3, r3, #8
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d002      	beq.n	8001ab8 <spi_lld_serve_rx_interrupt+0x18>
    STM32_SPI_DMA_ERROR_HOOK(spip);
 8001ab2:	4841      	ldr	r0, [pc, #260]	; (8001bb8 <spi_lld_serve_rx_interrupt+0x118>)
 8001ab4:	f7ff ffc4 	bl	8001a40 <osalSysHalt>
  }
#else
  (void)flags;
#endif

  if (spip->config->circular) {
 8001ab8:	9b01      	ldr	r3, [sp, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d028      	beq.n	8001b14 <spi_lld_serve_rx_interrupt+0x74>
    if ((flags & STM32_DMA_ISR_HTIF) != 0U) {
 8001ac2:	9b00      	ldr	r3, [sp, #0]
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d009      	beq.n	8001ae0 <spi_lld_serve_rx_interrupt+0x40>
      /* Half buffer interrupt.*/
      _spi_isr_half_code(spip);
 8001acc:	9b01      	ldr	r3, [sp, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d004      	beq.n	8001ae0 <spi_lld_serve_rx_interrupt+0x40>
 8001ad6:	9b01      	ldr	r3, [sp, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	9801      	ldr	r0, [sp, #4]
 8001ade:	4798      	blx	r3
    }
    if ((flags & STM32_DMA_ISR_TCIF) != 0U) {
 8001ae0:	9b00      	ldr	r3, [sp, #0]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d061      	beq.n	8001bae <spi_lld_serve_rx_interrupt+0x10e>
      /* End buffer interrupt.*/
      _spi_isr_full_code(spip);
 8001aea:	9b01      	ldr	r3, [sp, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d05c      	beq.n	8001bae <spi_lld_serve_rx_interrupt+0x10e>
 8001af4:	9b01      	ldr	r3, [sp, #4]
 8001af6:	2204      	movs	r2, #4
 8001af8:	701a      	strb	r2, [r3, #0]
 8001afa:	9b01      	ldr	r3, [sp, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	9801      	ldr	r0, [sp, #4]
 8001b02:	4798      	blx	r3
 8001b04:	9b01      	ldr	r3, [sp, #4]
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b04      	cmp	r3, #4
 8001b0a:	d150      	bne.n	8001bae <spi_lld_serve_rx_interrupt+0x10e>
 8001b0c:	9b01      	ldr	r3, [sp, #4]
 8001b0e:	2203      	movs	r2, #3
 8001b10:	701a      	strb	r2, [r3, #0]
 8001b12:	e04d      	b.n	8001bb0 <spi_lld_serve_rx_interrupt+0x110>
    }
  }
  else {
    /* Stopping DMAs.*/
    dmaStreamDisable(spip->dmatx);
 8001b14:	9b01      	ldr	r3, [sp, #4]
 8001b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	9b01      	ldr	r3, [sp, #4]
 8001b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f022 020f 	bic.w	r2, r2, #15
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	9b01      	ldr	r3, [sp, #4]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	7b5b      	ldrb	r3, [r3, #13]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	230e      	movs	r3, #14
 8001b32:	fa03 f202 	lsl.w	r2, r3, r2
 8001b36:	9b01      	ldr	r3, [sp, #4]
 8001b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
    dmaStreamDisable(spip->dmarx);
 8001b3e:	9b01      	ldr	r3, [sp, #4]
 8001b40:	6a1b      	ldr	r3, [r3, #32]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	9b01      	ldr	r3, [sp, #4]
 8001b48:	6a1b      	ldr	r3, [r3, #32]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f022 020f 	bic.w	r2, r2, #15
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	9b01      	ldr	r3, [sp, #4]
 8001b54:	6a1b      	ldr	r3, [r3, #32]
 8001b56:	7b5b      	ldrb	r3, [r3, #13]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	230e      	movs	r3, #14
 8001b5c:	fa03 f202 	lsl.w	r2, r3, r2
 8001b60:	9b01      	ldr	r3, [sp, #4]
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	605a      	str	r2, [r3, #4]

    /* Portable SPI ISR code defined in the high level driver, note, it is
       a macro.*/
    _spi_isr_code(spip);
 8001b68:	9b01      	ldr	r3, [sp, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d00f      	beq.n	8001b92 <spi_lld_serve_rx_interrupt+0xf2>
 8001b72:	9b01      	ldr	r3, [sp, #4]
 8001b74:	2204      	movs	r2, #4
 8001b76:	701a      	strb	r2, [r3, #0]
 8001b78:	9b01      	ldr	r3, [sp, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	9801      	ldr	r0, [sp, #4]
 8001b80:	4798      	blx	r3
 8001b82:	9b01      	ldr	r3, [sp, #4]
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	2b04      	cmp	r3, #4
 8001b88:	d106      	bne.n	8001b98 <spi_lld_serve_rx_interrupt+0xf8>
 8001b8a:	9b01      	ldr	r3, [sp, #4]
 8001b8c:	2202      	movs	r2, #2
 8001b8e:	701a      	strb	r2, [r3, #0]
 8001b90:	e002      	b.n	8001b98 <spi_lld_serve_rx_interrupt+0xf8>
 8001b92:	9b01      	ldr	r3, [sp, #4]
 8001b94:	2202      	movs	r2, #2
 8001b96:	701a      	strb	r2, [r3, #0]
 8001b98:	f7ff ff62 	bl	8001a60 <osalSysLockFromISR.lto_priv.151>
 8001b9c:	9b01      	ldr	r3, [sp, #4]
 8001b9e:	3308      	adds	r3, #8
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff ff6c 	bl	8001a80 <osalThreadResumeI.lto_priv.155>
 8001ba8:	f7ff ff62 	bl	8001a70 <osalSysUnlockFromISR.lto_priv.148>
 8001bac:	e000      	b.n	8001bb0 <spi_lld_serve_rx_interrupt+0x110>
      _spi_isr_full_code(spip);
 8001bae:	bf00      	nop
  }
}
 8001bb0:	b003      	add	sp, #12
 8001bb2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001bb6:	bf00      	nop
 8001bb8:	08004ba8 	.word	0x08004ba8
 8001bbc:	00000000 	.word	0x00000000

08001bc0 <spi_lld_serve_tx_interrupt>:
 * @brief   Shared end-of-tx service routine.
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void spi_lld_serve_tx_interrupt(SPIDriver *spip, uint32_t flags) {
 8001bc0:	b500      	push	{lr}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	9001      	str	r0, [sp, #4]
 8001bc6:	9100      	str	r1, [sp, #0]

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  (void)spip;
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001bc8:	9b00      	ldr	r3, [sp, #0]
 8001bca:	f003 0308 	and.w	r3, r3, #8
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d002      	beq.n	8001bd8 <spi_lld_serve_tx_interrupt+0x18>
    STM32_SPI_DMA_ERROR_HOOK(spip);
 8001bd2:	4803      	ldr	r0, [pc, #12]	; (8001be0 <spi_lld_serve_tx_interrupt+0x20>)
 8001bd4:	f7ff ff34 	bl	8001a40 <osalSysHalt>
  }
#else
  (void)spip;
  (void)flags;
#endif
}
 8001bd8:	b003      	add	sp, #12
 8001bda:	f85d fb04 	ldr.w	pc, [sp], #4
 8001bde:	bf00      	nop
 8001be0:	08004ba8 	.word	0x08004ba8
	...

08001bf0 <spi_lld_init>:
/**
 * @brief   Low level SPI driver initialization.
 *
 * @notapi
 */
void spi_lld_init(void) {
 8001bf0:	b508      	push	{r3, lr}
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
#endif

#if STM32_SPI_USE_SPI2
  spiObjectInit(&SPID2);
 8001bf2:	480a      	ldr	r0, [pc, #40]	; (8001c1c <spi_lld_init+0x2c>)
 8001bf4:	f7ff fb1c 	bl	8001230 <spiObjectInit>
  SPID2.spi       = SPI2;
 8001bf8:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <spi_lld_init+0x2c>)
 8001bfa:	4a09      	ldr	r2, [pc, #36]	; (8001c20 <spi_lld_init+0x30>)
 8001bfc:	61da      	str	r2, [r3, #28]
  SPID2.dmarx     = NULL;
 8001bfe:	4b07      	ldr	r3, [pc, #28]	; (8001c1c <spi_lld_init+0x2c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	621a      	str	r2, [r3, #32]
  SPID2.dmatx     = NULL;
 8001c04:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <spi_lld_init+0x2c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	625a      	str	r2, [r3, #36]	; 0x24
  SPID2.rxdmamode = STM32_DMA_CR_CHSEL(SPI2_RX_DMA_CHANNEL) |
 8001c0a:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <spi_lld_init+0x2c>)
 8001c0c:	f241 020a 	movw	r2, #4106	; 0x100a
 8001c10:	629a      	str	r2, [r3, #40]	; 0x28
                    STM32_DMA_CR_PL(STM32_SPI_SPI2_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID2.txdmamode = STM32_DMA_CR_CHSEL(SPI2_TX_DMA_CHANNEL) |
 8001c12:	4b02      	ldr	r3, [pc, #8]	; (8001c1c <spi_lld_init+0x2c>)
 8001c14:	f241 0218 	movw	r2, #4120	; 0x1018
 8001c18:	62da      	str	r2, [r3, #44]	; 0x2c
                    STM32_DMA_CR_PL(STM32_SPI_SPI6_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_M2P |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
#endif
}
 8001c1a:	bd08      	pop	{r3, pc}
 8001c1c:	20000840 	.word	0x20000840
 8001c20:	40003800 	.word	0x40003800
	...

08001c30 <spi_lld_start>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @notapi
 */
void spi_lld_start(SPIDriver *spip) {
 8001c30:	b500      	push	{lr}
 8001c32:	b083      	sub	sp, #12
 8001c34:	9001      	str	r0, [sp, #4]

  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
 8001c36:	9b01      	ldr	r3, [sp, #4]
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d12d      	bne.n	8001c9a <spi_lld_start+0x6a>
      osalDbgAssert(spip->dmatx != NULL, "unable to allocate stream");
      rccEnableSPI1(true);
    }
#endif
#if STM32_SPI_USE_SPI2
    if (&SPID2 == spip) {
 8001c3e:	9b01      	ldr	r3, [sp, #4]
 8001c40:	4a49      	ldr	r2, [pc, #292]	; (8001d68 <spi_lld_start+0x138>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d119      	bne.n	8001c7a <spi_lld_start+0x4a>
      spip->dmarx = dmaStreamAllocI(STM32_SPI_SPI2_RX_DMA_STREAM,
 8001c46:	9b01      	ldr	r3, [sp, #4]
 8001c48:	4a48      	ldr	r2, [pc, #288]	; (8001d6c <spi_lld_start+0x13c>)
 8001c4a:	210a      	movs	r1, #10
 8001c4c:	2003      	movs	r0, #3
 8001c4e:	f7ff fd57 	bl	8001700 <dmaStreamAllocI>
 8001c52:	4602      	mov	r2, r0
 8001c54:	9b01      	ldr	r3, [sp, #4]
 8001c56:	621a      	str	r2, [r3, #32]
                                    STM32_SPI_SPI2_IRQ_PRIORITY,
                                    (stm32_dmaisr_t)spi_lld_serve_rx_interrupt,
                                    (void *)spip);
      osalDbgAssert(spip->dmarx != NULL, "unable to allocate stream");
      spip->dmatx = dmaStreamAllocI(STM32_SPI_SPI2_TX_DMA_STREAM,
 8001c58:	9b01      	ldr	r3, [sp, #4]
 8001c5a:	4a45      	ldr	r2, [pc, #276]	; (8001d70 <spi_lld_start+0x140>)
 8001c5c:	210a      	movs	r1, #10
 8001c5e:	2004      	movs	r0, #4
 8001c60:	f7ff fd4e 	bl	8001700 <dmaStreamAllocI>
 8001c64:	4602      	mov	r2, r0
 8001c66:	9b01      	ldr	r3, [sp, #4]
 8001c68:	625a      	str	r2, [r3, #36]	; 0x24
                                    STM32_SPI_SPI2_IRQ_PRIORITY,
                                    (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                                    (void *)spip);
      osalDbgAssert(spip->dmatx != NULL, "unable to allocate stream");
      rccEnableSPI2(true);
 8001c6a:	4b42      	ldr	r3, [pc, #264]	; (8001d74 <spi_lld_start+0x144>)
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	4a41      	ldr	r2, [pc, #260]	; (8001d74 <spi_lld_start+0x144>)
 8001c70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c74:	61d3      	str	r3, [r2, #28]
 8001c76:	4b3f      	ldr	r3, [pc, #252]	; (8001d74 <spi_lld_start+0x144>)
 8001c78:	69db      	ldr	r3, [r3, #28]
      rccEnableSPI6(true);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8001c7a:	9b01      	ldr	r3, [sp, #4]
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	f103 020c 	add.w	r2, r3, #12
 8001c82:	9b01      	ldr	r3, [sp, #4]
 8001c84:	6a1b      	ldr	r3, [r3, #32]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	609a      	str	r2, [r3, #8]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8001c8a:	9b01      	ldr	r3, [sp, #4]
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	f103 020c 	add.w	r2, r3, #12
 8001c92:	9b01      	ldr	r3, [sp, #4]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	609a      	str	r2, [r3, #8]
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8001c9a:	9b01      	ldr	r3, [sp, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	8a1b      	ldrh	r3, [r3, #16]
 8001ca0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d10c      	bne.n	8001cc2 <spi_lld_start+0x92>
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8001ca8:	9b01      	ldr	r3, [sp, #4]
 8001caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8001cac:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8001cb0:	9b01      	ldr	r3, [sp, #4]
 8001cb2:	629a      	str	r2, [r3, #40]	; 0x28
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8001cb4:	9b01      	ldr	r3, [sp, #4]
 8001cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8001cb8:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8001cbc:	9b01      	ldr	r3, [sp, #4]
 8001cbe:	62da      	str	r2, [r3, #44]	; 0x2c
 8001cc0:	e00f      	b.n	8001ce2 <spi_lld_start+0xb2>
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8001cc2:	9b01      	ldr	r3, [sp, #4]
 8001cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8001cca:	f443 62a0 	orr.w	r2, r3, #1280	; 0x500
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8001cce:	9b01      	ldr	r3, [sp, #4]
 8001cd0:	629a      	str	r2, [r3, #40]	; 0x28
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8001cd2:	9b01      	ldr	r3, [sp, #4]
 8001cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8001cda:	f443 62a0 	orr.w	r2, r3, #1280	; 0x500
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8001cde:	9b01      	ldr	r3, [sp, #4]
 8001ce0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  if (spip->config->circular) {
 8001ce2:	9b01      	ldr	r3, [sp, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d00c      	beq.n	8001d06 <spi_lld_start+0xd6>
    spip->rxdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8001cec:	9b01      	ldr	r3, [sp, #4]
 8001cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf0:	f043 0224 	orr.w	r2, r3, #36	; 0x24
 8001cf4:	9b01      	ldr	r3, [sp, #4]
 8001cf6:	629a      	str	r2, [r3, #40]	; 0x28
    spip->txdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8001cf8:	9b01      	ldr	r3, [sp, #4]
 8001cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfc:	f043 0224 	orr.w	r2, r3, #36	; 0x24
 8001d00:	9b01      	ldr	r3, [sp, #4]
 8001d02:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d04:	e00b      	b.n	8001d1e <spi_lld_start+0xee>
  }
  else {
    spip->rxdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8001d06:	9b01      	ldr	r3, [sp, #4]
 8001d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0a:	f023 0224 	bic.w	r2, r3, #36	; 0x24
 8001d0e:	9b01      	ldr	r3, [sp, #4]
 8001d10:	629a      	str	r2, [r3, #40]	; 0x28
    spip->txdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8001d12:	9b01      	ldr	r3, [sp, #4]
 8001d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d16:	f023 0224 	bic.w	r2, r3, #36	; 0x24
 8001d1a:	9b01      	ldr	r3, [sp, #4]
 8001d1c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* SPI setup and enable.*/
  spip->spi->CR1 &= ~SPI_CR1_SPE;
 8001d1e:	9b01      	ldr	r3, [sp, #4]
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	9b01      	ldr	r3, [sp, #4]
 8001d26:	69db      	ldr	r3, [r3, #28]
 8001d28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d2c:	601a      	str	r2, [r3, #0]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 8001d2e:	9b01      	ldr	r3, [sp, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	8a1b      	ldrh	r3, [r3, #16]
 8001d34:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	9b01      	ldr	r3, [sp, #4]
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	601a      	str	r2, [r3, #0]
                    SPI_CR1_SSI;
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_SSOE | SPI_CR2_RXDMAEN |
 8001d40:	9b01      	ldr	r3, [sp, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	8a5b      	ldrh	r3, [r3, #18]
 8001d46:	f043 0307 	orr.w	r3, r3, #7
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	9b01      	ldr	r3, [sp, #4]
 8001d4e:	69db      	ldr	r3, [r3, #28]
 8001d50:	605a      	str	r2, [r3, #4]
                    SPI_CR2_TXDMAEN;
  spip->spi->CR1 |= SPI_CR1_SPE;
 8001d52:	9b01      	ldr	r3, [sp, #4]
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	9b01      	ldr	r3, [sp, #4]
 8001d5a:	69db      	ldr	r3, [r3, #28]
 8001d5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d60:	601a      	str	r2, [r3, #0]
}
 8001d62:	b003      	add	sp, #12
 8001d64:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d68:	20000840 	.word	0x20000840
 8001d6c:	08001aa1 	.word	0x08001aa1
 8001d70:	08001bc1 	.word	0x08001bc1
 8001d74:	40021000 	.word	0x40021000
	...

08001d80 <spi_lld_send>:
 * @param[in] n         number of words to send
 * @param[in] txbuf     the pointer to the transmit buffer
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {
 8001d80:	b084      	sub	sp, #16
 8001d82:	9003      	str	r0, [sp, #12]
 8001d84:	9102      	str	r1, [sp, #8]
 8001d86:	9201      	str	r2, [sp, #4]

  osalDbgAssert(n < 65536, "unsupported DMA transfer size");

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 8001d88:	9b03      	ldr	r3, [sp, #12]
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	4a1a      	ldr	r2, [pc, #104]	; (8001df8 <spi_lld_send+0x78>)
 8001d90:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8001d92:	9b03      	ldr	r3, [sp, #12]
 8001d94:	6a1b      	ldr	r3, [r3, #32]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	9a02      	ldr	r2, [sp, #8]
 8001d9a:	605a      	str	r2, [r3, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 8001d9c:	9b03      	ldr	r3, [sp, #12]
 8001d9e:	6a1b      	ldr	r3, [r3, #32]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	9a03      	ldr	r2, [sp, #12]
 8001da4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001da6:	601a      	str	r2, [r3, #0]

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8001da8:	9b03      	ldr	r3, [sp, #12]
 8001daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	9a01      	ldr	r2, [sp, #4]
 8001db0:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 8001db2:	9b03      	ldr	r3, [sp, #12]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	9a02      	ldr	r2, [sp, #8]
 8001dba:	605a      	str	r2, [r3, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8001dbc:	9b03      	ldr	r3, [sp, #12]
 8001dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dc0:	9b03      	ldr	r3, [sp, #12]
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dca:	601a      	str	r2, [r3, #0]

  dmaStreamEnable(spip->dmarx);
 8001dcc:	9b03      	ldr	r3, [sp, #12]
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	9b03      	ldr	r3, [sp, #12]
 8001dd6:	6a1b      	ldr	r3, [r3, #32]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f042 0201 	orr.w	r2, r2, #1
 8001dde:	601a      	str	r2, [r3, #0]
  dmaStreamEnable(spip->dmatx);
 8001de0:	9b03      	ldr	r3, [sp, #12]
 8001de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	9b03      	ldr	r3, [sp, #12]
 8001dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f042 0201 	orr.w	r2, r2, #1
 8001df2:	601a      	str	r2, [r3, #0]
}
 8001df4:	b004      	add	sp, #16
 8001df6:	4770      	bx	lr
 8001df8:	20000870 	.word	0x20000870
 8001dfc:	00000000 	.word	0x00000000

08001e00 <spi_lld_receive>:
 * @param[in] n         number of words to receive
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @notapi
 */
void spi_lld_receive(SPIDriver *spip, size_t n, void *rxbuf) {
 8001e00:	b084      	sub	sp, #16
 8001e02:	9003      	str	r0, [sp, #12]
 8001e04:	9102      	str	r1, [sp, #8]
 8001e06:	9201      	str	r2, [sp, #4]

  osalDbgAssert(n < 65536, "unsupported DMA transfer size");

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8001e08:	9b03      	ldr	r3, [sp, #12]
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	9a01      	ldr	r2, [sp, #4]
 8001e10:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8001e12:	9b03      	ldr	r3, [sp, #12]
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	9a02      	ldr	r2, [sp, #8]
 8001e1a:	605a      	str	r2, [r3, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 8001e1c:	9b03      	ldr	r3, [sp, #12]
 8001e1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e20:	9b03      	ldr	r3, [sp, #12]
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e2a:	601a      	str	r2, [r3, #0]

  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 8001e2c:	9b03      	ldr	r3, [sp, #12]
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	4a11      	ldr	r2, [pc, #68]	; (8001e78 <spi_lld_receive+0x78>)
 8001e34:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 8001e36:	9b03      	ldr	r3, [sp, #12]
 8001e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	9a02      	ldr	r2, [sp, #8]
 8001e3e:	605a      	str	r2, [r3, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode);
 8001e40:	9b03      	ldr	r3, [sp, #12]
 8001e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	9a03      	ldr	r2, [sp, #12]
 8001e48:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e4a:	601a      	str	r2, [r3, #0]

  dmaStreamEnable(spip->dmarx);
 8001e4c:	9b03      	ldr	r3, [sp, #12]
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	9b03      	ldr	r3, [sp, #12]
 8001e56:	6a1b      	ldr	r3, [r3, #32]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f042 0201 	orr.w	r2, r2, #1
 8001e5e:	601a      	str	r2, [r3, #0]
  dmaStreamEnable(spip->dmatx);
 8001e60:	9b03      	ldr	r3, [sp, #12]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	9b03      	ldr	r3, [sp, #12]
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f042 0201 	orr.w	r2, r2, #1
 8001e72:	601a      	str	r2, [r3, #0]
}
 8001e74:	b004      	add	sp, #16
 8001e76:	4770      	bx	lr
 8001e78:	08004ba6 	.word	0x08004ba6
 8001e7c:	00000000 	.word	0x00000000

08001e80 <chSysLockFromISR.lto_priv.134>:
static inline void chSysLockFromISR(void) {
 8001e80:	b500      	push	{lr}
 8001e82:	b083      	sub	sp, #12
 8001e84:	2320      	movs	r3, #32
 8001e86:	9301      	str	r3, [sp, #4]
 8001e88:	9b01      	ldr	r3, [sp, #4]
 8001e8a:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 8001e8e:	f000 fbcf 	bl	8002630 <_dbg_check_lock_from_isr>
}
 8001e92:	b003      	add	sp, #12
 8001e94:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001ea0 <chSysUnlockFromISR.lto_priv.129>:
static inline void chSysUnlockFromISR(void) {
 8001ea0:	b500      	push	{lr}
 8001ea2:	b083      	sub	sp, #12
  _dbg_check_unlock_from_isr();
 8001ea4:	f000 fbdc 	bl	8002660 <_dbg_check_unlock_from_isr>
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	9301      	str	r3, [sp, #4]
 8001eac:	9b01      	ldr	r3, [sp, #4]
 8001eae:	f383 8811 	msr	BASEPRI, r3
}
 8001eb2:	b003      	add	sp, #12
 8001eb4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001ec0 <osalSysLockFromISR.lto_priv.152>:
static inline void osalSysLockFromISR(void) {
 8001ec0:	b508      	push	{r3, lr}
  chSysLockFromISR();
 8001ec2:	f7ff ffdd 	bl	8001e80 <chSysLockFromISR.lto_priv.134>
}
 8001ec6:	bd08      	pop	{r3, pc}
	...

08001ed0 <osalSysUnlockFromISR.lto_priv.149>:
static inline void osalSysUnlockFromISR(void) {
 8001ed0:	b508      	push	{r3, lr}
  chSysUnlockFromISR();
 8001ed2:	f7ff ffe5 	bl	8001ea0 <chSysUnlockFromISR.lto_priv.129>
}
 8001ed6:	bd08      	pop	{r3, pc}
	...

08001ee0 <osalOsTimerHandlerI>:
static inline void osalOsTimerHandlerI(void) {
 8001ee0:	b508      	push	{r3, lr}
  chSysTimerHandlerI();
 8001ee2:	f000 fb55 	bl	8002590 <chSysTimerHandlerI>
}
 8001ee6:	bd08      	pop	{r3, pc}
	...

08001ef0 <VectorB0>:
/**
 * @brief   Interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8001ef0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 8001ef2:	f000 fbcd 	bl	8002690 <_dbg_check_enter_isr>

  st_lld_serve_interrupt();
 8001ef6:	f000 f84b 	bl	8001f90 <st_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 8001efa:	f000 fbf1 	bl	80026e0 <_dbg_check_leave_isr>
 8001efe:	f001 fdc7 	bl	8003a90 <_port_irq_epilogue>
}
 8001f02:	bd08      	pop	{r3, pc}
	...

08001f10 <st_lld_init>:
/**
 * @brief   Low level ST driver initialization.
 *
 * @notapi
 */
void st_lld_init(void) {
 8001f10:	b508      	push	{r3, lr}

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8001f12:	4b1a      	ldr	r3, [pc, #104]	; (8001f7c <st_lld_init+0x6c>)
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	4a19      	ldr	r2, [pc, #100]	; (8001f7c <st_lld_init+0x6c>)
 8001f18:	f043 0301 	orr.w	r3, r3, #1
 8001f1c:	61d3      	str	r3, [r2, #28]
 8001f1e:	4b17      	ldr	r3, [pc, #92]	; (8001f7c <st_lld_init+0x6c>)
 8001f20:	69db      	ldr	r3, [r3, #28]

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8001f22:	4b17      	ldr	r3, [pc, #92]	; (8001f80 <st_lld_init+0x70>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	4a16      	ldr	r2, [pc, #88]	; (8001f80 <st_lld_init+0x70>)
 8001f28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f2c:	6053      	str	r3, [r2, #4]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8001f2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f32:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 8001f36:	629a      	str	r2, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8001f38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f40:	62da      	str	r2, [r3, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 8001f42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f46:	2200      	movs	r2, #0
 8001f48:	619a      	str	r2, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8001f4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f4e:	2200      	movs	r2, #0
 8001f50:	635a      	str	r2, [r3, #52]	; 0x34
  STM32_ST_TIM->CCR[2] = 0;
#endif
#if ST_LLD_NUM_ALARMS > 3
  STM32_ST_TIM->CCR[3] = 0;
#endif
  STM32_ST_TIM->DIER   = 0;
 8001f52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f56:	2200      	movs	r2, #0
 8001f58:	60da      	str	r2, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 8001f5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f5e:	2200      	movs	r2, #0
 8001f60:	605a      	str	r2, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8001f62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f66:	2201      	movs	r2, #1
 8001f68:	615a      	str	r2, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8001f6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f6e:	2201      	movs	r2, #1
 8001f70:	601a      	str	r2, [r3, #0]

#if !defined(STM32_SYSTICK_SUPPRESS_ISR)
  /* IRQ enabled.*/
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
 8001f72:	2108      	movs	r1, #8
 8001f74:	201c      	movs	r0, #28
 8001f76:	f7ff fa43 	bl	8001400 <nvicEnableVector>
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC */
}
 8001f7a:	bd08      	pop	{r3, pc}
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	e0042000 	.word	0xe0042000
	...

08001f90 <st_lld_serve_interrupt>:

/**
 * @brief   IRQ handling code.
 */
void st_lld_serve_interrupt(void) {
 8001f90:	b500      	push	{lr}
 8001f92:	b083      	sub	sp, #12
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;
 8001f94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f98:	9301      	str	r3, [sp, #4]

  sr  = timp->SR;
 8001f9a:	9b01      	ldr	r3, [sp, #4]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	9300      	str	r3, [sp, #0]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 8001fa0:	9b01      	ldr	r3, [sp, #4]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	9a00      	ldr	r2, [sp, #0]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	9300      	str	r3, [sp, #0]
  timp->SR = ~sr;
 8001fac:	9b00      	ldr	r3, [sp, #0]
 8001fae:	43da      	mvns	r2, r3
 8001fb0:	9b01      	ldr	r3, [sp, #4]
 8001fb2:	611a      	str	r2, [r3, #16]

  if ((sr & TIM_SR_CC1IF) != 0U)
 8001fb4:	9b00      	ldr	r3, [sp, #0]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d005      	beq.n	8001fca <st_lld_serve_interrupt+0x3a>
#endif
  {
    osalSysLockFromISR();
 8001fbe:	f7ff ff7f 	bl	8001ec0 <osalSysLockFromISR.lto_priv.152>
    osalOsTimerHandlerI();
 8001fc2:	f7ff ff8d 	bl	8001ee0 <osalOsTimerHandlerI>
    osalSysUnlockFromISR();
 8001fc6:	f7ff ff83 	bl	8001ed0 <osalSysUnlockFromISR.lto_priv.149>
      st_callbacks[2](3U);
    }
  }
#endif
#endif
}
 8001fca:	b003      	add	sp, #12
 8001fcc:	f85d fb04 	ldr.w	pc, [sp], #4

08001fd0 <chSysLockFromISR.lto_priv.135>:
static inline void chSysLockFromISR(void) {
 8001fd0:	b500      	push	{lr}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	2320      	movs	r3, #32
 8001fd6:	9301      	str	r3, [sp, #4]
 8001fd8:	9b01      	ldr	r3, [sp, #4]
 8001fda:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 8001fde:	f000 fb27 	bl	8002630 <_dbg_check_lock_from_isr>
}
 8001fe2:	b003      	add	sp, #12
 8001fe4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001ff0 <chSysUnlockFromISR.lto_priv.130>:
static inline void chSysUnlockFromISR(void) {
 8001ff0:	b500      	push	{lr}
 8001ff2:	b083      	sub	sp, #12
  _dbg_check_unlock_from_isr();
 8001ff4:	f000 fb34 	bl	8002660 <_dbg_check_unlock_from_isr>
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	9301      	str	r3, [sp, #4]
 8001ffc:	9b01      	ldr	r3, [sp, #4]
 8001ffe:	f383 8811 	msr	BASEPRI, r3
}
 8002002:	b003      	add	sp, #12
 8002004:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002010 <osalSysLockFromISR.lto_priv.153>:
static inline void osalSysLockFromISR(void) {
 8002010:	b508      	push	{r3, lr}
  chSysLockFromISR();
 8002012:	f7ff ffdd 	bl	8001fd0 <chSysLockFromISR.lto_priv.135>
}
 8002016:	bd08      	pop	{r3, pc}
	...

08002020 <osalSysUnlockFromISR.lto_priv.150>:
static inline void osalSysUnlockFromISR(void) {
 8002020:	b508      	push	{r3, lr}
  chSysUnlockFromISR();
 8002022:	f7ff ffe5 	bl	8001ff0 <chSysUnlockFromISR.lto_priv.130>
}
 8002026:	bd08      	pop	{r3, pc}
	...

08002030 <osalEventBroadcastFlagsI.lto_priv.147>:
                                            eventflags_t flags) {
 8002030:	b500      	push	{lr}
 8002032:	b083      	sub	sp, #12
 8002034:	9001      	str	r0, [sp, #4]
 8002036:	9100      	str	r1, [sp, #0]
  chEvtBroadcastFlagsI(esp, flags);
 8002038:	9900      	ldr	r1, [sp, #0]
 800203a:	9801      	ldr	r0, [sp, #4]
 800203c:	f001 fb00 	bl	8003640 <chEvtBroadcastFlagsI>
}
 8002040:	b003      	add	sp, #12
 8002042:	f85d fb04 	ldr.w	pc, [sp], #4
 8002046:	bf00      	nop
	...

08002050 <set_error>:
 * @brief   Error handling routine.
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] sr        USART SR register value
 */
static void set_error(SerialDriver *sdp, uint16_t sr) {
 8002050:	b500      	push	{lr}
 8002052:	b085      	sub	sp, #20
 8002054:	9001      	str	r0, [sp, #4]
 8002056:	460b      	mov	r3, r1
 8002058:	f8ad 3002 	strh.w	r3, [sp, #2]
  eventflags_t sts = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	9303      	str	r3, [sp, #12]

  if (sr & USART_SR_ORE)
 8002060:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8002064:	f003 0308 	and.w	r3, r3, #8
 8002068:	2b00      	cmp	r3, #0
 800206a:	d003      	beq.n	8002074 <set_error+0x24>
    sts |= SD_OVERRUN_ERROR;
 800206c:	9b03      	ldr	r3, [sp, #12]
 800206e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002072:	9303      	str	r3, [sp, #12]
  if (sr & USART_SR_PE)
 8002074:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b00      	cmp	r3, #0
 800207e:	d003      	beq.n	8002088 <set_error+0x38>
    sts |= SD_PARITY_ERROR;
 8002080:	9b03      	ldr	r3, [sp, #12]
 8002082:	f043 0320 	orr.w	r3, r3, #32
 8002086:	9303      	str	r3, [sp, #12]
  if (sr & USART_SR_FE)
 8002088:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <set_error+0x4c>
    sts |= SD_FRAMING_ERROR;
 8002094:	9b03      	ldr	r3, [sp, #12]
 8002096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800209a:	9303      	str	r3, [sp, #12]
  if (sr & USART_SR_NE)
 800209c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d003      	beq.n	80020b0 <set_error+0x60>
    sts |= SD_NOISE_ERROR;
 80020a8:	9b03      	ldr	r3, [sp, #12]
 80020aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ae:	9303      	str	r3, [sp, #12]
  chnAddFlagsI(sdp, sts);
 80020b0:	9b01      	ldr	r3, [sp, #4]
 80020b2:	3304      	adds	r3, #4
 80020b4:	9903      	ldr	r1, [sp, #12]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff ffba 	bl	8002030 <osalEventBroadcastFlagsI.lto_priv.147>
}
 80020bc:	b005      	add	sp, #20
 80020be:	f85d fb04 	ldr.w	pc, [sp], #4
 80020c2:	bf00      	nop
	...

080020d0 <serve_interrupt>:
/**
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
 80020d0:	b500      	push	{lr}
 80020d2:	b089      	sub	sp, #36	; 0x24
 80020d4:	9001      	str	r0, [sp, #4]
  USART_TypeDef *u = sdp->usart;
 80020d6:	9b01      	ldr	r3, [sp, #4]
 80020d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020da:	9306      	str	r3, [sp, #24]
  uint16_t cr1 = u->CR1;
 80020dc:	9b06      	ldr	r3, [sp, #24]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	f8ad 3016 	strh.w	r3, [sp, #22]
  uint16_t sr = u->SR;
 80020e4:	9b06      	ldr	r3, [sp, #24]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f8ad 301e 	strh.w	r3, [sp, #30]

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 80020ec:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80020f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00e      	beq.n	8002116 <serve_interrupt+0x46>
    osalSysLockFromISR();
 80020f8:	f7ff ff8a 	bl	8002010 <osalSysLockFromISR.lto_priv.153>
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
 80020fc:	9b01      	ldr	r3, [sp, #4]
 80020fe:	3304      	adds	r3, #4
 8002100:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff ff93 	bl	8002030 <osalEventBroadcastFlagsI.lto_priv.147>
    u->SR = ~USART_SR_LBD;
 800210a:	9b06      	ldr	r3, [sp, #24]
 800210c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002110:	601a      	str	r2, [r3, #0]
    osalSysUnlockFromISR();
 8002112:	f7ff ff85 	bl	8002020 <osalSysUnlockFromISR.lto_priv.150>
  }

  /* Data available.*/
  osalSysLockFromISR();
 8002116:	f7ff ff7b 	bl	8002010 <osalSysLockFromISR.lto_priv.153>
 800211a:	e024      	b.n	8002166 <serve_interrupt+0x96>
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
               USART_SR_PE)) {
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 800211c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8002120:	f003 030f 	and.w	r3, r3, #15
 8002124:	2b00      	cmp	r3, #0
 8002126:	d005      	beq.n	8002134 <serve_interrupt+0x64>
      set_error(sdp, sr);
 8002128:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800212c:	4619      	mov	r1, r3
 800212e:	9801      	ldr	r0, [sp, #4]
 8002130:	f7ff ff8e 	bl	8002050 <set_error>
    b = (uint8_t)u->DR & sdp->rxmask;
 8002134:	9b06      	ldr	r3, [sp, #24]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	b2da      	uxtb	r2, r3
 800213a:	9b01      	ldr	r3, [sp, #4]
 800213c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8002140:	4013      	ands	r3, r2
 8002142:	f88d 300f 	strb.w	r3, [sp, #15]
    if (sr & USART_SR_RXNE)
 8002146:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800214a:	f003 0320 	and.w	r3, r3, #32
 800214e:	2b00      	cmp	r3, #0
 8002150:	d005      	beq.n	800215e <serve_interrupt+0x8e>
      sdIncomingDataI(sdp, b);
 8002152:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8002156:	4619      	mov	r1, r3
 8002158:	9801      	ldr	r0, [sp, #4]
 800215a:	f7fe ffe1 	bl	8001120 <sdIncomingDataI>
    sr = u->SR;
 800215e:	9b06      	ldr	r3, [sp, #24]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f8ad 301e 	strh.w	r3, [sp, #30]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8002166:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800216a:	f003 032f 	and.w	r3, r3, #47	; 0x2f
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1d4      	bne.n	800211c <serve_interrupt+0x4c>
  }
  osalSysUnlockFromISR();
 8002172:	f7ff ff55 	bl	8002020 <osalSysUnlockFromISR.lto_priv.150>

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8002176:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800217a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800217e:	2b00      	cmp	r3, #0
 8002180:	d022      	beq.n	80021c8 <serve_interrupt+0xf8>
 8002182:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8002186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800218a:	2b00      	cmp	r3, #0
 800218c:	d01c      	beq.n	80021c8 <serve_interrupt+0xf8>
    msg_t b;
    osalSysLockFromISR();
 800218e:	f7ff ff3f 	bl	8002010 <osalSysLockFromISR.lto_priv.153>
    b = oqGetI(&sdp->oqueue);
 8002192:	9b01      	ldr	r3, [sp, #4]
 8002194:	3330      	adds	r3, #48	; 0x30
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe fe02 	bl	8000da0 <oqGetI>
 800219c:	9004      	str	r0, [sp, #16]
    if (b < MSG_OK) {
 800219e:	9b04      	ldr	r3, [sp, #16]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	da0c      	bge.n	80021be <serve_interrupt+0xee>
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
 80021a4:	9b01      	ldr	r3, [sp, #4]
 80021a6:	3304      	adds	r3, #4
 80021a8:	2108      	movs	r1, #8
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff ff40 	bl	8002030 <osalEventBroadcastFlagsI.lto_priv.147>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
 80021b0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80021b4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021b8:	9b06      	ldr	r3, [sp, #24]
 80021ba:	60da      	str	r2, [r3, #12]
 80021bc:	e002      	b.n	80021c4 <serve_interrupt+0xf4>
    }
    else
      u->DR = b;
 80021be:	9a04      	ldr	r2, [sp, #16]
 80021c0:	9b06      	ldr	r3, [sp, #24]
 80021c2:	605a      	str	r2, [r3, #4]
    osalSysUnlockFromISR();
 80021c4:	f7ff ff2c 	bl	8002020 <osalSysUnlockFromISR.lto_priv.150>
  }

  /* Physical transmission end.*/
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 80021c8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80021cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d027      	beq.n	8002224 <serve_interrupt+0x154>
 80021d4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80021d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d021      	beq.n	8002224 <serve_interrupt+0x154>
    osalSysLockFromISR();
 80021e0:	f7ff ff16 	bl	8002010 <osalSysLockFromISR.lto_priv.153>
    if (oqIsEmptyI(&sdp->oqueue)) {
 80021e4:	9b01      	ldr	r3, [sp, #4]
 80021e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021e8:	9b01      	ldr	r3, [sp, #4]
 80021ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d105      	bne.n	80021fc <serve_interrupt+0x12c>
 80021f0:	9b01      	ldr	r3, [sp, #4]
 80021f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <serve_interrupt+0x12c>
 80021f8:	2301      	movs	r3, #1
 80021fa:	e000      	b.n	80021fe <serve_interrupt+0x12e>
 80021fc:	2300      	movs	r3, #0
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00b      	beq.n	8002220 <serve_interrupt+0x150>
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
 8002208:	9b01      	ldr	r3, [sp, #4]
 800220a:	3304      	adds	r3, #4
 800220c:	2110      	movs	r1, #16
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff ff0e 	bl	8002030 <osalEventBroadcastFlagsI.lto_priv.147>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 8002214:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8002218:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800221c:	9b06      	ldr	r3, [sp, #24]
 800221e:	60da      	str	r2, [r3, #12]
    }
    osalSysUnlockFromISR();
 8002220:	f7ff fefe 	bl	8002020 <osalSysUnlockFromISR.lto_priv.150>
  }
}
 8002224:	b009      	add	sp, #36	; 0x24
 8002226:	f85d fb04 	ldr.w	pc, [sp], #4
 800222a:	bf00      	nop
 800222c:	0000      	movs	r0, r0
	...

08002230 <notify2>:
  USART1->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
}
#endif

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {
 8002230:	b082      	sub	sp, #8
 8002232:	9001      	str	r0, [sp, #4]

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8002234:	4b03      	ldr	r3, [pc, #12]	; (8002244 <notify2+0x14>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	4a02      	ldr	r2, [pc, #8]	; (8002244 <notify2+0x14>)
 800223a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800223e:	60d3      	str	r3, [r2, #12]
}
 8002240:	b002      	add	sp, #8
 8002242:	4770      	bx	lr
 8002244:	40004400 	.word	0x40004400
	...

08002250 <VectorD8>:
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8002250:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 8002252:	f000 fa1d 	bl	8002690 <_dbg_check_enter_isr>

  serve_interrupt(&SD2);
 8002256:	4804      	ldr	r0, [pc, #16]	; (8002268 <VectorD8+0x18>)
 8002258:	f7ff ff3a 	bl	80020d0 <serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 800225c:	f000 fa40 	bl	80026e0 <_dbg_check_leave_isr>
 8002260:	f001 fc16 	bl	8003a90 <_port_irq_epilogue>
}
 8002264:	bd08      	pop	{r3, pc}
 8002266:	bf00      	nop
 8002268:	20000874 	.word	0x20000874
 800226c:	00000000 	.word	0x00000000

08002270 <sd_lld_init>:
/**
 * @brief   Low level serial driver initialization.
 *
 * @notapi
 */
void sd_lld_init(void) {
 8002270:	b508      	push	{r3, lr}
  sdObjectInit(&SD1, NULL, notify1);
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
 8002272:	4a04      	ldr	r2, [pc, #16]	; (8002284 <sd_lld_init+0x14>)
 8002274:	2100      	movs	r1, #0
 8002276:	4804      	ldr	r0, [pc, #16]	; (8002288 <sd_lld_init+0x18>)
 8002278:	f7fe ff22 	bl	80010c0 <sdObjectInit>
  SD2.usart = USART2;
 800227c:	4b02      	ldr	r3, [pc, #8]	; (8002288 <sd_lld_init+0x18>)
 800227e:	4a03      	ldr	r2, [pc, #12]	; (800228c <sd_lld_init+0x1c>)
 8002280:	675a      	str	r2, [r3, #116]	; 0x74

#if STM32_SERIAL_USE_UART8
  sdObjectInit(&SD8, NULL, notify8);
  SD8.usart = UART8;
#endif
}
 8002282:	bd08      	pop	{r3, pc}
 8002284:	08002231 	.word	0x08002231
 8002288:	20000874 	.word	0x20000874
 800228c:	40004400 	.word	0x40004400

08002290 <__early_init>:
/*
 * Early initialization code.
 * This initialization must be performed just after stack setup and before
 * any other initialization.
 */
void __early_init(void) {
 8002290:	b508      	push	{r3, lr}

  stm32_clock_init();
 8002292:	f7ff f94d 	bl	8001530 <stm32_clock_init>
}
 8002296:	bd08      	pop	{r3, pc}
	...

080022a0 <boardInit>:

/*
 * Board-specific initialization code.
 */
void boardInit(void) {
}
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
	...

080022b0 <chTimeAddX.lto_priv.142>:
 * @return              The new system time.
 *
 * @xclass
 */
static inline systime_t chTimeAddX(systime_t systime,
                                   sysinterval_t interval) {
 80022b0:	b500      	push	{lr}
 80022b2:	b083      	sub	sp, #12
 80022b4:	4603      	mov	r3, r0
 80022b6:	9100      	str	r1, [sp, #0]
 80022b8:	f8ad 3006 	strh.w	r3, [sp, #6]

#if CH_CFG_ST_RESOLUTION != CH_CFG_INTERVALS_SIZE
  chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
 80022bc:	9b00      	ldr	r3, [sp, #0]
 80022be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022c2:	d302      	bcc.n	80022ca <chTimeAddX.lto_priv.142+0x1a>
 80022c4:	4806      	ldr	r0, [pc, #24]	; (80022e0 <chTimeAddX.lto_priv.142+0x30>)
 80022c6:	f000 f953 	bl	8002570 <chSysHalt>
#endif

  return systime + (systime_t)interval;
 80022ca:	9b00      	ldr	r3, [sp, #0]
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80022d2:	4413      	add	r3, r2
 80022d4:	b29b      	uxth	r3, r3
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	b003      	add	sp, #12
 80022da:	f85d fb04 	ldr.w	pc, [sp], #4
 80022de:	bf00      	nop
 80022e0:	08004c10 	.word	0x08004c10
	...

080022f0 <chTimeDiffX.lto_priv.125>:
 * @param[in] end       second system time
 * @return              The interval representing the time difference.
 *
 * @xclass
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {
 80022f0:	b082      	sub	sp, #8
 80022f2:	4603      	mov	r3, r0
 80022f4:	460a      	mov	r2, r1
 80022f6:	f8ad 3006 	strh.w	r3, [sp, #6]
 80022fa:	4613      	mov	r3, r2
 80022fc:	f8ad 3004 	strh.w	r3, [sp, #4]

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 8002300:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8002304:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	b29b      	uxth	r3, r3
  /*lint -restore*/
}
 800230c:	4618      	mov	r0, r3
 800230e:	b002      	add	sp, #8
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
	...

08002320 <port_timer_stop_alarm.lto_priv.140>:
/**
 * @brief   Stops the alarm interrupt.
 *
 * @notapi
 */
static inline void port_timer_stop_alarm(void) {
 8002320:	b508      	push	{r3, lr}

  stStopAlarm();
 8002322:	f7fe fa65 	bl	80007f0 <stStopAlarm>
}
 8002326:	bd08      	pop	{r3, pc}
	...

08002330 <port_timer_set_alarm.lto_priv.138>:
 *
 * @param[in] time      the time to be set for the next alarm
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {
 8002330:	b500      	push	{lr}
 8002332:	b083      	sub	sp, #12
 8002334:	4603      	mov	r3, r0
 8002336:	f8ad 3006 	strh.w	r3, [sp, #6]

  stSetAlarm(time);
 800233a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800233e:	4618      	mov	r0, r3
 8002340:	f7fe fa5e 	bl	8000800 <stSetAlarm>
}
 8002344:	b003      	add	sp, #12
 8002346:	f85d fb04 	ldr.w	pc, [sp], #4
 800234a:	bf00      	nop
 800234c:	0000      	movs	r0, r0
	...

08002350 <port_timer_get_time.lto_priv.51>:
 *
 * @return              The system time.
 *
 * @notapi
 */
static inline systime_t port_timer_get_time(void) {
 8002350:	b508      	push	{r3, lr}

  return stGetCounter();
 8002352:	f7fe fa65 	bl	8000820 <stGetCounter>
 8002356:	4603      	mov	r3, r0
}
 8002358:	4618      	mov	r0, r3
 800235a:	bd08      	pop	{r3, pc}
 800235c:	0000      	movs	r0, r0
	...

08002360 <chSysEnable>:
static inline void chSysEnable(void) {
 8002360:	b500      	push	{lr}
 8002362:	b083      	sub	sp, #12
  _dbg_check_enable();
 8002364:	f000 f91c 	bl	80025a0 <_dbg_check_enable>
 8002368:	2300      	movs	r3, #0
 800236a:	9301      	str	r3, [sp, #4]
 800236c:	9b01      	ldr	r3, [sp, #4]
 800236e:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 8002372:	b662      	cpsie	i
}
 8002374:	b003      	add	sp, #12
 8002376:	f85d fb04 	ldr.w	pc, [sp], #4
 800237a:	bf00      	nop
 800237c:	0000      	movs	r0, r0
	...

08002380 <chSysLockFromISR.lto_priv.136>:
static inline void chSysLockFromISR(void) {
 8002380:	b500      	push	{lr}
 8002382:	b083      	sub	sp, #12
 8002384:	2320      	movs	r3, #32
 8002386:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002388:	9b01      	ldr	r3, [sp, #4]
 800238a:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 800238e:	f000 f94f 	bl	8002630 <_dbg_check_lock_from_isr>
}
 8002392:	b003      	add	sp, #12
 8002394:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080023a0 <chSysUnlockFromISR.lto_priv.131>:
static inline void chSysUnlockFromISR(void) {
 80023a0:	b500      	push	{lr}
 80023a2:	b083      	sub	sp, #12
  _dbg_check_unlock_from_isr();
 80023a4:	f000 f95c 	bl	8002660 <_dbg_check_unlock_from_isr>
 80023a8:	2300      	movs	r3, #0
 80023aa:	9301      	str	r3, [sp, #4]
 80023ac:	9b01      	ldr	r3, [sp, #4]
 80023ae:	f383 8811 	msr	BASEPRI, r3
}
 80023b2:	b003      	add	sp, #12
 80023b4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080023c0 <chVTGetSystemTimeX.lto_priv.2>:
 *
 * @return              The system time in ticks.
 *
 * @xclass
 */
static inline systime_t chVTGetSystemTimeX(void) {
 80023c0:	b508      	push	{r3, lr}

#if CH_CFG_ST_TIMEDELTA == 0
  return ch.vtlist.systime;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  return port_timer_get_time();
 80023c2:	f7ff ffc5 	bl	8002350 <port_timer_get_time.lto_priv.51>
 80023c6:	4603      	mov	r3, r0
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	bd08      	pop	{r3, pc}
 80023cc:	0000      	movs	r0, r0
	...

080023d0 <chVTDoTickI>:
 *          to acquire the lock if needed. This is done in order to reduce
 *          interrupts jitter when many timers are in use.
 *
 * @iclass
 */
static inline void chVTDoTickI(void) {
 80023d0:	b510      	push	{r4, lr}
 80023d2:	b086      	sub	sp, #24

  chDbgCheckClassI();
 80023d4:	f000 f9ac 	bl	8002730 <chDbgCheckClassI>
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 80023d8:	4b42      	ldr	r3, [pc, #264]	; (80024e4 <chVTDoTickI+0x114>)
 80023da:	69db      	ldr	r3, [r3, #28]
 80023dc:	9305      	str	r3, [sp, #20]
  while (true) {

    /* Getting the system time as reference.*/
    now = chVTGetSystemTimeX();
 80023de:	f7ff ffef 	bl	80023c0 <chVTGetSystemTimeX.lto_priv.2>
 80023e2:	4603      	mov	r3, r0
 80023e4:	f8ad 300a 	strh.w	r3, [sp, #10]
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 80023e8:	4b3e      	ldr	r3, [pc, #248]	; (80024e4 <chVTDoTickI+0x114>)
 80023ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ec:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80023f0:	4611      	mov	r1, r2
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff ff7c 	bl	80022f0 <chTimeDiffX.lto_priv.125>
 80023f8:	9003      	str	r0, [sp, #12]

    /* The list scan is limited by the timers header having
       "ch.vtlist.vt_delta == (sysinterval_t)-1" which is
       greater than all deltas.*/
    if (nowdelta < vtp->delta) {
 80023fa:	9b05      	ldr	r3, [sp, #20]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	9a03      	ldr	r2, [sp, #12]
 8002400:	429a      	cmp	r2, r3
 8002402:	d334      	bcc.n	800246e <chVTDoTickI+0x9e>
    /* Consuming all timers between "vtp->lasttime" and now.*/
    do {
      vtfunc_t fn;

      /* The "last time" becomes this timer's expiration time.*/
      ch.vtlist.lasttime += vtp->delta;
 8002404:	4b37      	ldr	r3, [pc, #220]	; (80024e4 <chVTDoTickI+0x114>)
 8002406:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8002408:	9b05      	ldr	r3, [sp, #20]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	b29b      	uxth	r3, r3
 800240e:	4413      	add	r3, r2
 8002410:	b29a      	uxth	r2, r3
 8002412:	4b34      	ldr	r3, [pc, #208]	; (80024e4 <chVTDoTickI+0x114>)
 8002414:	851a      	strh	r2, [r3, #40]	; 0x28
      nowdelta -= vtp->delta;
 8002416:	9b05      	ldr	r3, [sp, #20]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	9a03      	ldr	r2, [sp, #12]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	9303      	str	r3, [sp, #12]

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8002420:	9b05      	ldr	r3, [sp, #20]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a30      	ldr	r2, [pc, #192]	; (80024e8 <chVTDoTickI+0x118>)
 8002426:	605a      	str	r2, [r3, #4]
      ch.vtlist.next = vtp->next;
 8002428:	9b05      	ldr	r3, [sp, #20]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a2d      	ldr	r2, [pc, #180]	; (80024e4 <chVTDoTickI+0x114>)
 800242e:	61d3      	str	r3, [r2, #28]
      fn = vtp->func;
 8002430:	9b05      	ldr	r3, [sp, #20]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	9301      	str	r3, [sp, #4]
      vtp->func = NULL;
 8002436:	9b05      	ldr	r3, [sp, #20]
 8002438:	2200      	movs	r2, #0
 800243a:	60da      	str	r2, [r3, #12]

      /* If the list becomes empty then the timer is stopped.*/
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 800243c:	4b29      	ldr	r3, [pc, #164]	; (80024e4 <chVTDoTickI+0x114>)
 800243e:	69db      	ldr	r3, [r3, #28]
 8002440:	4a29      	ldr	r2, [pc, #164]	; (80024e8 <chVTDoTickI+0x118>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d101      	bne.n	800244a <chVTDoTickI+0x7a>
        port_timer_stop_alarm();
 8002446:	f7ff ff6b 	bl	8002320 <port_timer_stop_alarm.lto_priv.140>
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
 800244a:	f7ff ffa9 	bl	80023a0 <chSysUnlockFromISR.lto_priv.131>
      fn(vtp->par);
 800244e:	9b05      	ldr	r3, [sp, #20]
 8002450:	691a      	ldr	r2, [r3, #16]
 8002452:	9b01      	ldr	r3, [sp, #4]
 8002454:	4610      	mov	r0, r2
 8002456:	4798      	blx	r3
      chSysLockFromISR();
 8002458:	f7ff ff92 	bl	8002380 <chSysLockFromISR.lto_priv.136>

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 800245c:	4b21      	ldr	r3, [pc, #132]	; (80024e4 <chVTDoTickI+0x114>)
 800245e:	69db      	ldr	r3, [r3, #28]
 8002460:	9305      	str	r3, [sp, #20]
    }
    while (vtp->delta <= nowdelta);
 8002462:	9b05      	ldr	r3, [sp, #20]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	9a03      	ldr	r2, [sp, #12]
 8002468:	429a      	cmp	r2, r3
 800246a:	d2cb      	bcs.n	8002404 <chVTDoTickI+0x34>
 800246c:	e7b7      	b.n	80023de <chVTDoTickI+0xe>
  }

  /* If the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 800246e:	4b1d      	ldr	r3, [pc, #116]	; (80024e4 <chVTDoTickI+0x114>)
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	4a1d      	ldr	r2, [pc, #116]	; (80024e8 <chVTDoTickI+0x118>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d033      	beq.n	80024e0 <chVTDoTickI+0x110>
    return;
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
 8002478:	4b1a      	ldr	r3, [pc, #104]	; (80024e4 <chVTDoTickI+0x114>)
 800247a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800247c:	9b03      	ldr	r3, [sp, #12]
 800247e:	b29b      	uxth	r3, r3
 8002480:	4413      	add	r3, r2
 8002482:	b29a      	uxth	r2, r3
 8002484:	4b17      	ldr	r3, [pc, #92]	; (80024e4 <chVTDoTickI+0x114>)
 8002486:	851a      	strh	r2, [r3, #40]	; 0x28
  ch.vtlist.next->delta -= nowdelta;
 8002488:	4b16      	ldr	r3, [pc, #88]	; (80024e4 <chVTDoTickI+0x114>)
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	6899      	ldr	r1, [r3, #8]
 800248e:	4b15      	ldr	r3, [pc, #84]	; (80024e4 <chVTDoTickI+0x114>)
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	9a03      	ldr	r2, [sp, #12]
 8002494:	1a8a      	subs	r2, r1, r2
 8002496:	609a      	str	r2, [r3, #8]

  /* Recalculating the next alarm time.*/
  delta = vtp->delta - chTimeDiffX(ch.vtlist.lasttime, now);
 8002498:	9b05      	ldr	r3, [sp, #20]
 800249a:	689c      	ldr	r4, [r3, #8]
 800249c:	4b11      	ldr	r3, [pc, #68]	; (80024e4 <chVTDoTickI+0x114>)
 800249e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80024a4:	4611      	mov	r1, r2
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff ff22 	bl	80022f0 <chTimeDiffX.lto_priv.125>
 80024ac:	4603      	mov	r3, r0
 80024ae:	1ae3      	subs	r3, r4, r3
 80024b0:	9304      	str	r3, [sp, #16]
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 80024b2:	9b04      	ldr	r3, [sp, #16]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d802      	bhi.n	80024be <chVTDoTickI+0xee>
    delta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 80024b8:	2302      	movs	r3, #2
 80024ba:	9304      	str	r3, [sp, #16]
 80024bc:	e006      	b.n	80024cc <chVTDoTickI+0xfc>
  }
#if CH_CFG_INTERVALS_SIZE > CH_CFG_ST_RESOLUTION
  /* The delta could be too large for the physical timer to handle.*/
  else if (delta > (sysinterval_t)TIME_MAX_SYSTIME) {
 80024be:	9b04      	ldr	r3, [sp, #16]
 80024c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c4:	d302      	bcc.n	80024cc <chVTDoTickI+0xfc>
    delta = (sysinterval_t)TIME_MAX_SYSTIME;
 80024c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024ca:	9304      	str	r3, [sp, #16]
  }
#endif
  port_timer_set_alarm(chTimeAddX(now, delta));
 80024cc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80024d0:	9904      	ldr	r1, [sp, #16]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff feec 	bl	80022b0 <chTimeAddX.lto_priv.142>
 80024d8:	4603      	mov	r3, r0
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff ff28 	bl	8002330 <port_timer_set_alarm.lto_priv.138>

  chDbgAssert(chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX()) <=
              chTimeDiffX(ch.vtlist.lasttime, chTimeAddX(now, delta)),
              "exceeding delta");
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 80024e0:	b006      	add	sp, #24
 80024e2:	bd10      	pop	{r4, pc}
 80024e4:	200009c8 	.word	0x200009c8
 80024e8:	200009e4 	.word	0x200009e4
 80024ec:	00000000 	.word	0x00000000

080024f0 <_oslib_init>:
/**
 * @brief   Initialization of all library modules.
 *
 * @notapi
 */
static inline void _oslib_init(void) {
 80024f0:	b508      	push	{r3, lr}

#if CH_CFG_USE_MEMCORE == TRUE
  _core_init();
 80024f2:	f001 f935 	bl	8003760 <_core_init>
#endif
#if CH_CFG_USE_HEAP == TRUE
  _heap_init();
 80024f6:	f001 f99b 	bl	8003830 <_heap_init>
#endif
#if CH_CFG_USE_FACTORY == TRUE
  _factory_init();
 80024fa:	f001 fa09 	bl	8003910 <_factory_init>
#endif
}
 80024fe:	bd08      	pop	{r3, pc}

08002500 <_idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8002500:	b082      	sub	sp, #8
 8002502:	9001      	str	r0, [sp, #4]
 8002504:	e7fe      	b.n	8002504 <_idle_thread+0x4>
 8002506:	bf00      	nop
	...

08002510 <chSysInit>:
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 8002510:	b508      	push	{r3, lr}

  _scheduler_init();
 8002512:	f000 fb85 	bl	8002c20 <_scheduler_init>
  _vt_init();
 8002516:	f000 f9ab 	bl	8002870 <_vt_init>
  _trace_init();
  _oslib_init();
 800251a:	f7ff ffe9 	bl	80024f0 <_oslib_init>

#if CH_DBG_SYSTEM_STATE_CHECK == TRUE
  ch.dbg.isr_cnt  = (cnt_t)0;
 800251e:	4b10      	ldr	r3, [pc, #64]	; (8002560 <chSysInit+0x50>)
 8002520:	2200      	movs	r2, #0
 8002522:	631a      	str	r2, [r3, #48]	; 0x30
  ch.dbg.lock_cnt = (cnt_t)0;
 8002524:	4b0e      	ldr	r3, [pc, #56]	; (8002560 <chSysInit+0x50>)
 8002526:	2200      	movs	r2, #0
 8002528:	635a      	str	r2, [r3, #52]	; 0x34
#endif
#if CH_CFG_USE_TM == TRUE
  _tm_init();
 800252a:	f000 fff1 	bl	8003510 <_tm_init>
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 800252e:	2280      	movs	r2, #128	; 0x80
 8002530:	490c      	ldr	r1, [pc, #48]	; (8002564 <chSysInit+0x54>)
 8002532:	480d      	ldr	r0, [pc, #52]	; (8002568 <chSysInit+0x58>)
 8002534:	f000 fdcc 	bl	80030d0 <_thread_init>
 8002538:	4602      	mov	r2, r0
 800253a:	4b09      	ldr	r3, [pc, #36]	; (8002560 <chSysInit+0x50>)
 800253c:	619a      	str	r2, [r3, #24]
       symbol must be provided externally.*/
    extern stkalign_t __main_thread_stack_base__;
    currp->wabase = &__main_thread_stack_base__;
  }
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
 800253e:	4b08      	ldr	r3, [pc, #32]	; (8002560 <chSysInit+0x50>)
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	2200      	movs	r2, #0
 8002544:	61da      	str	r2, [r3, #28]
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
 8002546:	4b06      	ldr	r3, [pc, #24]	; (8002560 <chSysInit+0x50>)
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Port layer initialization last because it depend on some of the
     initializations performed before.*/
  port_init();
 8002550:	f001 fa76 	bl	8003a40 <port_init>

  /* Initialization hook.*/
  CH_CFG_SYSTEM_INIT_HOOK();

  /* It is alive now.*/
  chSysEnable();
 8002554:	f7ff ff04 	bl	8002360 <chSysEnable>
    };

    /* This thread has the lowest priority in the system, its role is just to
       serve interrupts in its context while keeping the lowest energy saving
       mode compatible with the system status.*/
    (void) chThdCreate(&idle_descriptor);
 8002558:	4804      	ldr	r0, [pc, #16]	; (800256c <chSysInit+0x5c>)
 800255a:	f000 fe59 	bl	8003210 <chThdCreate>
  }
#endif
}
 800255e:	bd08      	pop	{r3, pc}
 8002560:	200009c8 	.word	0x200009c8
 8002564:	08004cec 	.word	0x08004cec
 8002568:	20000a00 	.word	0x20000a00
 800256c:	08004bf8 	.word	0x08004bf8

08002570 <chSysHalt>:
 *
 * @param[in] reason        pointer to an error string
 *
 * @special
 */
void chSysHalt(const char *reason) {
 8002570:	b082      	sub	sp, #8
 8002572:	9001      	str	r0, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8002574:	b672      	cpsid	i

  /* Logging the event.*/
  _trace_halt(reason);

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 8002576:	4a02      	ldr	r2, [pc, #8]	; (8002580 <chSysHalt+0x10>)
 8002578:	9b01      	ldr	r3, [sp, #4]
 800257a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800257c:	e7fe      	b.n	800257c <chSysHalt+0xc>
 800257e:	bf00      	nop
 8002580:	200009c8 	.word	0x200009c8
	...

08002590 <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
 8002590:	b508      	push	{r3, lr}

  chDbgCheckClassI();
 8002592:	f000 f8cd 	bl	8002730 <chDbgCheckClassI>
  }
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  currp->time++;
#endif
  chVTDoTickI();
 8002596:	f7ff ff1b 	bl	80023d0 <chVTDoTickI>
  CH_CFG_SYSTEM_TICK_HOOK();
}
 800259a:	bd08      	pop	{r3, pc}
 800259c:	0000      	movs	r0, r0
	...

080025a0 <_dbg_check_enable>:
/**
 * @brief   Guard code for @p chSysEnable().
 *
 * @notapi
 */
void _dbg_check_enable(void) {
 80025a0:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 80025a2:	4b06      	ldr	r3, [pc, #24]	; (80025bc <_dbg_check_enable+0x1c>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d103      	bne.n	80025b2 <_dbg_check_enable+0x12>
 80025aa:	4b04      	ldr	r3, [pc, #16]	; (80025bc <_dbg_check_enable+0x1c>)
 80025ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d002      	beq.n	80025b8 <_dbg_check_enable+0x18>
    chSysHalt("SV#3");
 80025b2:	4803      	ldr	r0, [pc, #12]	; (80025c0 <_dbg_check_enable+0x20>)
 80025b4:	f7ff ffdc 	bl	8002570 <chSysHalt>
  }
}
 80025b8:	bd08      	pop	{r3, pc}
 80025ba:	bf00      	nop
 80025bc:	200009c8 	.word	0x200009c8
 80025c0:	08004c1c 	.word	0x08004c1c
	...

080025d0 <_dbg_check_lock>:
/**
 * @brief   Guard code for @p chSysLock().
 *
 * @notapi
 */
void _dbg_check_lock(void) {
 80025d0:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 80025d2:	4b07      	ldr	r3, [pc, #28]	; (80025f0 <_dbg_check_lock+0x20>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d103      	bne.n	80025e2 <_dbg_check_lock+0x12>
 80025da:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <_dbg_check_lock+0x20>)
 80025dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d002      	beq.n	80025e8 <_dbg_check_lock+0x18>
    chSysHalt("SV#4");
 80025e2:	4804      	ldr	r0, [pc, #16]	; (80025f4 <_dbg_check_lock+0x24>)
 80025e4:	f7ff ffc4 	bl	8002570 <chSysHalt>
  }
  _dbg_enter_lock();
 80025e8:	4b01      	ldr	r3, [pc, #4]	; (80025f0 <_dbg_check_lock+0x20>)
 80025ea:	2201      	movs	r2, #1
 80025ec:	635a      	str	r2, [r3, #52]	; 0x34
}
 80025ee:	bd08      	pop	{r3, pc}
 80025f0:	200009c8 	.word	0x200009c8
 80025f4:	08004c24 	.word	0x08004c24
	...

08002600 <_dbg_check_unlock>:
/**
 * @brief   Guard code for @p chSysUnlock().
 *
 * @notapi
 */
void _dbg_check_unlock(void) {
 8002600:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8002602:	4b07      	ldr	r3, [pc, #28]	; (8002620 <_dbg_check_unlock+0x20>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	2b00      	cmp	r3, #0
 8002608:	d103      	bne.n	8002612 <_dbg_check_unlock+0x12>
 800260a:	4b05      	ldr	r3, [pc, #20]	; (8002620 <_dbg_check_unlock+0x20>)
 800260c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800260e:	2b00      	cmp	r3, #0
 8002610:	dc02      	bgt.n	8002618 <_dbg_check_unlock+0x18>
    chSysHalt("SV#5");
 8002612:	4804      	ldr	r0, [pc, #16]	; (8002624 <_dbg_check_unlock+0x24>)
 8002614:	f7ff ffac 	bl	8002570 <chSysHalt>
  }
  _dbg_leave_lock();
 8002618:	4b01      	ldr	r3, [pc, #4]	; (8002620 <_dbg_check_unlock+0x20>)
 800261a:	2200      	movs	r2, #0
 800261c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800261e:	bd08      	pop	{r3, pc}
 8002620:	200009c8 	.word	0x200009c8
 8002624:	08004c2c 	.word	0x08004c2c
	...

08002630 <_dbg_check_lock_from_isr>:
/**
 * @brief   Guard code for @p chSysLockFromIsr().
 *
 * @notapi
 */
void _dbg_check_lock_from_isr(void) {
 8002630:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8002632:	4b07      	ldr	r3, [pc, #28]	; (8002650 <_dbg_check_lock_from_isr+0x20>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	2b00      	cmp	r3, #0
 8002638:	dd03      	ble.n	8002642 <_dbg_check_lock_from_isr+0x12>
 800263a:	4b05      	ldr	r3, [pc, #20]	; (8002650 <_dbg_check_lock_from_isr+0x20>)
 800263c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800263e:	2b00      	cmp	r3, #0
 8002640:	d002      	beq.n	8002648 <_dbg_check_lock_from_isr+0x18>
    chSysHalt("SV#6");
 8002642:	4804      	ldr	r0, [pc, #16]	; (8002654 <_dbg_check_lock_from_isr+0x24>)
 8002644:	f7ff ff94 	bl	8002570 <chSysHalt>
  }
  _dbg_enter_lock();
 8002648:	4b01      	ldr	r3, [pc, #4]	; (8002650 <_dbg_check_lock_from_isr+0x20>)
 800264a:	2201      	movs	r2, #1
 800264c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800264e:	bd08      	pop	{r3, pc}
 8002650:	200009c8 	.word	0x200009c8
 8002654:	08004c34 	.word	0x08004c34
	...

08002660 <_dbg_check_unlock_from_isr>:
/**
 * @brief   Guard code for @p chSysUnlockFromIsr().
 *
 * @notapi
 */
void _dbg_check_unlock_from_isr(void) {
 8002660:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8002662:	4b07      	ldr	r3, [pc, #28]	; (8002680 <_dbg_check_unlock_from_isr+0x20>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	2b00      	cmp	r3, #0
 8002668:	dd03      	ble.n	8002672 <_dbg_check_unlock_from_isr+0x12>
 800266a:	4b05      	ldr	r3, [pc, #20]	; (8002680 <_dbg_check_unlock_from_isr+0x20>)
 800266c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800266e:	2b00      	cmp	r3, #0
 8002670:	dc02      	bgt.n	8002678 <_dbg_check_unlock_from_isr+0x18>
    chSysHalt("SV#7");
 8002672:	4804      	ldr	r0, [pc, #16]	; (8002684 <_dbg_check_unlock_from_isr+0x24>)
 8002674:	f7ff ff7c 	bl	8002570 <chSysHalt>
  }
  _dbg_leave_lock();
 8002678:	4b01      	ldr	r3, [pc, #4]	; (8002680 <_dbg_check_unlock_from_isr+0x20>)
 800267a:	2200      	movs	r2, #0
 800267c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800267e:	bd08      	pop	{r3, pc}
 8002680:	200009c8 	.word	0x200009c8
 8002684:	08004c3c 	.word	0x08004c3c
	...

08002690 <_dbg_check_enter_isr>:
/**
 * @brief   Guard code for @p CH_IRQ_PROLOGUE().
 *
 * @notapi
 */
void _dbg_check_enter_isr(void) {
 8002690:	b500      	push	{lr}
 8002692:	b083      	sub	sp, #12
 8002694:	2320      	movs	r3, #32
 8002696:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002698:	9b01      	ldr	r3, [sp, #4]
 800269a:	f383 8811 	msr	BASEPRI, r3

  port_lock_from_isr();
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 800269e:	4b0c      	ldr	r3, [pc, #48]	; (80026d0 <_dbg_check_enter_isr+0x40>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	db03      	blt.n	80026ae <_dbg_check_enter_isr+0x1e>
 80026a6:	4b0a      	ldr	r3, [pc, #40]	; (80026d0 <_dbg_check_enter_isr+0x40>)
 80026a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d002      	beq.n	80026b4 <_dbg_check_enter_isr+0x24>
    chSysHalt("SV#8");
 80026ae:	4809      	ldr	r0, [pc, #36]	; (80026d4 <_dbg_check_enter_isr+0x44>)
 80026b0:	f7ff ff5e 	bl	8002570 <chSysHalt>
  }
  ch.dbg.isr_cnt++;
 80026b4:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <_dbg_check_enter_isr+0x40>)
 80026b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b8:	3301      	adds	r3, #1
 80026ba:	4a05      	ldr	r2, [pc, #20]	; (80026d0 <_dbg_check_enter_isr+0x40>)
 80026bc:	6313      	str	r3, [r2, #48]	; 0x30
 80026be:	2300      	movs	r3, #0
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	9b00      	ldr	r3, [sp, #0]
 80026c4:	f383 8811 	msr	BASEPRI, r3
  port_unlock_from_isr();
}
 80026c8:	b003      	add	sp, #12
 80026ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80026ce:	bf00      	nop
 80026d0:	200009c8 	.word	0x200009c8
 80026d4:	08004c44 	.word	0x08004c44
	...

080026e0 <_dbg_check_leave_isr>:
/**
 * @brief   Guard code for @p CH_IRQ_EPILOGUE().
 *
 * @notapi
 */
void _dbg_check_leave_isr(void) {
 80026e0:	b500      	push	{lr}
 80026e2:	b083      	sub	sp, #12
 80026e4:	2320      	movs	r3, #32
 80026e6:	9301      	str	r3, [sp, #4]
 80026e8:	9b01      	ldr	r3, [sp, #4]
 80026ea:	f383 8811 	msr	BASEPRI, r3

  port_lock_from_isr();
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 80026ee:	4b0c      	ldr	r3, [pc, #48]	; (8002720 <_dbg_check_leave_isr+0x40>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	dd03      	ble.n	80026fe <_dbg_check_leave_isr+0x1e>
 80026f6:	4b0a      	ldr	r3, [pc, #40]	; (8002720 <_dbg_check_leave_isr+0x40>)
 80026f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d002      	beq.n	8002704 <_dbg_check_leave_isr+0x24>
    chSysHalt("SV#9");
 80026fe:	4809      	ldr	r0, [pc, #36]	; (8002724 <_dbg_check_leave_isr+0x44>)
 8002700:	f7ff ff36 	bl	8002570 <chSysHalt>
  }
  ch.dbg.isr_cnt--;
 8002704:	4b06      	ldr	r3, [pc, #24]	; (8002720 <_dbg_check_leave_isr+0x40>)
 8002706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002708:	3b01      	subs	r3, #1
 800270a:	4a05      	ldr	r2, [pc, #20]	; (8002720 <_dbg_check_leave_isr+0x40>)
 800270c:	6313      	str	r3, [r2, #48]	; 0x30
 800270e:	2300      	movs	r3, #0
 8002710:	9300      	str	r3, [sp, #0]
 8002712:	9b00      	ldr	r3, [sp, #0]
 8002714:	f383 8811 	msr	BASEPRI, r3
  port_unlock_from_isr();
}
 8002718:	b003      	add	sp, #12
 800271a:	f85d fb04 	ldr.w	pc, [sp], #4
 800271e:	bf00      	nop
 8002720:	200009c8 	.word	0x200009c8
 8002724:	08004c4c 	.word	0x08004c4c
	...

08002730 <chDbgCheckClassI>:
 *          an I-class API function. A panic is generated if the state is
 *          not compatible.
 *
 * @api
 */
void chDbgCheckClassI(void) {
 8002730:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8002732:	4b06      	ldr	r3, [pc, #24]	; (800274c <chDbgCheckClassI+0x1c>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	2b00      	cmp	r3, #0
 8002738:	db03      	blt.n	8002742 <chDbgCheckClassI+0x12>
 800273a:	4b04      	ldr	r3, [pc, #16]	; (800274c <chDbgCheckClassI+0x1c>)
 800273c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800273e:	2b00      	cmp	r3, #0
 8002740:	dc02      	bgt.n	8002748 <chDbgCheckClassI+0x18>
    chSysHalt("SV#10");
 8002742:	4803      	ldr	r0, [pc, #12]	; (8002750 <chDbgCheckClassI+0x20>)
 8002744:	f7ff ff14 	bl	8002570 <chSysHalt>
  }
}
 8002748:	bd08      	pop	{r3, pc}
 800274a:	bf00      	nop
 800274c:	200009c8 	.word	0x200009c8
 8002750:	08004c54 	.word	0x08004c54
	...

08002760 <chDbgCheckClassS>:
 *          an S-class API function. A panic is generated if the state is
 *          not compatible.
 *
 * @api
 */
void chDbgCheckClassS(void) {
 8002760:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8002762:	4b06      	ldr	r3, [pc, #24]	; (800277c <chDbgCheckClassS+0x1c>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	2b00      	cmp	r3, #0
 8002768:	d103      	bne.n	8002772 <chDbgCheckClassS+0x12>
 800276a:	4b04      	ldr	r3, [pc, #16]	; (800277c <chDbgCheckClassS+0x1c>)
 800276c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800276e:	2b00      	cmp	r3, #0
 8002770:	dc02      	bgt.n	8002778 <chDbgCheckClassS+0x18>
    chSysHalt("SV#11");
 8002772:	4803      	ldr	r0, [pc, #12]	; (8002780 <chDbgCheckClassS+0x20>)
 8002774:	f7ff fefc 	bl	8002570 <chSysHalt>
  }
}
 8002778:	bd08      	pop	{r3, pc}
 800277a:	bf00      	nop
 800277c:	200009c8 	.word	0x200009c8
 8002780:	08004c5c 	.word	0x08004c5c
	...

08002790 <chTimeAddX.lto_priv.143>:
                                   sysinterval_t interval) {
 8002790:	b500      	push	{lr}
 8002792:	b083      	sub	sp, #12
 8002794:	4603      	mov	r3, r0
 8002796:	9100      	str	r1, [sp, #0]
 8002798:	f8ad 3006 	strh.w	r3, [sp, #6]
  chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
 800279c:	9b00      	ldr	r3, [sp, #0]
 800279e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027a2:	d302      	bcc.n	80027aa <chTimeAddX.lto_priv.143+0x1a>
 80027a4:	4806      	ldr	r0, [pc, #24]	; (80027c0 <chTimeAddX.lto_priv.143+0x30>)
 80027a6:	f7ff fee3 	bl	8002570 <chSysHalt>
  return systime + (systime_t)interval;
 80027aa:	9b00      	ldr	r3, [sp, #0]
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80027b2:	4413      	add	r3, r2
 80027b4:	b29b      	uxth	r3, r3
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	b003      	add	sp, #12
 80027ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80027be:	bf00      	nop
 80027c0:	08004c70 	.word	0x08004c70
	...

080027d0 <chTimeDiffX.lto_priv.126>:
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {
 80027d0:	b082      	sub	sp, #8
 80027d2:	4603      	mov	r3, r0
 80027d4:	460a      	mov	r2, r1
 80027d6:	f8ad 3006 	strh.w	r3, [sp, #6]
 80027da:	4613      	mov	r3, r2
 80027dc:	f8ad 3004 	strh.w	r3, [sp, #4]
  return (sysinterval_t)((systime_t)(end - start));
 80027e0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80027e4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	b29b      	uxth	r3, r3
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	b002      	add	sp, #8
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
	...

08002800 <port_timer_start_alarm>:
static inline void port_timer_start_alarm(systime_t time) {
 8002800:	b500      	push	{lr}
 8002802:	b083      	sub	sp, #12
 8002804:	4603      	mov	r3, r0
 8002806:	f8ad 3006 	strh.w	r3, [sp, #6]
  stStartAlarm(time);
 800280a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800280e:	4618      	mov	r0, r3
 8002810:	f7fd ffde 	bl	80007d0 <stStartAlarm>
}
 8002814:	b003      	add	sp, #12
 8002816:	f85d fb04 	ldr.w	pc, [sp], #4
 800281a:	bf00      	nop
 800281c:	0000      	movs	r0, r0
	...

08002820 <port_timer_stop_alarm.lto_priv.141>:
static inline void port_timer_stop_alarm(void) {
 8002820:	b508      	push	{r3, lr}
  stStopAlarm();
 8002822:	f7fd ffe5 	bl	80007f0 <stStopAlarm>
}
 8002826:	bd08      	pop	{r3, pc}
	...

08002830 <port_timer_set_alarm.lto_priv.139>:
static inline void port_timer_set_alarm(systime_t time) {
 8002830:	b500      	push	{lr}
 8002832:	b083      	sub	sp, #12
 8002834:	4603      	mov	r3, r0
 8002836:	f8ad 3006 	strh.w	r3, [sp, #6]
  stSetAlarm(time);
 800283a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800283e:	4618      	mov	r0, r3
 8002840:	f7fd ffde 	bl	8000800 <stSetAlarm>
}
 8002844:	b003      	add	sp, #12
 8002846:	f85d fb04 	ldr.w	pc, [sp], #4
 800284a:	bf00      	nop
 800284c:	0000      	movs	r0, r0
	...

08002850 <port_timer_get_time.lto_priv.52>:
static inline systime_t port_timer_get_time(void) {
 8002850:	b508      	push	{r3, lr}
  return stGetCounter();
 8002852:	f7fd ffe5 	bl	8000820 <stGetCounter>
 8002856:	4603      	mov	r3, r0
}
 8002858:	4618      	mov	r0, r3
 800285a:	bd08      	pop	{r3, pc}
 800285c:	0000      	movs	r0, r0
	...

08002860 <chVTGetSystemTimeX.lto_priv.3>:
static inline systime_t chVTGetSystemTimeX(void) {
 8002860:	b508      	push	{r3, lr}
  return port_timer_get_time();
 8002862:	f7ff fff5 	bl	8002850 <port_timer_get_time.lto_priv.52>
 8002866:	4603      	mov	r3, r0
}
 8002868:	4618      	mov	r0, r3
 800286a:	bd08      	pop	{r3, pc}
 800286c:	0000      	movs	r0, r0
	...

08002870 <_vt_init>:
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8002870:	4b06      	ldr	r3, [pc, #24]	; (800288c <_vt_init+0x1c>)
 8002872:	4a07      	ldr	r2, [pc, #28]	; (8002890 <_vt_init+0x20>)
 8002874:	61da      	str	r2, [r3, #28]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 8002876:	4b05      	ldr	r3, [pc, #20]	; (800288c <_vt_init+0x1c>)
 8002878:	4a05      	ldr	r2, [pc, #20]	; (8002890 <_vt_init+0x20>)
 800287a:	621a      	str	r2, [r3, #32]
  ch.vtlist.delta = (sysinterval_t)-1;
 800287c:	4b03      	ldr	r3, [pc, #12]	; (800288c <_vt_init+0x1c>)
 800287e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002882:	625a      	str	r2, [r3, #36]	; 0x24
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.lasttime = (systime_t)0;
 8002884:	4b01      	ldr	r3, [pc, #4]	; (800288c <_vt_init+0x1c>)
 8002886:	2200      	movs	r2, #0
 8002888:	851a      	strh	r2, [r3, #40]	; 0x28
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 800288a:	4770      	bx	lr
 800288c:	200009c8 	.word	0x200009c8
 8002890:	200009e4 	.word	0x200009e4
	...

080028a0 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
                vtfunc_t vtfunc, void *par) {
 80028a0:	b500      	push	{lr}
 80028a2:	b089      	sub	sp, #36	; 0x24
 80028a4:	9003      	str	r0, [sp, #12]
 80028a6:	9102      	str	r1, [sp, #8]
 80028a8:	9201      	str	r2, [sp, #4]
 80028aa:	9300      	str	r3, [sp, #0]
  virtual_timer_t *p;
  sysinterval_t delta;

  chDbgCheckClassI();
 80028ac:	f7ff ff40 	bl	8002730 <chDbgCheckClassI>
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 80028b0:	9b03      	ldr	r3, [sp, #12]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d005      	beq.n	80028c2 <chVTDoSetI+0x22>
 80028b6:	9b01      	ldr	r3, [sp, #4]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d002      	beq.n	80028c2 <chVTDoSetI+0x22>
 80028bc:	9b02      	ldr	r3, [sp, #8]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d102      	bne.n	80028c8 <chVTDoSetI+0x28>
 80028c2:	4853      	ldr	r0, [pc, #332]	; (8002a10 <chVTDoSetI+0x170>)
 80028c4:	f7ff fe54 	bl	8002570 <chSysHalt>

  vtp->par = par;
 80028c8:	9b03      	ldr	r3, [sp, #12]
 80028ca:	9a00      	ldr	r2, [sp, #0]
 80028cc:	611a      	str	r2, [r3, #16]
  vtp->func = vtfunc;
 80028ce:	9b03      	ldr	r3, [sp, #12]
 80028d0:	9a01      	ldr	r2, [sp, #4]
 80028d2:	60da      	str	r2, [r3, #12]

#if CH_CFG_ST_TIMEDELTA > 0
  {
    systime_t now = chVTGetSystemTimeX();
 80028d4:	f7ff ffc4 	bl	8002860 <chVTGetSystemTimeX.lto_priv.3>
 80028d8:	4603      	mov	r3, r0
 80028da:	f8ad 3012 	strh.w	r3, [sp, #18]

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 80028de:	9b02      	ldr	r3, [sp, #8]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d801      	bhi.n	80028e8 <chVTDoSetI+0x48>
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 80028e4:	2302      	movs	r3, #2
 80028e6:	9302      	str	r3, [sp, #8]
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80028e8:	4b4a      	ldr	r3, [pc, #296]	; (8002a14 <chVTDoSetI+0x174>)
 80028ea:	69db      	ldr	r3, [r3, #28]
 80028ec:	4a4a      	ldr	r2, [pc, #296]	; (8002a18 <chVTDoSetI+0x178>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d124      	bne.n	800293c <chVTDoSetI+0x9c>

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.lasttime = now;
 80028f2:	4a48      	ldr	r2, [pc, #288]	; (8002a14 <chVTDoSetI+0x174>)
 80028f4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80028f8:	8513      	strh	r3, [r2, #40]	; 0x28
      ch.vtlist.next = vtp;
 80028fa:	4a46      	ldr	r2, [pc, #280]	; (8002a14 <chVTDoSetI+0x174>)
 80028fc:	9b03      	ldr	r3, [sp, #12]
 80028fe:	61d3      	str	r3, [r2, #28]
      ch.vtlist.prev = vtp;
 8002900:	4a44      	ldr	r2, [pc, #272]	; (8002a14 <chVTDoSetI+0x174>)
 8002902:	9b03      	ldr	r3, [sp, #12]
 8002904:	6213      	str	r3, [r2, #32]
      vtp->next = (virtual_timer_t *)&ch.vtlist;
 8002906:	9b03      	ldr	r3, [sp, #12]
 8002908:	4a43      	ldr	r2, [pc, #268]	; (8002a18 <chVTDoSetI+0x178>)
 800290a:	601a      	str	r2, [r3, #0]
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 800290c:	9b03      	ldr	r3, [sp, #12]
 800290e:	4a42      	ldr	r2, [pc, #264]	; (8002a18 <chVTDoSetI+0x178>)
 8002910:	605a      	str	r2, [r3, #4]
      vtp->delta = delay;
 8002912:	9b03      	ldr	r3, [sp, #12]
 8002914:	9a02      	ldr	r2, [sp, #8]
 8002916:	609a      	str	r2, [r3, #8]

#if CH_CFG_INTERVALS_SIZE > CH_CFG_ST_RESOLUTION
      /* The delta could be too large for the physical timer to handle.*/
      if (delay > (sysinterval_t)TIME_MAX_SYSTIME) {
 8002918:	9b02      	ldr	r3, [sp, #8]
 800291a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800291e:	d302      	bcc.n	8002926 <chVTDoSetI+0x86>
        delay = (sysinterval_t)TIME_MAX_SYSTIME;
 8002920:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002924:	9302      	str	r3, [sp, #8]
      }
#endif

      /* Being the first element in the list the alarm timer is started.*/
      port_timer_start_alarm(chTimeAddX(ch.vtlist.lasttime, delay));
 8002926:	4b3b      	ldr	r3, [pc, #236]	; (8002a14 <chVTDoSetI+0x174>)
 8002928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800292a:	9902      	ldr	r1, [sp, #8]
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff ff2f 	bl	8002790 <chTimeAddX.lto_priv.143>
 8002932:	4603      	mov	r3, r0
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff ff63 	bl	8002800 <port_timer_start_alarm>
 800293a:	e065      	b.n	8002a08 <chVTDoSetI+0x168>

      return;
    }

    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;
 800293c:	4b35      	ldr	r3, [pc, #212]	; (8002a14 <chVTDoSetI+0x174>)
 800293e:	69db      	ldr	r3, [r3, #28]
 8002940:	9307      	str	r3, [sp, #28]

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 8002942:	4b34      	ldr	r3, [pc, #208]	; (8002a14 <chVTDoSetI+0x174>)
 8002944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002946:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800294a:	4611      	mov	r1, r2
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff ff3f 	bl	80027d0 <chTimeDiffX.lto_priv.126>
 8002952:	4602      	mov	r2, r0
 8002954:	9b02      	ldr	r3, [sp, #8]
 8002956:	4413      	add	r3, r2
 8002958:	9306      	str	r3, [sp, #24]

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 800295a:	4b2e      	ldr	r3, [pc, #184]	; (8002a14 <chVTDoSetI+0x174>)
 800295c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800295e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8002962:	4611      	mov	r1, r2
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff ff33 	bl	80027d0 <chTimeDiffX.lto_priv.126>
 800296a:	4602      	mov	r2, r0
 800296c:	9b06      	ldr	r3, [sp, #24]
 800296e:	4293      	cmp	r3, r2
 8002970:	d208      	bcs.n	8002984 <chVTDoSetI+0xe4>
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
 8002972:	9b07      	ldr	r3, [sp, #28]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	9a06      	ldr	r2, [sp, #24]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	9306      	str	r3, [sp, #24]
      p = p->next;
 800297c:	9b07      	ldr	r3, [sp, #28]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	9307      	str	r3, [sp, #28]
 8002982:	e020      	b.n	80029c6 <chVTDoSetI+0x126>
    }
    else if (delta < p->delta) {
 8002984:	9b07      	ldr	r3, [sp, #28]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	9a06      	ldr	r2, [sp, #24]
 800298a:	429a      	cmp	r2, r3
 800298c:	d21b      	bcs.n	80029c6 <chVTDoSetI+0x126>
      sysinterval_t deadline_delta;

      /* A small delay that will become the first element in the delta list
         and next deadline.*/
      deadline_delta = delta;
 800298e:	9b06      	ldr	r3, [sp, #24]
 8002990:	9305      	str	r3, [sp, #20]
#if CH_CFG_INTERVALS_SIZE > CH_CFG_ST_RESOLUTION
      /* The delta could be too large for the physical timer to handle.*/
      if (deadline_delta > (sysinterval_t)TIME_MAX_SYSTIME) {
 8002992:	9b05      	ldr	r3, [sp, #20]
 8002994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002998:	d302      	bcc.n	80029a0 <chVTDoSetI+0x100>
        deadline_delta = (sysinterval_t)TIME_MAX_SYSTIME;
 800299a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800299e:	9305      	str	r3, [sp, #20]
      }
#endif
      port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, deadline_delta));
 80029a0:	4b1c      	ldr	r3, [pc, #112]	; (8002a14 <chVTDoSetI+0x174>)
 80029a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a4:	9905      	ldr	r1, [sp, #20]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff fef2 	bl	8002790 <chTimeAddX.lto_priv.143>
 80029ac:	4603      	mov	r3, r0
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff ff3e 	bl	8002830 <port_timer_set_alarm.lto_priv.139>
 80029b4:	e007      	b.n	80029c6 <chVTDoSetI+0x126>
     this timer. */
  while (p->delta < delta) {
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");

    delta -= p->delta;
 80029b6:	9b07      	ldr	r3, [sp, #28]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	9a06      	ldr	r2, [sp, #24]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	9306      	str	r3, [sp, #24]
    p = p->next;
 80029c0:	9b07      	ldr	r3, [sp, #28]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	9307      	str	r3, [sp, #28]
  while (p->delta < delta) {
 80029c6:	9b07      	ldr	r3, [sp, #28]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	9a06      	ldr	r2, [sp, #24]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d8f2      	bhi.n	80029b6 <chVTDoSetI+0x116>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
 80029d0:	9b03      	ldr	r3, [sp, #12]
 80029d2:	9a07      	ldr	r2, [sp, #28]
 80029d4:	601a      	str	r2, [r3, #0]
  vtp->prev = vtp->next->prev;
 80029d6:	9b03      	ldr	r3, [sp, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	9b03      	ldr	r3, [sp, #12]
 80029de:	605a      	str	r2, [r3, #4]
  vtp->prev->next = vtp;
 80029e0:	9b03      	ldr	r3, [sp, #12]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	9a03      	ldr	r2, [sp, #12]
 80029e6:	601a      	str	r2, [r3, #0]
  p->prev = vtp;
 80029e8:	9b07      	ldr	r3, [sp, #28]
 80029ea:	9a03      	ldr	r2, [sp, #12]
 80029ec:	605a      	str	r2, [r3, #4]
  vtp->delta = delta;
 80029ee:	9b03      	ldr	r3, [sp, #12]
 80029f0:	9a06      	ldr	r2, [sp, #24]
 80029f2:	609a      	str	r2, [r3, #8]

  /* Calculate new delta for the following entry.*/
  p->delta -= delta;
 80029f4:	9b07      	ldr	r3, [sp, #28]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	9b06      	ldr	r3, [sp, #24]
 80029fa:	1ad2      	subs	r2, r2, r3
 80029fc:	9b07      	ldr	r3, [sp, #28]
 80029fe:	609a      	str	r2, [r3, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
 8002a00:	4b04      	ldr	r3, [pc, #16]	; (8002a14 <chVTDoSetI+0x174>)
 8002a02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a06:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002a08:	b009      	add	sp, #36	; 0x24
 8002a0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a0e:	bf00      	nop
 8002a10:	08004c64 	.word	0x08004c64
 8002a14:	200009c8 	.word	0x200009c8
 8002a18:	200009e4 	.word	0x200009e4
 8002a1c:	00000000 	.word	0x00000000

08002a20 <chVTDoResetI>:
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 8002a20:	b510      	push	{r4, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();
 8002a26:	f7ff fe83 	bl	8002730 <chDbgCheckClassI>
  chDbgCheck(vtp != NULL);
 8002a2a:	9b01      	ldr	r3, [sp, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d102      	bne.n	8002a36 <chVTDoResetI+0x16>
 8002a30:	483a      	ldr	r0, [pc, #232]	; (8002b1c <chVTDoResetI+0xfc>)
 8002a32:	f7ff fd9d 	bl	8002570 <chSysHalt>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 8002a36:	4b3a      	ldr	r3, [pc, #232]	; (8002b20 <chVTDoResetI+0x100>)
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	9a01      	ldr	r2, [sp, #4]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d01b      	beq.n	8002a78 <chVTDoResetI+0x58>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 8002a40:	9b01      	ldr	r3, [sp, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	9a01      	ldr	r2, [sp, #4]
 8002a46:	6812      	ldr	r2, [r2, #0]
 8002a48:	601a      	str	r2, [r3, #0]
    vtp->next->prev = vtp->prev;
 8002a4a:	9b01      	ldr	r3, [sp, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	9a01      	ldr	r2, [sp, #4]
 8002a50:	6852      	ldr	r2, [r2, #4]
 8002a52:	605a      	str	r2, [r3, #4]
    vtp->func = NULL;
 8002a54:	9b01      	ldr	r3, [sp, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	60da      	str	r2, [r3, #12]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8002a5a:	9b01      	ldr	r3, [sp, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a31      	ldr	r2, [pc, #196]	; (8002b24 <chVTDoResetI+0x104>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d058      	beq.n	8002b16 <chVTDoResetI+0xf6>
      vtp->next->delta += vtp->delta;
 8002a64:	9b01      	ldr	r3, [sp, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6899      	ldr	r1, [r3, #8]
 8002a6a:	9b01      	ldr	r3, [sp, #4]
 8002a6c:	689a      	ldr	r2, [r3, #8]
 8002a6e:	9b01      	ldr	r3, [sp, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	440a      	add	r2, r1
 8002a74:	609a      	str	r2, [r3, #8]
 8002a76:	e04f      	b.n	8002b18 <chVTDoResetI+0xf8>

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
 8002a78:	9b01      	ldr	r3, [sp, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a28      	ldr	r2, [pc, #160]	; (8002b20 <chVTDoResetI+0x100>)
 8002a7e:	61d3      	str	r3, [r2, #28]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8002a80:	4b27      	ldr	r3, [pc, #156]	; (8002b20 <chVTDoResetI+0x100>)
 8002a82:	69db      	ldr	r3, [r3, #28]
 8002a84:	4a27      	ldr	r2, [pc, #156]	; (8002b24 <chVTDoResetI+0x104>)
 8002a86:	605a      	str	r2, [r3, #4]
  vtp->func = NULL;
 8002a88:	9b01      	ldr	r3, [sp, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	60da      	str	r2, [r3, #12]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8002a8e:	4b24      	ldr	r3, [pc, #144]	; (8002b20 <chVTDoResetI+0x100>)
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	4a24      	ldr	r2, [pc, #144]	; (8002b24 <chVTDoResetI+0x104>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d102      	bne.n	8002a9e <chVTDoResetI+0x7e>
    port_timer_stop_alarm();
 8002a98:	f7ff fec2 	bl	8002820 <port_timer_stop_alarm.lto_priv.141>
 8002a9c:	e03c      	b.n	8002b18 <chVTDoResetI+0xf8>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 8002a9e:	4b20      	ldr	r3, [pc, #128]	; (8002b20 <chVTDoResetI+0x100>)
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	6899      	ldr	r1, [r3, #8]
 8002aa4:	9b01      	ldr	r3, [sp, #4]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	4b1d      	ldr	r3, [pc, #116]	; (8002b20 <chVTDoResetI+0x100>)
 8002aaa:	69db      	ldr	r3, [r3, #28]
 8002aac:	440a      	add	r2, r1
 8002aae:	609a      	str	r2, [r3, #8]
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 8002ab0:	4b1b      	ldr	r3, [pc, #108]	; (8002b20 <chVTDoResetI+0x100>)
 8002ab2:	8d1c      	ldrh	r4, [r3, #40]	; 0x28
 8002ab4:	f7ff fed4 	bl	8002860 <chVTGetSystemTimeX.lto_priv.3>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	4619      	mov	r1, r3
 8002abc:	4620      	mov	r0, r4
 8002abe:	f7ff fe87 	bl	80027d0 <chTimeDiffX.lto_priv.126>
 8002ac2:	9002      	str	r0, [sp, #8]

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 8002ac4:	4b16      	ldr	r3, [pc, #88]	; (8002b20 <chVTDoResetI+0x100>)
 8002ac6:	69db      	ldr	r3, [r3, #28]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	9a02      	ldr	r2, [sp, #8]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d223      	bcs.n	8002b18 <chVTDoResetI+0xf8>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
 8002ad0:	4b13      	ldr	r3, [pc, #76]	; (8002b20 <chVTDoResetI+0x100>)
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	689a      	ldr	r2, [r3, #8]
 8002ad6:	9b02      	ldr	r3, [sp, #8]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	9303      	str	r3, [sp, #12]

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 8002adc:	9b03      	ldr	r3, [sp, #12]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d803      	bhi.n	8002aea <chVTDoResetI+0xca>
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8002ae2:	9b02      	ldr	r3, [sp, #8]
 8002ae4:	3302      	adds	r3, #2
 8002ae6:	9303      	str	r3, [sp, #12]
 8002ae8:	e00a      	b.n	8002b00 <chVTDoResetI+0xe0>
  }
  else {
    delta = nowdelta + delta;
 8002aea:	9a03      	ldr	r2, [sp, #12]
 8002aec:	9b02      	ldr	r3, [sp, #8]
 8002aee:	4413      	add	r3, r2
 8002af0:	9303      	str	r3, [sp, #12]
#if CH_CFG_INTERVALS_SIZE > CH_CFG_ST_RESOLUTION
    /* The delta could be too large for the physical timer to handle.*/
    if (delta > (sysinterval_t)TIME_MAX_SYSTIME) {
 8002af2:	9b03      	ldr	r3, [sp, #12]
 8002af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002af8:	d302      	bcc.n	8002b00 <chVTDoResetI+0xe0>
      delta = (sysinterval_t)TIME_MAX_SYSTIME;
 8002afa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002afe:	9303      	str	r3, [sp, #12]
    }
#endif
  }
  port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, delta));
 8002b00:	4b07      	ldr	r3, [pc, #28]	; (8002b20 <chVTDoResetI+0x100>)
 8002b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b04:	9903      	ldr	r1, [sp, #12]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff fe42 	bl	8002790 <chTimeAddX.lto_priv.143>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7ff fe8e 	bl	8002830 <port_timer_set_alarm.lto_priv.139>
 8002b14:	e000      	b.n	8002b18 <chVTDoResetI+0xf8>
      vtp->next->delta += vtp->delta;
 8002b16:	bf00      	nop
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8002b18:	b004      	add	sp, #16
 8002b1a:	bd10      	pop	{r4, pc}
 8002b1c:	08004c7c 	.word	0x08004c7c
 8002b20:	200009c8 	.word	0x200009c8
 8002b24:	200009e4 	.word	0x200009e4
	...

08002b30 <queue_init.lto_priv.91>:
static inline void queue_init(threads_queue_t *tqp) {
 8002b30:	b082      	sub	sp, #8
 8002b32:	9001      	str	r0, [sp, #4]
  tqp->next = (thread_t *)tqp;
 8002b34:	9b01      	ldr	r3, [sp, #4]
 8002b36:	9a01      	ldr	r2, [sp, #4]
 8002b38:	601a      	str	r2, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 8002b3a:	9b01      	ldr	r3, [sp, #4]
 8002b3c:	9a01      	ldr	r2, [sp, #4]
 8002b3e:	605a      	str	r2, [r3, #4]
}
 8002b40:	b002      	add	sp, #8
 8002b42:	4770      	bx	lr
	...

08002b50 <queue_fifo_remove.lto_priv.97>:
  tp->queue.prev             = tqp->prev;
  tp->queue.prev->queue.next = tp;
  tqp->prev                  = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
 8002b50:	b084      	sub	sp, #16
 8002b52:	9001      	str	r0, [sp, #4]
  thread_t *tp = tqp->next;
 8002b54:	9b01      	ldr	r3, [sp, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	9303      	str	r3, [sp, #12]

  tqp->next             = tp->queue.next;
 8002b5a:	9b03      	ldr	r3, [sp, #12]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	9b01      	ldr	r3, [sp, #4]
 8002b60:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8002b62:	9b01      	ldr	r3, [sp, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	9a01      	ldr	r2, [sp, #4]
 8002b68:	605a      	str	r2, [r3, #4]

  return tp;
 8002b6a:	9b03      	ldr	r3, [sp, #12]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	b004      	add	sp, #16
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
	...

08002b80 <queue_dequeue.lto_priv.121>:
  tqp->prev->queue.next = (thread_t *)tqp;

  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {
 8002b80:	b082      	sub	sp, #8
 8002b82:	9001      	str	r0, [sp, #4]

  tp->queue.prev->queue.next = tp->queue.next;
 8002b84:	9b01      	ldr	r3, [sp, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	9a01      	ldr	r2, [sp, #4]
 8002b8a:	6812      	ldr	r2, [r2, #0]
 8002b8c:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8002b8e:	9b01      	ldr	r3, [sp, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	9a01      	ldr	r2, [sp, #4]
 8002b94:	6852      	ldr	r2, [r2, #4]
 8002b96:	605a      	str	r2, [r3, #4]

  return tp;
 8002b98:	9b01      	ldr	r3, [sp, #4]
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	b002      	add	sp, #8
 8002b9e:	4770      	bx	lr

08002ba0 <chSysLockFromISR.lto_priv.137>:
static inline void chSysLockFromISR(void) {
 8002ba0:	b500      	push	{lr}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	2320      	movs	r3, #32
 8002ba6:	9301      	str	r3, [sp, #4]
 8002ba8:	9b01      	ldr	r3, [sp, #4]
 8002baa:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 8002bae:	f7ff fd3f 	bl	8002630 <_dbg_check_lock_from_isr>
}
 8002bb2:	b003      	add	sp, #12
 8002bb4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002bc0 <chSysUnlockFromISR.lto_priv.132>:
static inline void chSysUnlockFromISR(void) {
 8002bc0:	b500      	push	{lr}
 8002bc2:	b083      	sub	sp, #12
  _dbg_check_unlock_from_isr();
 8002bc4:	f7ff fd4c 	bl	8002660 <_dbg_check_unlock_from_isr>
 8002bc8:	2300      	movs	r3, #0
 8002bca:	9301      	str	r3, [sp, #4]
 8002bcc:	9b01      	ldr	r3, [sp, #4]
 8002bce:	f383 8811 	msr	BASEPRI, r3
}
 8002bd2:	b003      	add	sp, #12
 8002bd4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002be0 <chVTIsArmedI>:
static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {
 8002be0:	b500      	push	{lr}
 8002be2:	b083      	sub	sp, #12
 8002be4:	9001      	str	r0, [sp, #4]
  chDbgCheckClassI();
 8002be6:	f7ff fda3 	bl	8002730 <chDbgCheckClassI>
  return (bool)(vtp->func != NULL);
 8002bea:	9b01      	ldr	r3, [sp, #4]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	bf14      	ite	ne
 8002bf2:	2301      	movne	r3, #1
 8002bf4:	2300      	moveq	r3, #0
 8002bf6:	b2db      	uxtb	r3, r3
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	b003      	add	sp, #12
 8002bfc:	f85d fb04 	ldr.w	pc, [sp], #4

08002c00 <chSemFastSignalI.lto_priv.62>:
 *
 * @param[in] sp        pointer to a @p semaphore_t structure
 *
 * @iclass
 */
static inline void chSemFastSignalI(semaphore_t *sp) {
 8002c00:	b500      	push	{lr}
 8002c02:	b083      	sub	sp, #12
 8002c04:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();
 8002c06:	f7ff fd93 	bl	8002730 <chDbgCheckClassI>

  sp->cnt++;
 8002c0a:	9b01      	ldr	r3, [sp, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	1c5a      	adds	r2, r3, #1
 8002c10:	9b01      	ldr	r3, [sp, #4]
 8002c12:	609a      	str	r2, [r3, #8]
}
 8002c14:	b003      	add	sp, #12
 8002c16:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c1a:	bf00      	nop
 8002c1c:	0000      	movs	r0, r0
	...

08002c20 <_scheduler_init>:
/**
 * @brief   Scheduler initialization.
 *
 * @notapi
 */
void _scheduler_init(void) {
 8002c20:	b508      	push	{r3, lr}

  queue_init(&ch.rlist.queue);
 8002c22:	4806      	ldr	r0, [pc, #24]	; (8002c3c <_scheduler_init+0x1c>)
 8002c24:	f7ff ff84 	bl	8002b30 <queue_init.lto_priv.91>
  ch.rlist.prio = NOPRIO;
 8002c28:	4b04      	ldr	r3, [pc, #16]	; (8002c3c <_scheduler_init+0x1c>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	609a      	str	r2, [r3, #8]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.newer = (thread_t *)&ch.rlist;
 8002c2e:	4b03      	ldr	r3, [pc, #12]	; (8002c3c <_scheduler_init+0x1c>)
 8002c30:	4a02      	ldr	r2, [pc, #8]	; (8002c3c <_scheduler_init+0x1c>)
 8002c32:	611a      	str	r2, [r3, #16]
  ch.rlist.older = (thread_t *)&ch.rlist;
 8002c34:	4b01      	ldr	r3, [pc, #4]	; (8002c3c <_scheduler_init+0x1c>)
 8002c36:	4a01      	ldr	r2, [pc, #4]	; (8002c3c <_scheduler_init+0x1c>)
 8002c38:	615a      	str	r2, [r3, #20]
#endif
}
 8002c3a:	bd08      	pop	{r3, pc}
 8002c3c:	200009c8 	.word	0x200009c8

08002c40 <chSchReadyI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 8002c40:	b500      	push	{lr}
 8002c42:	b085      	sub	sp, #20
 8002c44:	9001      	str	r0, [sp, #4]
  thread_t *cp;

  chDbgCheckClassI();
 8002c46:	f7ff fd73 	bl	8002730 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 8002c4a:	9b01      	ldr	r3, [sp, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d102      	bne.n	8002c56 <chSchReadyI+0x16>
 8002c50:	4812      	ldr	r0, [pc, #72]	; (8002c9c <chSchReadyI+0x5c>)
 8002c52:	f7ff fc8d 	bl	8002570 <chSysHalt>
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8002c56:	9b01      	ldr	r3, [sp, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2020 	strb.w	r2, [r3, #32]
  cp = (thread_t *)&ch.rlist.queue;
 8002c5e:	4b10      	ldr	r3, [pc, #64]	; (8002ca0 <chSchReadyI+0x60>)
 8002c60:	9303      	str	r3, [sp, #12]
  do {
    cp = cp->queue.next;
 8002c62:	9b03      	ldr	r3, [sp, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	9303      	str	r3, [sp, #12]
  } while (cp->prio >= tp->prio);
 8002c68:	9b03      	ldr	r3, [sp, #12]
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	9b01      	ldr	r3, [sp, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d2f6      	bcs.n	8002c62 <chSchReadyI+0x22>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 8002c74:	9b01      	ldr	r3, [sp, #4]
 8002c76:	9a03      	ldr	r2, [sp, #12]
 8002c78:	601a      	str	r2, [r3, #0]
  tp->queue.prev             = cp->queue.prev;
 8002c7a:	9b03      	ldr	r3, [sp, #12]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	9b01      	ldr	r3, [sp, #4]
 8002c80:	605a      	str	r2, [r3, #4]
  tp->queue.prev->queue.next = tp;
 8002c82:	9b01      	ldr	r3, [sp, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	9a01      	ldr	r2, [sp, #4]
 8002c88:	601a      	str	r2, [r3, #0]
  cp->queue.prev             = tp;
 8002c8a:	9b03      	ldr	r3, [sp, #12]
 8002c8c:	9a01      	ldr	r2, [sp, #4]
 8002c8e:	605a      	str	r2, [r3, #4]

  return tp;
 8002c90:	9b01      	ldr	r3, [sp, #4]
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	b005      	add	sp, #20
 8002c96:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c9a:	bf00      	nop
 8002c9c:	08004c8c 	.word	0x08004c8c
 8002ca0:	200009c8 	.word	0x200009c8
	...

08002cb0 <chSchReadyAheadI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyAheadI(thread_t *tp) {
 8002cb0:	b500      	push	{lr}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	9001      	str	r0, [sp, #4]
  thread_t *cp;

  chDbgCheckClassI();
 8002cb6:	f7ff fd3b 	bl	8002730 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 8002cba:	9b01      	ldr	r3, [sp, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d102      	bne.n	8002cc6 <chSchReadyAheadI+0x16>
 8002cc0:	4812      	ldr	r0, [pc, #72]	; (8002d0c <chSchReadyAheadI+0x5c>)
 8002cc2:	f7ff fc55 	bl	8002570 <chSysHalt>
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8002cc6:	9b01      	ldr	r3, [sp, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2020 	strb.w	r2, [r3, #32]
  cp = (thread_t *)&ch.rlist.queue;
 8002cce:	4b10      	ldr	r3, [pc, #64]	; (8002d10 <chSchReadyAheadI+0x60>)
 8002cd0:	9303      	str	r3, [sp, #12]
  do {
    cp = cp->queue.next;
 8002cd2:	9b03      	ldr	r3, [sp, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	9303      	str	r3, [sp, #12]
  } while (cp->prio > tp->prio);
 8002cd8:	9b03      	ldr	r3, [sp, #12]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	9b01      	ldr	r3, [sp, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d8f6      	bhi.n	8002cd2 <chSchReadyAheadI+0x22>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 8002ce4:	9b01      	ldr	r3, [sp, #4]
 8002ce6:	9a03      	ldr	r2, [sp, #12]
 8002ce8:	601a      	str	r2, [r3, #0]
  tp->queue.prev             = cp->queue.prev;
 8002cea:	9b03      	ldr	r3, [sp, #12]
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	9b01      	ldr	r3, [sp, #4]
 8002cf0:	605a      	str	r2, [r3, #4]
  tp->queue.prev->queue.next = tp;
 8002cf2:	9b01      	ldr	r3, [sp, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	9a01      	ldr	r2, [sp, #4]
 8002cf8:	601a      	str	r2, [r3, #0]
  cp->queue.prev             = tp;
 8002cfa:	9b03      	ldr	r3, [sp, #12]
 8002cfc:	9a01      	ldr	r2, [sp, #4]
 8002cfe:	605a      	str	r2, [r3, #4]

  return tp;
 8002d00:	9b01      	ldr	r3, [sp, #4]
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	b005      	add	sp, #20
 8002d06:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d0a:	bf00      	nop
 8002d0c:	08004c98 	.word	0x08004c98
 8002d10:	200009c8 	.word	0x200009c8
	...

08002d20 <chSchGoSleepS>:
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8002d20:	b500      	push	{lr}
 8002d22:	b085      	sub	sp, #20
 8002d24:	4603      	mov	r3, r0
 8002d26:	f88d 3007 	strb.w	r3, [sp, #7]
  thread_t *otp = currp;
 8002d2a:	4b0f      	ldr	r3, [pc, #60]	; (8002d68 <chSchGoSleepS+0x48>)
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	9303      	str	r3, [sp, #12]

  chDbgCheckClassS();
 8002d30:	f7ff fd16 	bl	8002760 <chDbgCheckClassS>

  /* New state.*/
  otp->state = newstate;
 8002d34:	9b03      	ldr	r3, [sp, #12]
 8002d36:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8002d3a:	f883 2020 	strb.w	r2, [r3, #32]
     time quantum when it will wakeup.*/
  otp->ticks = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 8002d3e:	480a      	ldr	r0, [pc, #40]	; (8002d68 <chSchGoSleepS+0x48>)
 8002d40:	f7ff ff06 	bl	8002b50 <queue_fifo_remove.lto_priv.97>
 8002d44:	4602      	mov	r2, r0
 8002d46:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <chSchGoSleepS+0x48>)
 8002d48:	619a      	str	r2, [r3, #24]
  currp->state = CH_STATE_CURRENT;
 8002d4a:	4b07      	ldr	r3, [pc, #28]	; (8002d68 <chSchGoSleepS+0x48>)
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2020 	strb.w	r2, [r3, #32]
  if (currp->prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8002d54:	4b04      	ldr	r3, [pc, #16]	; (8002d68 <chSchGoSleepS+0x48>)
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	9903      	ldr	r1, [sp, #12]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7fd fa70 	bl	8000240 <_port_switch>
}
 8002d60:	b005      	add	sp, #20
 8002d62:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d66:	bf00      	nop
 8002d68:	200009c8 	.word	0x200009c8
 8002d6c:	00000000 	.word	0x00000000

08002d70 <wakeup>:

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 8002d70:	b500      	push	{lr}
 8002d72:	b085      	sub	sp, #20
 8002d74:	9001      	str	r0, [sp, #4]
  thread_t *tp = (thread_t *)p;
 8002d76:	9b01      	ldr	r3, [sp, #4]
 8002d78:	9303      	str	r3, [sp, #12]

  chSysLockFromISR();
 8002d7a:	f7ff ff11 	bl	8002ba0 <chSysLockFromISR.lto_priv.137>
  switch (tp->state) {
 8002d7e:	9b03      	ldr	r3, [sp, #12]
 8002d80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d84:	2b07      	cmp	r3, #7
 8002d86:	d823      	bhi.n	8002dd0 <wakeup+0x60>
 8002d88:	a201      	add	r2, pc, #4	; (adr r2, 8002d90 <wakeup+0x20>)
 8002d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d8e:	bf00      	nop
 8002d90:	08002db1 	.word	0x08002db1
 8002d94:	08002dd1 	.word	0x08002dd1
 8002d98:	08002dd1 	.word	0x08002dd1
 8002d9c:	08002db7 	.word	0x08002db7
 8002da0:	08002dcb 	.word	0x08002dcb
 8002da4:	08002dc1 	.word	0x08002dc1
 8002da8:	08002dd1 	.word	0x08002dd1
 8002dac:	08002dcb 	.word	0x08002dcb
  case CH_STATE_READY:
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
 8002db0:	f7ff ff06 	bl	8002bc0 <chSysUnlockFromISR.lto_priv.132>
 8002db4:	e015      	b.n	8002de2 <wakeup+0x72>
    return;
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
 8002db6:	9b03      	ldr	r3, [sp, #12]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	2200      	movs	r2, #0
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	e007      	b.n	8002dd0 <wakeup+0x60>
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
 8002dc0:	9b03      	ldr	r3, [sp, #12]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff ff1b 	bl	8002c00 <chSemFastSignalI.lto_priv.62>
    /* Falls through.*/
#if (CH_CFG_USE_CONDVARS == TRUE) && (CH_CFG_USE_CONDVARS_TIMEOUT == TRUE)
  case CH_STATE_WTCOND:
#endif
    /* States requiring dequeuing.*/
    (void) queue_dequeue(tp);
 8002dca:	9803      	ldr	r0, [sp, #12]
 8002dcc:	f7ff fed8 	bl	8002b80 <queue_dequeue.lto_priv.121>
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
 8002dd0:	9b03      	ldr	r3, [sp, #12]
 8002dd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002dd6:	625a      	str	r2, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8002dd8:	9803      	ldr	r0, [sp, #12]
 8002dda:	f7ff ff31 	bl	8002c40 <chSchReadyI>
  chSysUnlockFromISR();
 8002dde:	f7ff feef 	bl	8002bc0 <chSysUnlockFromISR.lto_priv.132>
}
 8002de2:	b005      	add	sp, #20
 8002de4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002df0 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8002df0:	b500      	push	{lr}
 8002df2:	b089      	sub	sp, #36	; 0x24
 8002df4:	4603      	mov	r3, r0
 8002df6:	9100      	str	r1, [sp, #0]
 8002df8:	f88d 3007 	strb.w	r3, [sp, #7]

  chDbgCheckClassS();
 8002dfc:	f7ff fcb0 	bl	8002760 <chDbgCheckClassS>

  if (TIME_INFINITE != timeout) {
 8002e00:	9b00      	ldr	r3, [sp, #0]
 8002e02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e06:	d017      	beq.n	8002e38 <chSchGoSleepTimeoutS+0x48>
    virtual_timer_t vt;

    chVTDoSetI(&vt, timeout, wakeup, currp);
 8002e08:	4b11      	ldr	r3, [pc, #68]	; (8002e50 <chSchGoSleepTimeoutS+0x60>)
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	a803      	add	r0, sp, #12
 8002e0e:	4a11      	ldr	r2, [pc, #68]	; (8002e54 <chSchGoSleepTimeoutS+0x64>)
 8002e10:	9900      	ldr	r1, [sp, #0]
 8002e12:	f7ff fd45 	bl	80028a0 <chVTDoSetI>
    chSchGoSleepS(newstate);
 8002e16:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7ff ff80 	bl	8002d20 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8002e20:	ab03      	add	r3, sp, #12
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7ff fedc 	bl	8002be0 <chVTIsArmedI>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d009      	beq.n	8002e42 <chSchGoSleepTimeoutS+0x52>
      chVTDoResetI(&vt);
 8002e2e:	ab03      	add	r3, sp, #12
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff fdf5 	bl	8002a20 <chVTDoResetI>
 8002e36:	e004      	b.n	8002e42 <chSchGoSleepTimeoutS+0x52>
    }
  }
  else {
    chSchGoSleepS(newstate);
 8002e38:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff ff6f 	bl	8002d20 <chSchGoSleepS>
  }

  return currp->u.rdymsg;
 8002e42:	4b03      	ldr	r3, [pc, #12]	; (8002e50 <chSchGoSleepTimeoutS+0x60>)
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	b009      	add	sp, #36	; 0x24
 8002e4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e50:	200009c8 	.word	0x200009c8
 8002e54:	08002d71 	.word	0x08002d71
	...

08002e60 <chSchWakeupS>:
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8002e60:	b500      	push	{lr}
 8002e62:	b085      	sub	sp, #20
 8002e64:	9001      	str	r0, [sp, #4]
 8002e66:	9100      	str	r1, [sp, #0]
  thread_t *otp = currp;
 8002e68:	4b11      	ldr	r3, [pc, #68]	; (8002eb0 <chSchWakeupS+0x50>)
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	9303      	str	r3, [sp, #12]

  chDbgCheckClassS();
 8002e6e:	f7ff fc77 	bl	8002760 <chDbgCheckClassS>
              (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->u.rdymsg = msg;
 8002e72:	9b01      	ldr	r3, [sp, #4]
 8002e74:	9a00      	ldr	r2, [sp, #0]
 8002e76:	625a      	str	r2, [r3, #36]	; 0x24

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->prio <= otp->prio) {
 8002e78:	9b01      	ldr	r3, [sp, #4]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	9b03      	ldr	r3, [sp, #12]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d803      	bhi.n	8002e8c <chSchWakeupS+0x2c>
    (void) chSchReadyI(ntp);
 8002e84:	9801      	ldr	r0, [sp, #4]
 8002e86:	f7ff fedb 	bl	8002c40 <chSchReadyI>
 8002e8a:	e00e      	b.n	8002eaa <chSchWakeupS+0x4a>
  }
  else {
    otp = chSchReadyAheadI(otp);
 8002e8c:	9803      	ldr	r0, [sp, #12]
 8002e8e:	f7ff ff0f 	bl	8002cb0 <chSchReadyAheadI>
 8002e92:	9003      	str	r0, [sp, #12]
    if (otp->prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }

    /* The extracted thread is marked as current.*/
    currp = ntp;
 8002e94:	4a06      	ldr	r2, [pc, #24]	; (8002eb0 <chSchWakeupS+0x50>)
 8002e96:	9b01      	ldr	r3, [sp, #4]
 8002e98:	6193      	str	r3, [r2, #24]
    ntp->state = CH_STATE_CURRENT;
 8002e9a:	9b01      	ldr	r3, [sp, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
 8002ea2:	9903      	ldr	r1, [sp, #12]
 8002ea4:	9801      	ldr	r0, [sp, #4]
 8002ea6:	f7fd f9cb 	bl	8000240 <_port_switch>
  }
}
 8002eaa:	b005      	add	sp, #20
 8002eac:	f85d fb04 	ldr.w	pc, [sp], #4
 8002eb0:	200009c8 	.word	0x200009c8
	...

08002ec0 <chSchIsPreemptionRequired>:
 *                      immediately.
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
 8002ec0:	b082      	sub	sp, #8
  tprio_t p1 = firstprio(&ch.rlist.queue);
 8002ec2:	4b09      	ldr	r3, [pc, #36]	; (8002ee8 <chSchIsPreemptionRequired+0x28>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	9301      	str	r3, [sp, #4]
  tprio_t p2 = currp->prio;
 8002eca:	4b07      	ldr	r3, [pc, #28]	; (8002ee8 <chSchIsPreemptionRequired+0x28>)
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	9300      	str	r3, [sp, #0]
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->ticks > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
#else
  /* If the round robin preemption feature is not enabled then performs a
     simpler comparison.*/
  return p1 > p2;
 8002ed2:	9a01      	ldr	r2, [sp, #4]
 8002ed4:	9b00      	ldr	r3, [sp, #0]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	bf8c      	ite	hi
 8002eda:	2301      	movhi	r3, #1
 8002edc:	2300      	movls	r3, #0
 8002ede:	b2db      	uxtb	r3, r3
#endif
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	b002      	add	sp, #8
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	200009c8 	.word	0x200009c8
 8002eec:	00000000 	.word	0x00000000

08002ef0 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
 8002ef0:	b500      	push	{lr}
 8002ef2:	b083      	sub	sp, #12
  thread_t *otp = currp;
 8002ef4:	4b0d      	ldr	r3, [pc, #52]	; (8002f2c <chSchDoReschedule+0x3c>)
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	9301      	str	r3, [sp, #4]

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 8002efa:	480c      	ldr	r0, [pc, #48]	; (8002f2c <chSchDoReschedule+0x3c>)
 8002efc:	f7ff fe28 	bl	8002b50 <queue_fifo_remove.lto_priv.97>
 8002f00:	4602      	mov	r2, r0
 8002f02:	4b0a      	ldr	r3, [pc, #40]	; (8002f2c <chSchDoReschedule+0x3c>)
 8002f04:	619a      	str	r2, [r3, #24]
  currp->state = CH_STATE_CURRENT;
 8002f06:	4b09      	ldr	r3, [pc, #36]	; (8002f2c <chSchDoReschedule+0x3c>)
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2020 	strb.w	r2, [r3, #32]
    otp = chSchReadyAheadI(otp);
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
 8002f10:	9801      	ldr	r0, [sp, #4]
 8002f12:	f7ff fecd 	bl	8002cb0 <chSchReadyAheadI>
 8002f16:	9001      	str	r0, [sp, #4]
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8002f18:	4b04      	ldr	r3, [pc, #16]	; (8002f2c <chSchDoReschedule+0x3c>)
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	9901      	ldr	r1, [sp, #4]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fd f98e 	bl	8000240 <_port_switch>
}
 8002f24:	b003      	add	sp, #12
 8002f26:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f2a:	bf00      	nop
 8002f2c:	200009c8 	.word	0x200009c8

08002f30 <list_init>:
static inline void list_init(threads_list_t *tlp) {
 8002f30:	b082      	sub	sp, #8
 8002f32:	9001      	str	r0, [sp, #4]
  tlp->next = (thread_t *)tlp;
 8002f34:	9b01      	ldr	r3, [sp, #4]
 8002f36:	9a01      	ldr	r2, [sp, #4]
 8002f38:	601a      	str	r2, [r3, #0]
}
 8002f3a:	b002      	add	sp, #8
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop

08002f40 <list_notempty>:
static inline bool list_notempty(threads_list_t *tlp) {
 8002f40:	b082      	sub	sp, #8
 8002f42:	9001      	str	r0, [sp, #4]
  return (bool)(tlp->next != (thread_t *)tlp);
 8002f44:	9b01      	ldr	r3, [sp, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	9a01      	ldr	r2, [sp, #4]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	bf14      	ite	ne
 8002f4e:	2301      	movne	r3, #1
 8002f50:	2300      	moveq	r3, #0
 8002f52:	b2db      	uxtb	r3, r3
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	b002      	add	sp, #8
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	0000      	movs	r0, r0
	...

08002f60 <queue_init.lto_priv.92>:
static inline void queue_init(threads_queue_t *tqp) {
 8002f60:	b082      	sub	sp, #8
 8002f62:	9001      	str	r0, [sp, #4]
  tqp->next = (thread_t *)tqp;
 8002f64:	9b01      	ldr	r3, [sp, #4]
 8002f66:	9a01      	ldr	r2, [sp, #4]
 8002f68:	601a      	str	r2, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 8002f6a:	9b01      	ldr	r3, [sp, #4]
 8002f6c:	9a01      	ldr	r2, [sp, #4]
 8002f6e:	605a      	str	r2, [r3, #4]
}
 8002f70:	b002      	add	sp, #8
 8002f72:	4770      	bx	lr
	...

08002f80 <queue_notempty.lto_priv.117>:
static inline bool queue_notempty(const threads_queue_t *tqp) {
 8002f80:	b082      	sub	sp, #8
 8002f82:	9001      	str	r0, [sp, #4]
  return (bool)(tqp->next != (const thread_t *)tqp);
 8002f84:	9b01      	ldr	r3, [sp, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	9a01      	ldr	r2, [sp, #4]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	bf14      	ite	ne
 8002f8e:	2301      	movne	r3, #1
 8002f90:	2300      	moveq	r3, #0
 8002f92:	b2db      	uxtb	r3, r3
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	b002      	add	sp, #8
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	0000      	movs	r0, r0
	...

08002fa0 <list_remove>:
static inline thread_t *list_remove(threads_list_t *tlp) {
 8002fa0:	b084      	sub	sp, #16
 8002fa2:	9001      	str	r0, [sp, #4]
  thread_t *tp = tlp->next;
 8002fa4:	9b01      	ldr	r3, [sp, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	9303      	str	r3, [sp, #12]
  tlp->next = tp->queue.next;
 8002faa:	9b03      	ldr	r3, [sp, #12]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	9b01      	ldr	r3, [sp, #4]
 8002fb0:	601a      	str	r2, [r3, #0]
  return tp;
 8002fb2:	9b03      	ldr	r3, [sp, #12]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	b004      	add	sp, #16
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	0000      	movs	r0, r0
	...

08002fc0 <queue_insert.lto_priv.103>:
static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {
 8002fc0:	b082      	sub	sp, #8
 8002fc2:	9001      	str	r0, [sp, #4]
 8002fc4:	9100      	str	r1, [sp, #0]
  tp->queue.next             = (thread_t *)tqp;
 8002fc6:	9b01      	ldr	r3, [sp, #4]
 8002fc8:	9a00      	ldr	r2, [sp, #0]
 8002fca:	601a      	str	r2, [r3, #0]
  tp->queue.prev             = tqp->prev;
 8002fcc:	9b00      	ldr	r3, [sp, #0]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	9b01      	ldr	r3, [sp, #4]
 8002fd2:	605a      	str	r2, [r3, #4]
  tp->queue.prev->queue.next = tp;
 8002fd4:	9b01      	ldr	r3, [sp, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	9a01      	ldr	r2, [sp, #4]
 8002fda:	601a      	str	r2, [r3, #0]
  tqp->prev                  = tp;
 8002fdc:	9b00      	ldr	r3, [sp, #0]
 8002fde:	9a01      	ldr	r2, [sp, #4]
 8002fe0:	605a      	str	r2, [r3, #4]
}
 8002fe2:	b002      	add	sp, #8
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
	...

08002ff0 <queue_fifo_remove.lto_priv.98>:
static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
 8002ff0:	b084      	sub	sp, #16
 8002ff2:	9001      	str	r0, [sp, #4]
  thread_t *tp = tqp->next;
 8002ff4:	9b01      	ldr	r3, [sp, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	9303      	str	r3, [sp, #12]
  tqp->next             = tp->queue.next;
 8002ffa:	9b03      	ldr	r3, [sp, #12]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	9b01      	ldr	r3, [sp, #4]
 8003000:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8003002:	9b01      	ldr	r3, [sp, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	9a01      	ldr	r2, [sp, #4]
 8003008:	605a      	str	r2, [r3, #4]
  return tp;
 800300a:	9b03      	ldr	r3, [sp, #12]
}
 800300c:	4618      	mov	r0, r3
 800300e:	b004      	add	sp, #16
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
	...

08003020 <chSysLock.lto_priv.35>:
static inline void chSysLock(void) {
 8003020:	b500      	push	{lr}
 8003022:	b083      	sub	sp, #12
 8003024:	2320      	movs	r3, #32
 8003026:	9301      	str	r3, [sp, #4]
 8003028:	9b01      	ldr	r3, [sp, #4]
 800302a:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800302e:	f7ff facf 	bl	80025d0 <_dbg_check_lock>
}
 8003032:	b003      	add	sp, #12
 8003034:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003040 <chSysUnlock.lto_priv.13>:
static inline void chSysUnlock(void) {
 8003040:	b500      	push	{lr}
 8003042:	b083      	sub	sp, #12
  _dbg_check_unlock();
 8003044:	f7ff fadc 	bl	8002600 <_dbg_check_unlock>
 8003048:	2300      	movs	r3, #0
 800304a:	9301      	str	r3, [sp, #4]
 800304c:	9b01      	ldr	r3, [sp, #4]
 800304e:	f383 8811 	msr	BASEPRI, r3
}
 8003052:	b003      	add	sp, #12
 8003054:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003060 <chThdGetSelfX.lto_priv.113>:
  return ch.rlist.current;
 8003060:	4b01      	ldr	r3, [pc, #4]	; (8003068 <chThdGetSelfX.lto_priv.113+0x8>)
 8003062:	699b      	ldr	r3, [r3, #24]
}
 8003064:	4618      	mov	r0, r3
 8003066:	4770      	bx	lr
 8003068:	200009c8 	.word	0x200009c8
 800306c:	00000000 	.word	0x00000000

08003070 <chThdSleepS>:
static inline void chThdSleepS(sysinterval_t ticks) {
 8003070:	b500      	push	{lr}
 8003072:	b083      	sub	sp, #12
 8003074:	9001      	str	r0, [sp, #4]
  chDbgCheck(ticks != TIME_IMMEDIATE);
 8003076:	9b01      	ldr	r3, [sp, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d102      	bne.n	8003082 <chThdSleepS+0x12>
 800307c:	4804      	ldr	r0, [pc, #16]	; (8003090 <chThdSleepS+0x20>)
 800307e:	f7ff fa77 	bl	8002570 <chSysHalt>
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8003082:	9901      	ldr	r1, [sp, #4]
 8003084:	2008      	movs	r0, #8
 8003086:	f7ff feb3 	bl	8002df0 <chSchGoSleepTimeoutS>
}
 800308a:	b003      	add	sp, #12
 800308c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003090:	08004ce0 	.word	0x08004ce0
	...

080030a0 <chThdDoDequeueNextI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
static inline void chThdDoDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 80030a0:	b500      	push	{lr}
 80030a2:	b085      	sub	sp, #20
 80030a4:	9001      	str	r0, [sp, #4]
 80030a6:	9100      	str	r1, [sp, #0]
  thread_t *tp;

  chDbgAssert(queue_notempty(tqp), "empty queue");

  tp = queue_fifo_remove(tqp);
 80030a8:	9801      	ldr	r0, [sp, #4]
 80030aa:	f7ff ffa1 	bl	8002ff0 <queue_fifo_remove.lto_priv.98>
 80030ae:	9003      	str	r0, [sp, #12]

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 80030b0:	9b03      	ldr	r3, [sp, #12]
 80030b2:	9a00      	ldr	r2, [sp, #0]
 80030b4:	625a      	str	r2, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 80030b6:	9803      	ldr	r0, [sp, #12]
 80030b8:	f7ff fdc2 	bl	8002c40 <chSchReadyI>
}
 80030bc:	b005      	add	sp, #20
 80030be:	f85d fb04 	ldr.w	pc, [sp], #4
 80030c2:	bf00      	nop
	...

080030d0 <_thread_init>:
 * @param[in] prio      the priority level for the new thread
 * @return              The same thread pointer passed as parameter.
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {
 80030d0:	b500      	push	{lr}
 80030d2:	b085      	sub	sp, #20
 80030d4:	9003      	str	r0, [sp, #12]
 80030d6:	9102      	str	r1, [sp, #8]
 80030d8:	9201      	str	r2, [sp, #4]

  tp->prio      = prio;
 80030da:	9b03      	ldr	r3, [sp, #12]
 80030dc:	9a01      	ldr	r2, [sp, #4]
 80030de:	609a      	str	r2, [r3, #8]
  tp->state     = CH_STATE_WTSTART;
 80030e0:	9b03      	ldr	r3, [sp, #12]
 80030e2:	2202      	movs	r2, #2
 80030e4:	f883 2020 	strb.w	r2, [r3, #32]
  tp->flags     = CH_FLAG_MODE_STATIC;
 80030e8:	9b03      	ldr	r3, [sp, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
#if CH_CFG_TIME_QUANTUM > 0
  tp->ticks     = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
 80030f0:	9b03      	ldr	r3, [sp, #12]
 80030f2:	9a01      	ldr	r2, [sp, #4]
 80030f4:	63da      	str	r2, [r3, #60]	; 0x3c
  tp->mtxlist   = NULL;
 80030f6:	9b03      	ldr	r3, [sp, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	639a      	str	r2, [r3, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->epending  = (eventmask_t)0;
 80030fc:	9b03      	ldr	r3, [sp, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	635a      	str	r2, [r3, #52]	; 0x34
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
 8003102:	9b03      	ldr	r3, [sp, #12]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  tp->name      = name;
 800310a:	9b03      	ldr	r3, [sp, #12]
 800310c:	9a02      	ldr	r2, [sp, #8]
 800310e:	619a      	str	r2, [r3, #24]
  REG_INSERT(tp);
 8003110:	9b03      	ldr	r3, [sp, #12]
 8003112:	4a0e      	ldr	r2, [pc, #56]	; (800314c <_thread_init+0x7c>)
 8003114:	611a      	str	r2, [r3, #16]
 8003116:	4b0d      	ldr	r3, [pc, #52]	; (800314c <_thread_init+0x7c>)
 8003118:	695a      	ldr	r2, [r3, #20]
 800311a:	9b03      	ldr	r3, [sp, #12]
 800311c:	615a      	str	r2, [r3, #20]
 800311e:	9b03      	ldr	r3, [sp, #12]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	9a03      	ldr	r2, [sp, #12]
 8003124:	611a      	str	r2, [r3, #16]
 8003126:	4a09      	ldr	r2, [pc, #36]	; (800314c <_thread_init+0x7c>)
 8003128:	9b03      	ldr	r3, [sp, #12]
 800312a:	6153      	str	r3, [r2, #20]
#else
  (void)name;
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->waiting);
 800312c:	9b03      	ldr	r3, [sp, #12]
 800312e:	3328      	adds	r3, #40	; 0x28
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff fefd 	bl	8002f30 <list_init>
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->msgqueue);
 8003136:	9b03      	ldr	r3, [sp, #12]
 8003138:	332c      	adds	r3, #44	; 0x2c
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff ff10 	bl	8002f60 <queue_init.lto_priv.92>
#endif
#if CH_DBG_STATISTICS == TRUE
  chTMObjectInit(&tp->stats);
#endif
  CH_CFG_THREAD_INIT_HOOK(tp);
  return tp;
 8003140:	9b03      	ldr	r3, [sp, #12]
}
 8003142:	4618      	mov	r0, r3
 8003144:	b005      	add	sp, #20
 8003146:	f85d fb04 	ldr.w	pc, [sp], #4
 800314a:	bf00      	nop
 800314c:	200009c8 	.word	0x200009c8

08003150 <chThdCreateSuspendedI>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
 8003150:	b500      	push	{lr}
 8003152:	b085      	sub	sp, #20
 8003154:	9001      	str	r0, [sp, #4]
  thread_t *tp;

  chDbgCheckClassI();
 8003156:	f7ff faeb 	bl	8002730 <chDbgCheckClassI>
  chDbgCheck(tdp != NULL);
 800315a:	9b01      	ldr	r3, [sp, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d102      	bne.n	8003166 <chThdCreateSuspendedI+0x16>
 8003160:	4829      	ldr	r0, [pc, #164]	; (8003208 <chThdCreateSuspendedI+0xb8>)
 8003162:	f7ff fa05 	bl	8002570 <chSysHalt>
  chDbgCheck(MEM_IS_ALIGNED(tdp->wbase, PORT_WORKING_AREA_ALIGN) &&
 8003166:	9b01      	ldr	r3, [sp, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f003 0307 	and.w	r3, r3, #7
 800316e:	2b00      	cmp	r3, #0
 8003170:	d113      	bne.n	800319a <chThdCreateSuspendedI+0x4a>
 8003172:	9b01      	ldr	r3, [sp, #4]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 0307 	and.w	r3, r3, #7
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10d      	bne.n	800319a <chThdCreateSuspendedI+0x4a>
 800317e:	9b01      	ldr	r3, [sp, #4]
 8003180:	689a      	ldr	r2, [r3, #8]
 8003182:	9b01      	ldr	r3, [sp, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	429a      	cmp	r2, r3
 8003188:	d907      	bls.n	800319a <chThdCreateSuspendedI+0x4a>
 800318a:	9b01      	ldr	r3, [sp, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	461a      	mov	r2, r3
 8003190:	9b01      	ldr	r3, [sp, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2bc7      	cmp	r3, #199	; 0xc7
 8003198:	d802      	bhi.n	80031a0 <chThdCreateSuspendedI+0x50>
 800319a:	481b      	ldr	r0, [pc, #108]	; (8003208 <chThdCreateSuspendedI+0xb8>)
 800319c:	f7ff f9e8 	bl	8002570 <chSysHalt>
             MEM_IS_ALIGNED(tdp->wend, PORT_STACK_ALIGN) &&
             (tdp->wend > tdp->wbase) &&
             (((size_t)tdp->wend - (size_t)tdp->wbase) >= THD_WORKING_AREA_SIZE(0)));
  chDbgCheck((tdp->prio <= HIGHPRIO) && (tdp->funcp != NULL));
 80031a0:	9b01      	ldr	r3, [sp, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	2bff      	cmp	r3, #255	; 0xff
 80031a6:	d803      	bhi.n	80031b0 <chThdCreateSuspendedI+0x60>
 80031a8:	9b01      	ldr	r3, [sp, #4]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d102      	bne.n	80031b6 <chThdCreateSuspendedI+0x66>
 80031b0:	4815      	ldr	r0, [pc, #84]	; (8003208 <chThdCreateSuspendedI+0xb8>)
 80031b2:	f7ff f9dd 	bl	8002570 <chSysHalt>

  /* The thread structure is laid out in the upper part of the thread
     workspace. The thread position structure is aligned to the required
     stack alignment because it represents the stack top.*/
  tp = (thread_t *)((uint8_t *)tdp->wend -
 80031b6:	9b01      	ldr	r3, [sp, #4]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	3b48      	subs	r3, #72	; 0x48
 80031bc:	9303      	str	r3, [sp, #12]
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
 80031be:	9b01      	ldr	r3, [sp, #4]
 80031c0:	685a      	ldr	r2, [r3, #4]
 80031c2:	9b03      	ldr	r3, [sp, #12]
 80031c4:	61da      	str	r2, [r3, #28]
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80031c6:	9b03      	ldr	r3, [sp, #12]
 80031c8:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
 80031cc:	9b03      	ldr	r3, [sp, #12]
 80031ce:	60da      	str	r2, [r3, #12]
 80031d0:	9b01      	ldr	r3, [sp, #4]
 80031d2:	691a      	ldr	r2, [r3, #16]
 80031d4:	9b03      	ldr	r3, [sp, #12]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	9b01      	ldr	r3, [sp, #4]
 80031dc:	695a      	ldr	r2, [r3, #20]
 80031de:	9b03      	ldr	r3, [sp, #12]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	605a      	str	r2, [r3, #4]
 80031e4:	9b03      	ldr	r3, [sp, #12]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	4a08      	ldr	r2, [pc, #32]	; (800320c <chThdCreateSuspendedI+0xbc>)
 80031ea:	621a      	str	r2, [r3, #32]

  /* The driver object is initialized but not started.*/
  return _thread_init(tp, tdp->name, tdp->prio);
 80031ec:	9b01      	ldr	r3, [sp, #4]
 80031ee:	6819      	ldr	r1, [r3, #0]
 80031f0:	9b01      	ldr	r3, [sp, #4]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	461a      	mov	r2, r3
 80031f6:	9803      	ldr	r0, [sp, #12]
 80031f8:	f7ff ff6a 	bl	80030d0 <_thread_init>
 80031fc:	4603      	mov	r3, r0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	b005      	add	sp, #20
 8003202:	f85d fb04 	ldr.w	pc, [sp], #4
 8003206:	bf00      	nop
 8003208:	08004cb4 	.word	0x08004cb4
 800320c:	08000251 	.word	0x08000251

08003210 <chThdCreate>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreate(const thread_descriptor_t *tdp) {
 8003210:	b500      	push	{lr}
 8003212:	b085      	sub	sp, #20
 8003214:	9001      	str	r0, [sp, #4]
  _thread_memfill((uint8_t *)tdp->wbase,
                  (uint8_t *)tdp->wend,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
 8003216:	f7ff ff03 	bl	8003020 <chSysLock.lto_priv.35>
  tp = chThdCreateSuspendedI(tdp);
 800321a:	9801      	ldr	r0, [sp, #4]
 800321c:	f7ff ff98 	bl	8003150 <chThdCreateSuspendedI>
 8003220:	9003      	str	r0, [sp, #12]
  chSchWakeupS(tp, MSG_OK);
 8003222:	2100      	movs	r1, #0
 8003224:	9803      	ldr	r0, [sp, #12]
 8003226:	f7ff fe1b 	bl	8002e60 <chSchWakeupS>
  chSysUnlock();
 800322a:	f7ff ff09 	bl	8003040 <chSysUnlock.lto_priv.13>

  return tp;
 800322e:	9b03      	ldr	r3, [sp, #12]
}
 8003230:	4618      	mov	r0, r3
 8003232:	b005      	add	sp, #20
 8003234:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003240 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 8003240:	b500      	push	{lr}
 8003242:	b087      	sub	sp, #28
 8003244:	9003      	str	r0, [sp, #12]
 8003246:	9102      	str	r1, [sp, #8]
 8003248:	9201      	str	r2, [sp, #4]
 800324a:	9300      	str	r3, [sp, #0]
  thread_t *tp;

  chDbgCheck((wsp != NULL) &&
 800324c:	9b03      	ldr	r3, [sp, #12]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d012      	beq.n	8003278 <chThdCreateStatic+0x38>
 8003252:	9b03      	ldr	r3, [sp, #12]
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	2b00      	cmp	r3, #0
 800325a:	d10d      	bne.n	8003278 <chThdCreateStatic+0x38>
 800325c:	9b02      	ldr	r3, [sp, #8]
 800325e:	2bc7      	cmp	r3, #199	; 0xc7
 8003260:	d90a      	bls.n	8003278 <chThdCreateStatic+0x38>
 8003262:	9b02      	ldr	r3, [sp, #8]
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	2b00      	cmp	r3, #0
 800326a:	d105      	bne.n	8003278 <chThdCreateStatic+0x38>
 800326c:	9b01      	ldr	r3, [sp, #4]
 800326e:	2bff      	cmp	r3, #255	; 0xff
 8003270:	d802      	bhi.n	8003278 <chThdCreateStatic+0x38>
 8003272:	9b00      	ldr	r3, [sp, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d102      	bne.n	800327e <chThdCreateStatic+0x3e>
 8003278:	4817      	ldr	r0, [pc, #92]	; (80032d8 <chThdCreateStatic+0x98>)
 800327a:	f7ff f979 	bl	8002570 <chSysHalt>
  _thread_memfill((uint8_t *)wsp,
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
 800327e:	f7ff fecf 	bl	8003020 <chSysLock.lto_priv.35>

  /* The thread structure is laid out in the upper part of the thread
     workspace. The thread position structure is aligned to the required
     stack alignment because it represents the stack top.*/
  tp = (thread_t *)((uint8_t *)wsp + size -
 8003282:	9b02      	ldr	r3, [sp, #8]
 8003284:	3b48      	subs	r3, #72	; 0x48
 8003286:	9a03      	ldr	r2, [sp, #12]
 8003288:	4413      	add	r3, r2
 800328a:	9305      	str	r3, [sp, #20]
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
 800328c:	9b05      	ldr	r3, [sp, #20]
 800328e:	9a03      	ldr	r2, [sp, #12]
 8003290:	61da      	str	r2, [r3, #28]
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8003292:	9b05      	ldr	r3, [sp, #20]
 8003294:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
 8003298:	9b05      	ldr	r3, [sp, #20]
 800329a:	60da      	str	r2, [r3, #12]
 800329c:	9b05      	ldr	r3, [sp, #20]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	9a00      	ldr	r2, [sp, #0]
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	9b05      	ldr	r3, [sp, #20]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	9a08      	ldr	r2, [sp, #32]
 80032aa:	605a      	str	r2, [r3, #4]
 80032ac:	9b05      	ldr	r3, [sp, #20]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	4a0a      	ldr	r2, [pc, #40]	; (80032dc <chThdCreateStatic+0x9c>)
 80032b2:	621a      	str	r2, [r3, #32]

  tp = _thread_init(tp, "noname", prio);
 80032b4:	9a01      	ldr	r2, [sp, #4]
 80032b6:	490a      	ldr	r1, [pc, #40]	; (80032e0 <chThdCreateStatic+0xa0>)
 80032b8:	9805      	ldr	r0, [sp, #20]
 80032ba:	f7ff ff09 	bl	80030d0 <_thread_init>
 80032be:	9005      	str	r0, [sp, #20]

  /* Starting the thread immediately.*/
  chSchWakeupS(tp, MSG_OK);
 80032c0:	2100      	movs	r1, #0
 80032c2:	9805      	ldr	r0, [sp, #20]
 80032c4:	f7ff fdcc 	bl	8002e60 <chSchWakeupS>
  chSysUnlock();
 80032c8:	f7ff feba 	bl	8003040 <chSysUnlock.lto_priv.13>

  return tp;
 80032cc:	9b05      	ldr	r3, [sp, #20]
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	b007      	add	sp, #28
 80032d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80032d6:	bf00      	nop
 80032d8:	08004ccc 	.word	0x08004ccc
 80032dc:	08000251 	.word	0x08000251
 80032e0:	08004cac 	.word	0x08004cac
	...

080032f0 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
 80032f0:	b500      	push	{lr}
 80032f2:	b083      	sub	sp, #12
 80032f4:	9001      	str	r0, [sp, #4]

  chSysLock();
 80032f6:	f7ff fe93 	bl	8003020 <chSysLock.lto_priv.35>
  chThdExitS(msg);
 80032fa:	9801      	ldr	r0, [sp, #4]
 80032fc:	f000 f808 	bl	8003310 <chThdExitS>
  /* The thread never returns here.*/
}
 8003300:	b003      	add	sp, #12
 8003302:	f85d fb04 	ldr.w	pc, [sp], #4
 8003306:	bf00      	nop
	...

08003310 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 8003310:	b500      	push	{lr}
 8003312:	b085      	sub	sp, #20
 8003314:	9001      	str	r0, [sp, #4]
  thread_t *tp = currp;
 8003316:	4b1a      	ldr	r3, [pc, #104]	; (8003380 <chThdExitS+0x70>)
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	9303      	str	r3, [sp, #12]

  /* Storing exit message.*/
  tp->u.exitcode = msg;
 800331c:	9b03      	ldr	r3, [sp, #12]
 800331e:	9a01      	ldr	r2, [sp, #4]
 8003320:	625a      	str	r2, [r3, #36]	; 0x24
 8003322:	e008      	b.n	8003336 <chThdExitS+0x26>
  CH_CFG_THREAD_EXIT_HOOK(tp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (list_notempty(&tp->waiting)) {
    (void) chSchReadyI(list_remove(&tp->waiting));
 8003324:	9b03      	ldr	r3, [sp, #12]
 8003326:	3328      	adds	r3, #40	; 0x28
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff fe39 	bl	8002fa0 <list_remove>
 800332e:	4603      	mov	r3, r0
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff fc85 	bl	8002c40 <chSchReadyI>
  while (list_notempty(&tp->waiting)) {
 8003336:	9b03      	ldr	r3, [sp, #12]
 8003338:	3328      	adds	r3, #40	; 0x28
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff fe00 	bl	8002f40 <list_notempty>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1ee      	bne.n	8003324 <chThdExitS+0x14>

#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads with no references are immediately removed from the
     registry because there is no memory to recover.*/
#if CH_CFG_USE_DYNAMIC == TRUE
  if ((tp->refs == (trefs_t)0) &&
 8003346:	9b03      	ldr	r3, [sp, #12]
 8003348:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800334c:	2b00      	cmp	r3, #0
 800334e:	d110      	bne.n	8003372 <chThdExitS+0x62>
      ((tp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)) {
 8003350:	9b03      	ldr	r3, [sp, #12]
 8003352:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003356:	f003 0303 	and.w	r3, r3, #3
  if ((tp->refs == (trefs_t)0) &&
 800335a:	2b00      	cmp	r3, #0
 800335c:	d109      	bne.n	8003372 <chThdExitS+0x62>
    REG_REMOVE(tp);
 800335e:	9b03      	ldr	r3, [sp, #12]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	9a03      	ldr	r2, [sp, #12]
 8003364:	6912      	ldr	r2, [r2, #16]
 8003366:	611a      	str	r2, [r3, #16]
 8003368:	9b03      	ldr	r3, [sp, #12]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	9a03      	ldr	r2, [sp, #12]
 800336e:	6952      	ldr	r2, [r2, #20]
 8003370:	615a      	str	r2, [r3, #20]
  }
#endif
#endif

  /* Going into final state.*/
  chSchGoSleepS(CH_STATE_FINAL);
 8003372:	200f      	movs	r0, #15
 8003374:	f7ff fcd4 	bl	8002d20 <chSchGoSleepS>

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
}
 8003378:	b005      	add	sp, #20
 800337a:	f85d fb04 	ldr.w	pc, [sp], #4
 800337e:	bf00      	nop
 8003380:	200009c8 	.word	0x200009c8
	...

08003390 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(sysinterval_t time) {
 8003390:	b500      	push	{lr}
 8003392:	b083      	sub	sp, #12
 8003394:	9001      	str	r0, [sp, #4]

  chSysLock();
 8003396:	f7ff fe43 	bl	8003020 <chSysLock.lto_priv.35>
  chThdSleepS(time);
 800339a:	9801      	ldr	r0, [sp, #4]
 800339c:	f7ff fe68 	bl	8003070 <chThdSleepS>
  chSysUnlock();
 80033a0:	f7ff fe4e 	bl	8003040 <chSysUnlock.lto_priv.13>
}
 80033a4:	b003      	add	sp, #12
 80033a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80033aa:	bf00      	nop
 80033ac:	0000      	movs	r0, r0
	...

080033b0 <chThdSuspendTimeoutS>:
 * @return              The wake up message.
 * @retval MSG_TIMEOUT  if the operation timed out.
 *
 * @sclass
 */
msg_t chThdSuspendTimeoutS(thread_reference_t *trp, sysinterval_t timeout) {
 80033b0:	b500      	push	{lr}
 80033b2:	b085      	sub	sp, #20
 80033b4:	9001      	str	r0, [sp, #4]
 80033b6:	9100      	str	r1, [sp, #0]
  thread_t *tp = chThdGetSelfX();
 80033b8:	f7ff fe52 	bl	8003060 <chThdGetSelfX.lto_priv.113>
 80033bc:	9003      	str	r0, [sp, #12]

  chDbgAssert(*trp == NULL, "not NULL");

  if (TIME_IMMEDIATE == timeout) {
 80033be:	9b00      	ldr	r3, [sp, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d102      	bne.n	80033ca <chThdSuspendTimeoutS+0x1a>
    return MSG_TIMEOUT;
 80033c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033c8:	e00a      	b.n	80033e0 <chThdSuspendTimeoutS+0x30>
  }

  *trp = tp;
 80033ca:	9b01      	ldr	r3, [sp, #4]
 80033cc:	9a03      	ldr	r2, [sp, #12]
 80033ce:	601a      	str	r2, [r3, #0]
  tp->u.wttrp = trp;
 80033d0:	9b03      	ldr	r3, [sp, #12]
 80033d2:	9a01      	ldr	r2, [sp, #4]
 80033d4:	625a      	str	r2, [r3, #36]	; 0x24

  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 80033d6:	9900      	ldr	r1, [sp, #0]
 80033d8:	2003      	movs	r0, #3
 80033da:	f7ff fd09 	bl	8002df0 <chSchGoSleepTimeoutS>
 80033de:	4603      	mov	r3, r0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	b005      	add	sp, #20
 80033e4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080033f0 <chThdResumeI>:
 * @param[in] trp       a pointer to a thread reference object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {
 80033f0:	b500      	push	{lr}
 80033f2:	b085      	sub	sp, #20
 80033f4:	9001      	str	r0, [sp, #4]
 80033f6:	9100      	str	r1, [sp, #0]

  if (*trp != NULL) {
 80033f8:	9b01      	ldr	r3, [sp, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00b      	beq.n	8003418 <chThdResumeI+0x28>
    thread_t *tp = *trp;
 8003400:	9b01      	ldr	r3, [sp, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	9303      	str	r3, [sp, #12]

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");

    *trp = NULL;
 8003406:	9b01      	ldr	r3, [sp, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	601a      	str	r2, [r3, #0]
    tp->u.rdymsg = msg;
 800340c:	9b03      	ldr	r3, [sp, #12]
 800340e:	9a00      	ldr	r2, [sp, #0]
 8003410:	625a      	str	r2, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 8003412:	9803      	ldr	r0, [sp, #12]
 8003414:	f7ff fc14 	bl	8002c40 <chSchReadyI>
  }
}
 8003418:	b005      	add	sp, #20
 800341a:	f85d fb04 	ldr.w	pc, [sp], #4
 800341e:	bf00      	nop

08003420 <chThdEnqueueTimeoutS>:
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 8003420:	b500      	push	{lr}
 8003422:	b083      	sub	sp, #12
 8003424:	9001      	str	r0, [sp, #4]
 8003426:	9100      	str	r1, [sp, #0]

  if (TIME_IMMEDIATE == timeout) {
 8003428:	9b00      	ldr	r3, [sp, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d102      	bne.n	8003434 <chThdEnqueueTimeoutS+0x14>
    return MSG_TIMEOUT;
 800342e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003432:	e00a      	b.n	800344a <chThdEnqueueTimeoutS+0x2a>
  }

  queue_insert(currp, tqp);
 8003434:	4b07      	ldr	r3, [pc, #28]	; (8003454 <chThdEnqueueTimeoutS+0x34>)
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	9901      	ldr	r1, [sp, #4]
 800343a:	4618      	mov	r0, r3
 800343c:	f7ff fdc0 	bl	8002fc0 <queue_insert.lto_priv.103>

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8003440:	9900      	ldr	r1, [sp, #0]
 8003442:	2004      	movs	r0, #4
 8003444:	f7ff fcd4 	bl	8002df0 <chSchGoSleepTimeoutS>
 8003448:	4603      	mov	r3, r0
}
 800344a:	4618      	mov	r0, r3
 800344c:	b003      	add	sp, #12
 800344e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003452:	bf00      	nop
 8003454:	200009c8 	.word	0x200009c8
	...

08003460 <chThdDequeueNextI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8003460:	b500      	push	{lr}
 8003462:	b083      	sub	sp, #12
 8003464:	9001      	str	r0, [sp, #4]
 8003466:	9100      	str	r1, [sp, #0]

  if (queue_notempty(tqp)) {
 8003468:	9801      	ldr	r0, [sp, #4]
 800346a:	f7ff fd89 	bl	8002f80 <queue_notempty.lto_priv.117>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d003      	beq.n	800347c <chThdDequeueNextI+0x1c>
    chThdDoDequeueNextI(tqp, msg);
 8003474:	9900      	ldr	r1, [sp, #0]
 8003476:	9801      	ldr	r0, [sp, #4]
 8003478:	f7ff fe12 	bl	80030a0 <chThdDoDequeueNextI>
  }
}
 800347c:	b003      	add	sp, #12
 800347e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003482:	bf00      	nop
	...

08003490 <tm_stop>:
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {
 8003490:	e92d 0810 	stmdb	sp!, {r4, fp}
 8003494:	b084      	sub	sp, #16
 8003496:	9003      	str	r0, [sp, #12]
 8003498:	9102      	str	r1, [sp, #8]
 800349a:	9201      	str	r2, [sp, #4]

  tmp->n++;
 800349c:	9b03      	ldr	r3, [sp, #12]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	1c5a      	adds	r2, r3, #1
 80034a2:	9b03      	ldr	r3, [sp, #12]
 80034a4:	60da      	str	r2, [r3, #12]
  tmp->last = (now - tmp->last) - offset;
 80034a6:	9b03      	ldr	r3, [sp, #12]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	9a02      	ldr	r2, [sp, #8]
 80034ac:	1ad2      	subs	r2, r2, r3
 80034ae:	9b01      	ldr	r3, [sp, #4]
 80034b0:	1ad2      	subs	r2, r2, r3
 80034b2:	9b03      	ldr	r3, [sp, #12]
 80034b4:	609a      	str	r2, [r3, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 80034b6:	9b03      	ldr	r3, [sp, #12]
 80034b8:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 80034bc:	9b03      	ldr	r3, [sp, #12]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	469b      	mov	fp, r3
 80034c2:	f04f 0c00 	mov.w	ip, #0
 80034c6:	eb1b 0301 	adds.w	r3, fp, r1
 80034ca:	eb4c 0402 	adc.w	r4, ip, r2
 80034ce:	9a03      	ldr	r2, [sp, #12]
 80034d0:	e9c2 3404 	strd	r3, r4, [r2, #16]
  if (tmp->last > tmp->worst) {
 80034d4:	9b03      	ldr	r3, [sp, #12]
 80034d6:	689a      	ldr	r2, [r3, #8]
 80034d8:	9b03      	ldr	r3, [sp, #12]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d903      	bls.n	80034e8 <tm_stop+0x58>
    tmp->worst = tmp->last;
 80034e0:	9b03      	ldr	r3, [sp, #12]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	9b03      	ldr	r3, [sp, #12]
 80034e6:	605a      	str	r2, [r3, #4]
  }
  if (tmp->last < tmp->best) {
 80034e8:	9b03      	ldr	r3, [sp, #12]
 80034ea:	689a      	ldr	r2, [r3, #8]
 80034ec:	9b03      	ldr	r3, [sp, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d203      	bcs.n	80034fc <tm_stop+0x6c>
    tmp->best = tmp->last;
 80034f4:	9b03      	ldr	r3, [sp, #12]
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	9b03      	ldr	r3, [sp, #12]
 80034fa:	601a      	str	r2, [r3, #0]
  }
}
 80034fc:	b004      	add	sp, #16
 80034fe:	e8bd 0810 	ldmia.w	sp!, {r4, fp}
 8003502:	4770      	bx	lr
	...

08003510 <_tm_init>:
/**
 * @brief   Initializes the time measurement unit.
 *
 * @init
 */
void _tm_init(void) {
 8003510:	b500      	push	{lr}
 8003512:	b089      	sub	sp, #36	; 0x24
  unsigned i;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 8003514:	4b0e      	ldr	r3, [pc, #56]	; (8003550 <_tm_init+0x40>)
 8003516:	2200      	movs	r2, #0
 8003518:	67da      	str	r2, [r3, #124]	; 0x7c
  chTMObjectInit(&tm);
 800351a:	466b      	mov	r3, sp
 800351c:	4618      	mov	r0, r3
 800351e:	f000 f81f 	bl	8003560 <chTMObjectInit>
  i = TM_CALIBRATION_LOOP;
 8003522:	2304      	movs	r3, #4
 8003524:	9307      	str	r3, [sp, #28]
  do {
    chTMStartMeasurementX(&tm);
 8003526:	466b      	mov	r3, sp
 8003528:	4618      	mov	r0, r3
 800352a:	f000 f839 	bl	80035a0 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 800352e:	466b      	mov	r3, sp
 8003530:	4618      	mov	r0, r3
 8003532:	f000 f845 	bl	80035c0 <chTMStopMeasurementX>
    i--;
 8003536:	9b07      	ldr	r3, [sp, #28]
 8003538:	3b01      	subs	r3, #1
 800353a:	9307      	str	r3, [sp, #28]
  } while (i > 0U);
 800353c:	9b07      	ldr	r3, [sp, #28]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1f1      	bne.n	8003526 <_tm_init+0x16>
  ch.tm.offset = tm.best;
 8003542:	9b00      	ldr	r3, [sp, #0]
 8003544:	4a02      	ldr	r2, [pc, #8]	; (8003550 <_tm_init+0x40>)
 8003546:	67d3      	str	r3, [r2, #124]	; 0x7c
}
 8003548:	b009      	add	sp, #36	; 0x24
 800354a:	f85d fb04 	ldr.w	pc, [sp], #4
 800354e:	bf00      	nop
 8003550:	200009c8 	.word	0x200009c8
	...

08003560 <chTMObjectInit>:
 *
 * @param[out] tmp      pointer to a @p TimeMeasurement structure
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {
 8003560:	b410      	push	{r4}
 8003562:	b083      	sub	sp, #12
 8003564:	9001      	str	r0, [sp, #4]

  tmp->best       = (rtcnt_t)-1;
 8003566:	9b01      	ldr	r3, [sp, #4]
 8003568:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800356c:	601a      	str	r2, [r3, #0]
  tmp->worst      = (rtcnt_t)0;
 800356e:	9b01      	ldr	r3, [sp, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	605a      	str	r2, [r3, #4]
  tmp->last       = (rtcnt_t)0;
 8003574:	9b01      	ldr	r3, [sp, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	609a      	str	r2, [r3, #8]
  tmp->n          = (ucnt_t)0;
 800357a:	9b01      	ldr	r3, [sp, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	60da      	str	r2, [r3, #12]
  tmp->cumulative = (rttime_t)0;
 8003580:	9a01      	ldr	r2, [sp, #4]
 8003582:	f04f 0300 	mov.w	r3, #0
 8003586:	f04f 0400 	mov.w	r4, #0
 800358a:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 800358e:	b003      	add	sp, #12
 8003590:	bc10      	pop	{r4}
 8003592:	4770      	bx	lr
	...

080035a0 <chTMStartMeasurementX>:
 *
 * @param[in,out] tmp   pointer to a @p TimeMeasurement structure
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {
 80035a0:	b082      	sub	sp, #8
 80035a2:	9001      	str	r0, [sp, #4]
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 80035a4:	4b02      	ldr	r3, [pc, #8]	; (80035b0 <chTMStartMeasurementX+0x10>)
 80035a6:	685a      	ldr	r2, [r3, #4]

  tmp->last = chSysGetRealtimeCounterX();
 80035a8:	9b01      	ldr	r3, [sp, #4]
 80035aa:	609a      	str	r2, [r3, #8]
}
 80035ac:	b002      	add	sp, #8
 80035ae:	4770      	bx	lr
 80035b0:	e0001000 	.word	0xe0001000
	...

080035c0 <chTMStopMeasurementX>:
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 80035c0:	b500      	push	{lr}
 80035c2:	b083      	sub	sp, #12
 80035c4:	9001      	str	r0, [sp, #4]
 80035c6:	4b05      	ldr	r3, [pc, #20]	; (80035dc <chTMStopMeasurementX+0x1c>)
 80035c8:	6859      	ldr	r1, [r3, #4]

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80035ca:	4b05      	ldr	r3, [pc, #20]	; (80035e0 <chTMStopMeasurementX+0x20>)
 80035cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035ce:	461a      	mov	r2, r3
 80035d0:	9801      	ldr	r0, [sp, #4]
 80035d2:	f7ff ff5d 	bl	8003490 <tm_stop>
}
 80035d6:	b003      	add	sp, #12
 80035d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80035dc:	e0001000 	.word	0xe0001000
 80035e0:	200009c8 	.word	0x200009c8
	...

080035f0 <queue_init.lto_priv.94>:
static inline void queue_init(threads_queue_t *tqp) {
 80035f0:	b082      	sub	sp, #8
 80035f2:	9001      	str	r0, [sp, #4]
  tqp->next = (thread_t *)tqp;
 80035f4:	9b01      	ldr	r3, [sp, #4]
 80035f6:	9a01      	ldr	r2, [sp, #4]
 80035f8:	601a      	str	r2, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 80035fa:	9b01      	ldr	r3, [sp, #4]
 80035fc:	9a01      	ldr	r2, [sp, #4]
 80035fe:	605a      	str	r2, [r3, #4]
}
 8003600:	b002      	add	sp, #8
 8003602:	4770      	bx	lr
	...

08003610 <chMtxObjectInit>:
 *
 * @param[out] mp       pointer to a @p mutex_t structure
 *
 * @init
 */
void chMtxObjectInit(mutex_t *mp) {
 8003610:	b500      	push	{lr}
 8003612:	b083      	sub	sp, #12
 8003614:	9001      	str	r0, [sp, #4]

  chDbgCheck(mp != NULL);
 8003616:	9b01      	ldr	r3, [sp, #4]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d102      	bne.n	8003622 <chMtxObjectInit+0x12>
 800361c:	4806      	ldr	r0, [pc, #24]	; (8003638 <chMtxObjectInit+0x28>)
 800361e:	f7fe ffa7 	bl	8002570 <chSysHalt>

  queue_init(&mp->queue);
 8003622:	9b01      	ldr	r3, [sp, #4]
 8003624:	4618      	mov	r0, r3
 8003626:	f7ff ffe3 	bl	80035f0 <queue_init.lto_priv.94>
  mp->owner = NULL;
 800362a:	9b01      	ldr	r3, [sp, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	609a      	str	r2, [r3, #8]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  mp->cnt = (cnt_t)0;
#endif
}
 8003630:	b003      	add	sp, #12
 8003632:	f85d fb04 	ldr.w	pc, [sp], #4
 8003636:	bf00      	nop
 8003638:	08004d04 	.word	0x08004d04
 800363c:	00000000 	.word	0x00000000

08003640 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8003640:	b500      	push	{lr}
 8003642:	b085      	sub	sp, #20
 8003644:	9001      	str	r0, [sp, #4]
 8003646:	9100      	str	r1, [sp, #0]
  event_listener_t *elp;

  chDbgCheckClassI();
 8003648:	f7ff f872 	bl	8002730 <chDbgCheckClassI>
  chDbgCheck(esp != NULL);
 800364c:	9b01      	ldr	r3, [sp, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d102      	bne.n	8003658 <chEvtBroadcastFlagsI+0x18>
 8003652:	4814      	ldr	r0, [pc, #80]	; (80036a4 <chEvtBroadcastFlagsI+0x64>)
 8003654:	f7fe ff8c 	bl	8002570 <chSysHalt>

  elp = esp->next;
 8003658:	9b01      	ldr	r3, [sp, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	9303      	str	r3, [sp, #12]
 800365e:	e019      	b.n	8003694 <chEvtBroadcastFlagsI+0x54>
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
  /*lint -restore*/
    elp->flags |= flags;
 8003660:	9b03      	ldr	r3, [sp, #12]
 8003662:	68da      	ldr	r2, [r3, #12]
 8003664:	9b00      	ldr	r3, [sp, #0]
 8003666:	431a      	orrs	r2, r3
 8003668:	9b03      	ldr	r3, [sp, #12]
 800366a:	60da      	str	r2, [r3, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 800366c:	9b00      	ldr	r3, [sp, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d005      	beq.n	800367e <chEvtBroadcastFlagsI+0x3e>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 8003672:	9b03      	ldr	r3, [sp, #12]
 8003674:	691a      	ldr	r2, [r3, #16]
 8003676:	9b00      	ldr	r3, [sp, #0]
 8003678:	4013      	ands	r3, r2
    if ((flags == (eventflags_t)0) ||
 800367a:	2b00      	cmp	r3, #0
 800367c:	d007      	beq.n	800368e <chEvtBroadcastFlagsI+0x4e>
      chEvtSignalI(elp->listener, elp->events);
 800367e:	9b03      	ldr	r3, [sp, #12]
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	9b03      	ldr	r3, [sp, #12]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	4619      	mov	r1, r3
 8003688:	4610      	mov	r0, r2
 800368a:	f000 f811 	bl	80036b0 <chEvtSignalI>
    }
    elp = elp->next;
 800368e:	9b03      	ldr	r3, [sp, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	9303      	str	r3, [sp, #12]
  while (elp != (event_listener_t *)esp) {
 8003694:	9a03      	ldr	r2, [sp, #12]
 8003696:	9b01      	ldr	r3, [sp, #4]
 8003698:	429a      	cmp	r2, r3
 800369a:	d1e1      	bne.n	8003660 <chEvtBroadcastFlagsI+0x20>
  }
}
 800369c:	b005      	add	sp, #20
 800369e:	f85d fb04 	ldr.w	pc, [sp], #4
 80036a2:	bf00      	nop
 80036a4:	08004d14 	.word	0x08004d14
	...

080036b0 <chEvtSignalI>:
 * @param[in] tp        the thread to be signaled
 * @param[in] events    the events set to be ORed
 *
 * @iclass
 */
void chEvtSignalI(thread_t *tp, eventmask_t events) {
 80036b0:	b500      	push	{lr}
 80036b2:	b083      	sub	sp, #12
 80036b4:	9001      	str	r0, [sp, #4]
 80036b6:	9100      	str	r1, [sp, #0]

  chDbgCheckClassI();
 80036b8:	f7ff f83a 	bl	8002730 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 80036bc:	9b01      	ldr	r3, [sp, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d102      	bne.n	80036c8 <chEvtSignalI+0x18>
 80036c2:	4816      	ldr	r0, [pc, #88]	; (800371c <chEvtSignalI+0x6c>)
 80036c4:	f7fe ff54 	bl	8002570 <chSysHalt>

  tp->epending |= events;
 80036c8:	9b01      	ldr	r3, [sp, #4]
 80036ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036cc:	9b00      	ldr	r3, [sp, #0]
 80036ce:	431a      	orrs	r2, r3
 80036d0:	9b01      	ldr	r3, [sp, #4]
 80036d2:	635a      	str	r2, [r3, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 80036d4:	9b01      	ldr	r3, [sp, #4]
 80036d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036da:	2b0a      	cmp	r3, #10
 80036dc:	d106      	bne.n	80036ec <chEvtSignalI+0x3c>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 80036de:	9b01      	ldr	r3, [sp, #4]
 80036e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036e2:	9b01      	ldr	r3, [sp, #4]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	4013      	ands	r3, r2
  if (((tp->state == CH_STATE_WTOREVT) &&
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d10d      	bne.n	8003708 <chEvtSignalI+0x58>
      ((tp->state == CH_STATE_WTANDEVT) &&
 80036ec:	9b01      	ldr	r3, [sp, #4]
 80036ee:	f893 3020 	ldrb.w	r3, [r3, #32]
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 80036f2:	2b0b      	cmp	r3, #11
 80036f4:	d10e      	bne.n	8003714 <chEvtSignalI+0x64>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 80036f6:	9b01      	ldr	r3, [sp, #4]
 80036f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036fa:	9b01      	ldr	r3, [sp, #4]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	401a      	ands	r2, r3
 8003700:	9b01      	ldr	r3, [sp, #4]
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 8003704:	429a      	cmp	r2, r3
 8003706:	d105      	bne.n	8003714 <chEvtSignalI+0x64>
    tp->u.rdymsg = MSG_OK;
 8003708:	9b01      	ldr	r3, [sp, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	625a      	str	r2, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 800370e:	9801      	ldr	r0, [sp, #4]
 8003710:	f7ff fa96 	bl	8002c40 <chSchReadyI>
  }
}
 8003714:	b003      	add	sp, #12
 8003716:	f85d fb04 	ldr.w	pc, [sp], #4
 800371a:	bf00      	nop
 800371c:	08004d2c 	.word	0x08004d2c

08003720 <chSysLock.lto_priv.44>:
static inline void chSysLock(void) {
 8003720:	b500      	push	{lr}
 8003722:	b083      	sub	sp, #12
 8003724:	2320      	movs	r3, #32
 8003726:	9301      	str	r3, [sp, #4]
 8003728:	9b01      	ldr	r3, [sp, #4]
 800372a:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800372e:	f7fe ff4f 	bl	80025d0 <_dbg_check_lock>
}
 8003732:	b003      	add	sp, #12
 8003734:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003740 <chSysUnlock.lto_priv.22>:
static inline void chSysUnlock(void) {
 8003740:	b500      	push	{lr}
 8003742:	b083      	sub	sp, #12
  _dbg_check_unlock();
 8003744:	f7fe ff5c 	bl	8002600 <_dbg_check_unlock>
 8003748:	2300      	movs	r3, #0
 800374a:	9301      	str	r3, [sp, #4]
 800374c:	9b01      	ldr	r3, [sp, #4]
 800374e:	f383 8811 	msr	BASEPRI, r3
}
 8003752:	b003      	add	sp, #12
 8003754:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003760 <_core_init>:
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  ch_memcore.basemem = __heap_base__;
 8003760:	4b03      	ldr	r3, [pc, #12]	; (8003770 <_core_init+0x10>)
 8003762:	4a04      	ldr	r2, [pc, #16]	; (8003774 <_core_init+0x14>)
 8003764:	601a      	str	r2, [r3, #0]
  ch_memcore.topmem  = __heap_end__;
 8003766:	4b02      	ldr	r3, [pc, #8]	; (8003770 <_core_init+0x10>)
 8003768:	4a03      	ldr	r2, [pc, #12]	; (8003778 <_core_init+0x18>)
 800376a:	605a      	str	r2, [r3, #4]
  static uint8_t static_heap[CH_CFG_MEMCORE_SIZE];

  ch_memcore.basemem = &static_heap[0];
  ch_memcore.topmem  = &static_heap[CH_CFG_MEMCORE_SIZE];
#endif
}
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	20000a48 	.word	0x20000a48
 8003774:	20001500 	.word	0x20001500
 8003778:	20005000 	.word	0x20005000
 800377c:	00000000 	.word	0x00000000

08003780 <chCoreAllocFromTopI>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
void *chCoreAllocFromTopI(size_t size, unsigned align, size_t offset) {
 8003780:	b500      	push	{lr}
 8003782:	b087      	sub	sp, #28
 8003784:	9003      	str	r0, [sp, #12]
 8003786:	9102      	str	r1, [sp, #8]
 8003788:	9201      	str	r2, [sp, #4]
  uint8_t *p, *prev;

  chDbgCheckClassI();
 800378a:	f7fe ffd1 	bl	8002730 <chDbgCheckClassI>
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 800378e:	9b02      	ldr	r3, [sp, #8]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d005      	beq.n	80037a0 <chCoreAllocFromTopI+0x20>
 8003794:	9b02      	ldr	r3, [sp, #8]
 8003796:	1e5a      	subs	r2, r3, #1
 8003798:	9b02      	ldr	r3, [sp, #8]
 800379a:	4013      	ands	r3, r2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d002      	beq.n	80037a6 <chCoreAllocFromTopI+0x26>
 80037a0:	4812      	ldr	r0, [pc, #72]	; (80037ec <chCoreAllocFromTopI+0x6c>)
 80037a2:	f7fe fee5 	bl	8002570 <chSysHalt>

  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 80037a6:	4b12      	ldr	r3, [pc, #72]	; (80037f0 <chCoreAllocFromTopI+0x70>)
 80037a8:	685a      	ldr	r2, [r3, #4]
 80037aa:	9b03      	ldr	r3, [sp, #12]
 80037ac:	425b      	negs	r3, r3
 80037ae:	4413      	add	r3, r2
 80037b0:	461a      	mov	r2, r3
 80037b2:	9b02      	ldr	r3, [sp, #8]
 80037b4:	425b      	negs	r3, r3
 80037b6:	4013      	ands	r3, r2
 80037b8:	9305      	str	r3, [sp, #20]
  prev = p - offset;
 80037ba:	9b01      	ldr	r3, [sp, #4]
 80037bc:	425b      	negs	r3, r3
 80037be:	9a05      	ldr	r2, [sp, #20]
 80037c0:	4413      	add	r3, r2
 80037c2:	9304      	str	r3, [sp, #16]

  /* Considering also the case where there is numeric overflow.*/
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80037c4:	4b0a      	ldr	r3, [pc, #40]	; (80037f0 <chCoreAllocFromTopI+0x70>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	9a04      	ldr	r2, [sp, #16]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d304      	bcc.n	80037d8 <chCoreAllocFromTopI+0x58>
 80037ce:	4b08      	ldr	r3, [pc, #32]	; (80037f0 <chCoreAllocFromTopI+0x70>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	9a04      	ldr	r2, [sp, #16]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d901      	bls.n	80037dc <chCoreAllocFromTopI+0x5c>
    return NULL;
 80037d8:	2300      	movs	r3, #0
 80037da:	e003      	b.n	80037e4 <chCoreAllocFromTopI+0x64>
  }

  ch_memcore.topmem = prev;
 80037dc:	4a04      	ldr	r2, [pc, #16]	; (80037f0 <chCoreAllocFromTopI+0x70>)
 80037de:	9b04      	ldr	r3, [sp, #16]
 80037e0:	6053      	str	r3, [r2, #4]

  return p;
 80037e2:	9b05      	ldr	r3, [sp, #20]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	b007      	add	sp, #28
 80037e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80037ec:	08004d3c 	.word	0x08004d3c
 80037f0:	20000a48 	.word	0x20000a48
	...

08003800 <chCoreAllocFromTop>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 8003800:	b500      	push	{lr}
 8003802:	b087      	sub	sp, #28
 8003804:	9003      	str	r0, [sp, #12]
 8003806:	9102      	str	r1, [sp, #8]
 8003808:	9201      	str	r2, [sp, #4]
  void *p;

  chSysLock();
 800380a:	f7ff ff89 	bl	8003720 <chSysLock.lto_priv.44>
  p = chCoreAllocFromTopI(size, align, offset);
 800380e:	9a01      	ldr	r2, [sp, #4]
 8003810:	9902      	ldr	r1, [sp, #8]
 8003812:	9803      	ldr	r0, [sp, #12]
 8003814:	f7ff ffb4 	bl	8003780 <chCoreAllocFromTopI>
 8003818:	9005      	str	r0, [sp, #20]
  chSysUnlock();
 800381a:	f7ff ff91 	bl	8003740 <chSysUnlock.lto_priv.22>

  return p;
 800381e:	9b05      	ldr	r3, [sp, #20]
}
 8003820:	4618      	mov	r0, r3
 8003822:	b007      	add	sp, #28
 8003824:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003830 <_heap_init>:
/**
 * @brief   Initializes the default heap.
 *
 * @notapi
 */
void _heap_init(void) {
 8003830:	b508      	push	{r3, lr}

  default_heap.provider = chCoreAllocAlignedWithOffset;
 8003832:	4b06      	ldr	r3, [pc, #24]	; (800384c <_heap_init+0x1c>)
 8003834:	4a06      	ldr	r2, [pc, #24]	; (8003850 <_heap_init+0x20>)
 8003836:	601a      	str	r2, [r3, #0]
  H_NEXT(&default_heap.header) = NULL;
 8003838:	4b04      	ldr	r3, [pc, #16]	; (800384c <_heap_init+0x1c>)
 800383a:	2200      	movs	r2, #0
 800383c:	605a      	str	r2, [r3, #4]
  H_PAGES(&default_heap.header) = 0;
 800383e:	4b03      	ldr	r3, [pc, #12]	; (800384c <_heap_init+0x1c>)
 8003840:	2200      	movs	r2, #0
 8003842:	609a      	str	r2, [r3, #8]
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.mtx);
 8003844:	4803      	ldr	r0, [pc, #12]	; (8003854 <_heap_init+0x24>)
 8003846:	f7ff fee3 	bl	8003610 <chMtxObjectInit>
#else
  chSemObjectInit(&default_heap.sem, (cnt_t)1);
#endif
}
 800384a:	bd08      	pop	{r3, pc}
 800384c:	20000a50 	.word	0x20000a50
 8003850:	08003801 	.word	0x08003801
 8003854:	20000a5c 	.word	0x20000a5c
	...

08003860 <chPoolObjectInitAligned>:
 *                      automatically
 *
 * @init
 */
void chPoolObjectInitAligned(memory_pool_t *mp, size_t size,
                             unsigned align, memgetfunc_t provider) {
 8003860:	b500      	push	{lr}
 8003862:	b085      	sub	sp, #20
 8003864:	9003      	str	r0, [sp, #12]
 8003866:	9102      	str	r1, [sp, #8]
 8003868:	9201      	str	r2, [sp, #4]
 800386a:	9300      	str	r3, [sp, #0]

  chDbgCheck((mp != NULL) &&
 800386c:	9b03      	ldr	r3, [sp, #12]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00e      	beq.n	8003890 <chPoolObjectInitAligned+0x30>
 8003872:	9b02      	ldr	r3, [sp, #8]
 8003874:	2b03      	cmp	r3, #3
 8003876:	d90b      	bls.n	8003890 <chPoolObjectInitAligned+0x30>
 8003878:	9b01      	ldr	r3, [sp, #4]
 800387a:	2b03      	cmp	r3, #3
 800387c:	d908      	bls.n	8003890 <chPoolObjectInitAligned+0x30>
 800387e:	9b01      	ldr	r3, [sp, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d005      	beq.n	8003890 <chPoolObjectInitAligned+0x30>
 8003884:	9b01      	ldr	r3, [sp, #4]
 8003886:	1e5a      	subs	r2, r3, #1
 8003888:	9b01      	ldr	r3, [sp, #4]
 800388a:	4013      	ands	r3, r2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d002      	beq.n	8003896 <chPoolObjectInitAligned+0x36>
 8003890:	4808      	ldr	r0, [pc, #32]	; (80038b4 <chPoolObjectInitAligned+0x54>)
 8003892:	f7fe fe6d 	bl	8002570 <chSysHalt>
             (size >= sizeof(void *)) &&
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
 8003896:	9b03      	ldr	r3, [sp, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	601a      	str	r2, [r3, #0]
  mp->object_size = size;
 800389c:	9b03      	ldr	r3, [sp, #12]
 800389e:	9a02      	ldr	r2, [sp, #8]
 80038a0:	605a      	str	r2, [r3, #4]
  mp->align = align;
 80038a2:	9b03      	ldr	r3, [sp, #12]
 80038a4:	9a01      	ldr	r2, [sp, #4]
 80038a6:	609a      	str	r2, [r3, #8]
  mp->provider = provider;
 80038a8:	9b03      	ldr	r3, [sp, #12]
 80038aa:	9a00      	ldr	r2, [sp, #0]
 80038ac:	60da      	str	r2, [r3, #12]
}
 80038ae:	b005      	add	sp, #20
 80038b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80038b4:	08004d50 	.word	0x08004d50
	...

080038c0 <chCoreAllocAlignedI>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 80038c0:	b500      	push	{lr}
 80038c2:	b083      	sub	sp, #12
 80038c4:	9001      	str	r0, [sp, #4]
 80038c6:	9100      	str	r1, [sp, #0]

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
 80038c8:	2200      	movs	r2, #0
 80038ca:	9900      	ldr	r1, [sp, #0]
 80038cc:	9801      	ldr	r0, [sp, #4]
 80038ce:	f7ff ff57 	bl	8003780 <chCoreAllocFromTopI>
 80038d2:	4603      	mov	r3, r0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	b003      	add	sp, #12
 80038d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80038dc:	0000      	movs	r0, r0
	...

080038e0 <chPoolObjectInit>:
 *
 * @init
 */
static inline void chPoolObjectInit(memory_pool_t *mp,
                                    size_t size,
                                    memgetfunc_t provider) {
 80038e0:	b500      	push	{lr}
 80038e2:	b085      	sub	sp, #20
 80038e4:	9003      	str	r0, [sp, #12]
 80038e6:	9102      	str	r1, [sp, #8]
 80038e8:	9201      	str	r2, [sp, #4]

  chPoolObjectInitAligned(mp, size, PORT_NATURAL_ALIGN, provider);
 80038ea:	9b01      	ldr	r3, [sp, #4]
 80038ec:	2204      	movs	r2, #4
 80038ee:	9902      	ldr	r1, [sp, #8]
 80038f0:	9803      	ldr	r0, [sp, #12]
 80038f2:	f7ff ffb5 	bl	8003860 <chPoolObjectInitAligned>
}
 80038f6:	b005      	add	sp, #20
 80038f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80038fc:	0000      	movs	r0, r0
	...

08003900 <dyn_list_init>:

/*===========================================================================*/
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void dyn_list_init(dyn_list_t *dlp) {
 8003900:	b082      	sub	sp, #8
 8003902:	9001      	str	r0, [sp, #4]

  dlp->next = (dyn_element_t *)dlp;
 8003904:	9b01      	ldr	r3, [sp, #4]
 8003906:	9a01      	ldr	r2, [sp, #4]
 8003908:	601a      	str	r2, [r3, #0]
}
 800390a:	b002      	add	sp, #8
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop

08003910 <_factory_init>:
/**
 * @brief   Initializes the objects factory.
 *
 * @init
 */
void _factory_init(void) {
 8003910:	b508      	push	{r3, lr}

#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&ch_factory.mtx);
 8003912:	4810      	ldr	r0, [pc, #64]	; (8003954 <_factory_init+0x44>)
 8003914:	f7ff fe7c 	bl	8003610 <chMtxObjectInit>
#else
  chSemObjectInit(&ch_factory.sem, (cnt_t)1);
#endif

#if CH_CFG_FACTORY_OBJECTS_REGISTRY == TRUE
  dyn_list_init(&ch_factory.obj_list);
 8003918:	480f      	ldr	r0, [pc, #60]	; (8003958 <_factory_init+0x48>)
 800391a:	f7ff fff1 	bl	8003900 <dyn_list_init>
  chPoolObjectInit(&ch_factory.obj_pool,
 800391e:	4a0f      	ldr	r2, [pc, #60]	; (800395c <_factory_init+0x4c>)
 8003920:	2114      	movs	r1, #20
 8003922:	480f      	ldr	r0, [pc, #60]	; (8003960 <_factory_init+0x50>)
 8003924:	f7ff ffdc 	bl	80038e0 <chPoolObjectInit>
                   sizeof (registered_object_t),
                   chCoreAllocAlignedI);
#endif
#if CH_CFG_FACTORY_GENERIC_BUFFERS == TRUE
  dyn_list_init(&ch_factory.buf_list);
 8003928:	480e      	ldr	r0, [pc, #56]	; (8003964 <_factory_init+0x54>)
 800392a:	f7ff ffe9 	bl	8003900 <dyn_list_init>
#endif
#if CH_CFG_FACTORY_SEMAPHORES == TRUE
  dyn_list_init(&ch_factory.sem_list);
 800392e:	480e      	ldr	r0, [pc, #56]	; (8003968 <_factory_init+0x58>)
 8003930:	f7ff ffe6 	bl	8003900 <dyn_list_init>
  chPoolObjectInit(&ch_factory.sem_pool,
 8003934:	4a09      	ldr	r2, [pc, #36]	; (800395c <_factory_init+0x4c>)
 8003936:	211c      	movs	r1, #28
 8003938:	480c      	ldr	r0, [pc, #48]	; (800396c <_factory_init+0x5c>)
 800393a:	f7ff ffd1 	bl	80038e0 <chPoolObjectInit>
                   sizeof (dyn_semaphore_t),
                   chCoreAllocAlignedI);
#endif
#if CH_CFG_FACTORY_MAILBOXES == TRUE
  dyn_list_init(&ch_factory.mbx_list);
 800393e:	480c      	ldr	r0, [pc, #48]	; (8003970 <_factory_init+0x60>)
 8003940:	f7ff ffde 	bl	8003900 <dyn_list_init>
#endif
#if CH_CFG_FACTORY_OBJ_FIFOS == TRUE
  dyn_list_init(&ch_factory.fifo_list);
 8003944:	480b      	ldr	r0, [pc, #44]	; (8003974 <_factory_init+0x64>)
 8003946:	f7ff ffdb 	bl	8003900 <dyn_list_init>
#endif
#if CH_CFG_FACTORY_PIPES == TRUE
  dyn_list_init(&ch_factory.pipe_list);
 800394a:	480b      	ldr	r0, [pc, #44]	; (8003978 <_factory_init+0x68>)
 800394c:	f7ff ffd8 	bl	8003900 <dyn_list_init>
#endif
}
 8003950:	bd08      	pop	{r3, pc}
 8003952:	bf00      	nop
 8003954:	20000a6c 	.word	0x20000a6c
 8003958:	20000a7c 	.word	0x20000a7c
 800395c:	080038c1 	.word	0x080038c1
 8003960:	20000a80 	.word	0x20000a80
 8003964:	20000a90 	.word	0x20000a90
 8003968:	20000a94 	.word	0x20000a94
 800396c:	20000a98 	.word	0x20000a98
 8003970:	20000aa8 	.word	0x20000aa8
 8003974:	20000aac 	.word	0x20000aac
 8003978:	20000ab0 	.word	0x20000ab0
 800397c:	00000000 	.word	0x00000000

08003980 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003980:	b084      	sub	sp, #16
 8003982:	9001      	str	r0, [sp, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003984:	9b01      	ldr	r3, [sp, #4]
 8003986:	f003 0307 	and.w	r3, r3, #7
 800398a:	9303      	str	r3, [sp, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800398c:	4b0a      	ldr	r3, [pc, #40]	; (80039b8 <__NVIC_SetPriorityGrouping+0x38>)
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	9302      	str	r3, [sp, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003992:	9a02      	ldr	r2, [sp, #8]
 8003994:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003998:	4013      	ands	r3, r2
 800399a:	9302      	str	r3, [sp, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800399c:	9b03      	ldr	r3, [sp, #12]
 800399e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039a0:	9b02      	ldr	r3, [sp, #8]
 80039a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039ac:	9302      	str	r3, [sp, #8]
  SCB->AIRCR =  reg_value;
 80039ae:	4a02      	ldr	r2, [pc, #8]	; (80039b8 <__NVIC_SetPriorityGrouping+0x38>)
 80039b0:	9b02      	ldr	r3, [sp, #8]
 80039b2:	60d3      	str	r3, [r2, #12]
}
 80039b4:	b004      	add	sp, #16
 80039b6:	4770      	bx	lr
 80039b8:	e000ed00 	.word	0xe000ed00
 80039bc:	00000000 	.word	0x00000000

080039c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039c0:	b082      	sub	sp, #8
 80039c2:	4603      	mov	r3, r0
 80039c4:	9100      	str	r1, [sp, #0]
 80039c6:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
 80039ca:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	db0a      	blt.n	80039e8 <__NVIC_SetPriority+0x28>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039d2:	9b00      	ldr	r3, [sp, #0]
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	490b      	ldr	r1, [pc, #44]	; (8003a04 <__NVIC_SetPriority+0x44>)
 80039d8:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 80039dc:	0112      	lsls	r2, r2, #4
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	440b      	add	r3, r1
 80039e2:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80039e6:	e00b      	b.n	8003a00 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039e8:	9b00      	ldr	r3, [sp, #0]
 80039ea:	b2da      	uxtb	r2, r3
 80039ec:	4906      	ldr	r1, [pc, #24]	; (8003a08 <__NVIC_SetPriority+0x48>)
 80039ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80039f2:	f003 030f 	and.w	r3, r3, #15
 80039f6:	3b04      	subs	r3, #4
 80039f8:	0112      	lsls	r2, r2, #4
 80039fa:	b2d2      	uxtb	r2, r2
 80039fc:	440b      	add	r3, r1
 80039fe:	761a      	strb	r2, [r3, #24]
  }
}
 8003a00:	b002      	add	sp, #8
 8003a02:	4770      	bx	lr
 8003a04:	e000e100 	.word	0xe000e100
 8003a08:	e000ed00 	.word	0xe000ed00
 8003a0c:	00000000 	.word	0x00000000

08003a10 <SVC_Handler>:
 * @details The SVC vector is used for exception mode re-entering after a
 *          context switch and, optionally, for system calls.
 * @note    The SVC vector is only used in advanced kernel mode.
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void SVC_Handler(void) {
 8003a10:	b084      	sub	sp, #16
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8003a12:	f3ef 8309 	mrs	r3, PSP
 8003a16:	9300      	str	r3, [sp, #0]
  return(result);
 8003a18:	9b00      	ldr	r3, [sp, #0]
/*lint -restore*/
  uint32_t psp = __get_PSP();
 8003a1a:	9303      	str	r3, [sp, #12]
    /* From privileged mode, it is used for context discarding in the
       preemption code.*/

    /* Unstacking procedure, discarding the current exception context and
       positioning the stack to point to the real one.*/
    psp += sizeof (struct port_extctx);
 8003a1c:	9b03      	ldr	r3, [sp, #12]
 8003a1e:	3320      	adds	r3, #32
 8003a20:	9303      	str	r3, [sp, #12]
 8003a22:	9b03      	ldr	r3, [sp, #12]
 8003a24:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8003a26:	9b01      	ldr	r3, [sp, #4]
 8003a28:	f383 8809 	msr	PSP, r3
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	9302      	str	r3, [sp, #8]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003a30:	9b02      	ldr	r3, [sp, #8]
 8003a32:	f383 8811 	msr	BASEPRI, r3
#endif

    /* Restoring the normal interrupts status.*/
    port_unlock_from_isr();
  }
}
 8003a36:	b004      	add	sp, #16
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	0000      	movs	r0, r0
	...

08003a40 <port_init>:
/*===========================================================================*/

/**
 * @brief   Port-related initialization code.
 */
void port_init(void) {
 8003a40:	b500      	push	{lr}
 8003a42:	b083      	sub	sp, #12
 8003a44:	2320      	movs	r3, #32
 8003a46:	9301      	str	r3, [sp, #4]
 8003a48:	9b01      	ldr	r3, [sp, #4]
 8003a4a:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 8003a4e:	b662      	cpsie	i

  /* Starting in a known IRQ configuration.*/
  port_suspend();

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);
 8003a50:	2003      	movs	r0, #3
 8003a52:	f7ff ff95 	bl	8003980 <__NVIC_SetPriorityGrouping>

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003a56:	4b0c      	ldr	r3, [pc, #48]	; (8003a88 <port_init+0x48>)
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	4a0b      	ldr	r2, [pc, #44]	; (8003a88 <port_init+0x48>)
 8003a5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a60:	60d3      	str	r3, [r2, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8003a62:	4b0a      	ldr	r3, [pc, #40]	; (8003a8c <port_init+0x4c>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a09      	ldr	r2, [pc, #36]	; (8003a8c <port_init+0x4c>)
 8003a68:	f043 0301 	orr.w	r3, r3, #1
 8003a6c:	6013      	str	r3, [r2, #0]

  /* Initialization of the system vectors used by the port.*/
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  NVIC_SetPriority(SVCall_IRQn, CORTEX_PRIORITY_SVCALL);
 8003a6e:	2101      	movs	r1, #1
 8003a70:	f06f 0004 	mvn.w	r0, #4
 8003a74:	f7ff ffa4 	bl	80039c0 <__NVIC_SetPriority>
#endif
  NVIC_SetPriority(PendSV_IRQn, CORTEX_PRIORITY_PENDSV);
 8003a78:	2102      	movs	r1, #2
 8003a7a:	f06f 0001 	mvn.w	r0, #1
 8003a7e:	f7ff ff9f 	bl	80039c0 <__NVIC_SetPriority>

#if PORT_USE_SYSCALL == TRUE
  /* MPU is enabled.*/
  mpuEnable(MPU_CTRL_PRIVDEFENA);
#endif
}
 8003a82:	b003      	add	sp, #12
 8003a84:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a88:	e000edf0 	.word	0xe000edf0
 8003a8c:	e0001000 	.word	0xe0001000

08003a90 <_port_irq_epilogue>:
#endif

/**
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {
 8003a90:	b500      	push	{lr}
 8003a92:	b087      	sub	sp, #28
 8003a94:	2320      	movs	r3, #32
 8003a96:	9303      	str	r3, [sp, #12]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003a98:	9b03      	ldr	r3, [sp, #12]
 8003a9a:	f383 8811 	msr	BASEPRI, r3

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8003a9e:	4b17      	ldr	r3, [pc, #92]	; (8003afc <_port_irq_epilogue+0x6c>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d01f      	beq.n	8003aea <_port_irq_epilogue+0x5a>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8003aaa:	f3ef 8309 	mrs	r3, PSP
 8003aae:	9301      	str	r3, [sp, #4]
  return(result);
 8003ab0:	9b01      	ldr	r3, [sp, #4]
        lctxp->control = control;
        lctxp->ectxp   = (struct port_extctx *)psp;
      }
    }
#else
    s_psp = __get_PSP();
 8003ab2:	9305      	str	r3, [sp, #20]
#endif

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    s_psp -= sizeof (struct port_extctx);
 8003ab4:	9b05      	ldr	r3, [sp, #20]
 8003ab6:	3b20      	subs	r3, #32
 8003ab8:	9305      	str	r3, [sp, #20]

    /* The port_extctx structure is pointed by the S-PSP register.*/
    ectxp = (struct port_extctx *)s_psp;
 8003aba:	9b05      	ldr	r3, [sp, #20]
 8003abc:	9304      	str	r3, [sp, #16]

    /* Setting up a fake XPSR register value.*/
    ectxp->xpsr = 0x01000000U;
 8003abe:	9b04      	ldr	r3, [sp, #16]
 8003ac0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ac4:	61da      	str	r2, [r3, #28]
 8003ac6:	9b05      	ldr	r3, [sp, #20]
 8003ac8:	9302      	str	r3, [sp, #8]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8003aca:	9b02      	ldr	r3, [sp, #8]
 8003acc:	f383 8809 	msr	PSP, r3
    /* Writing back the modified S-PSP value.*/
    __set_PSP(s_psp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8003ad0:	f7ff f9f6 	bl	8002ec0 <chSchIsPreemptionRequired>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <_port_irq_epilogue+0x52>
      /* Preemption is required we need to enforce a context switch.*/
      ectxp->pc = (uint32_t)_port_switch_from_isr;
 8003ada:	4a09      	ldr	r2, [pc, #36]	; (8003b00 <_port_irq_epilogue+0x70>)
 8003adc:	9b04      	ldr	r3, [sp, #16]
 8003ade:	619a      	str	r2, [r3, #24]
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ectxp->pc = (uint32_t)_port_exit_from_isr;
 8003ae0:	e008      	b.n	8003af4 <_port_irq_epilogue+0x64>
 8003ae2:	4a08      	ldr	r2, [pc, #32]	; (8003b04 <_port_irq_epilogue+0x74>)
 8003ae4:	9b04      	ldr	r3, [sp, #16]
 8003ae6:	619a      	str	r2, [r3, #24]
 8003ae8:	e004      	b.n	8003af4 <_port_irq_epilogue+0x64>
 8003aea:	2300      	movs	r3, #0
 8003aec:	9300      	str	r3, [sp, #0]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003aee:	9b00      	ldr	r3, [sp, #0]
 8003af0:	f383 8811 	msr	BASEPRI, r3
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8003af4:	b007      	add	sp, #28
 8003af6:	f85d fb04 	ldr.w	pc, [sp], #4
 8003afa:	bf00      	nop
 8003afc:	e000ed00 	.word	0xe000ed00
 8003b00:	08000267 	.word	0x08000267
 8003b04:	08000272 	.word	0x08000272
	...

08003b10 <port_timer_get_time.lto_priv.54>:
static inline systime_t port_timer_get_time(void) {
 8003b10:	b508      	push	{r3, lr}
  return stGetCounter();
 8003b12:	f7fc fe85 	bl	8000820 <stGetCounter>
 8003b16:	4603      	mov	r3, r0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	bd08      	pop	{r3, pc}
 8003b1c:	0000      	movs	r0, r0
	...

08003b20 <chSysLock.lto_priv.49>:
static inline void chSysLock(void) {
 8003b20:	b500      	push	{lr}
 8003b22:	b083      	sub	sp, #12
 8003b24:	2320      	movs	r3, #32
 8003b26:	9301      	str	r3, [sp, #4]
 8003b28:	9b01      	ldr	r3, [sp, #4]
 8003b2a:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8003b2e:	f7fe fd4f 	bl	80025d0 <_dbg_check_lock>
}
 8003b32:	b003      	add	sp, #12
 8003b34:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003b40 <chSysUnlock.lto_priv.27>:
static inline void chSysUnlock(void) {
 8003b40:	b500      	push	{lr}
 8003b42:	b083      	sub	sp, #12
  _dbg_check_unlock();
 8003b44:	f7fe fd5c 	bl	8002600 <_dbg_check_unlock>
 8003b48:	2300      	movs	r3, #0
 8003b4a:	9301      	str	r3, [sp, #4]
 8003b4c:	9b01      	ldr	r3, [sp, #4]
 8003b4e:	f383 8811 	msr	BASEPRI, r3
}
 8003b52:	b003      	add	sp, #12
 8003b54:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003b60 <chVTGetSystemTimeX.lto_priv.5>:
static inline systime_t chVTGetSystemTimeX(void) {
 8003b60:	b508      	push	{r3, lr}
  return port_timer_get_time();
 8003b62:	f7ff ffd5 	bl	8003b10 <port_timer_get_time.lto_priv.54>
 8003b66:	4603      	mov	r3, r0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	bd08      	pop	{r3, pc}
 8003b6c:	0000      	movs	r0, r0
	...

08003b70 <chVTGetSystemTime.lto_priv.0>:
static inline systime_t chVTGetSystemTime(void) {
 8003b70:	b500      	push	{lr}
 8003b72:	b083      	sub	sp, #12
  chSysLock();
 8003b74:	f7ff ffd4 	bl	8003b20 <chSysLock.lto_priv.49>
  systime = chVTGetSystemTimeX();
 8003b78:	f7ff fff2 	bl	8003b60 <chVTGetSystemTimeX.lto_priv.5>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	f8ad 3006 	strh.w	r3, [sp, #6]
  chSysUnlock();
 8003b82:	f7ff ffdd 	bl	8003b40 <chSysUnlock.lto_priv.27>
  return systime;
 8003b86:	f8bd 3006 	ldrh.w	r3, [sp, #6]
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	b003      	add	sp, #12
 8003b8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b92:	bf00      	nop
	...

08003ba0 <chRegSetThreadName>:
 *
 * @param[in] name      thread name as a zero terminated string
 *
 * @api
 */
static inline void chRegSetThreadName(const char *name) {
 8003ba0:	b082      	sub	sp, #8
 8003ba2:	9001      	str	r0, [sp, #4]

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 8003ba4:	4b02      	ldr	r3, [pc, #8]	; (8003bb0 <chRegSetThreadName+0x10>)
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	9a01      	ldr	r2, [sp, #4]
 8003baa:	619a      	str	r2, [r3, #24]
#else
  (void)name;
#endif
}
 8003bac:	b002      	add	sp, #8
 8003bae:	4770      	bx	lr
 8003bb0:	200009c8 	.word	0x200009c8
	...

08003bc0 <Thread1>:
 * Green LED blinker thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThread1, 128);

static THD_FUNCTION(Thread1, arg)
{
 8003bc0:	b500      	push	{lr}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	9001      	str	r0, [sp, #4]
  (void)arg;
  chRegSetThreadName("blinker");
 8003bc6:	4809      	ldr	r0, [pc, #36]	; (8003bec <Thread1+0x2c>)
 8003bc8:	f7ff ffea 	bl	8003ba0 <chRegSetThreadName>

  while (true) {
    palClearPad(GPIOC, GPIOC_LED);
 8003bcc:	4b08      	ldr	r3, [pc, #32]	; (8003bf0 <Thread1+0x30>)
 8003bce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003bd2:	615a      	str	r2, [r3, #20]
    chThdSleepMilliseconds(100);
 8003bd4:	20c8      	movs	r0, #200	; 0xc8
 8003bd6:	f7ff fbdb 	bl	8003390 <chThdSleep>
    palSetPad(GPIOC, GPIOC_LED);
 8003bda:	4b05      	ldr	r3, [pc, #20]	; (8003bf0 <Thread1+0x30>)
 8003bdc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003be0:	611a      	str	r2, [r3, #16]
    chThdSleepMilliseconds(100);
 8003be2:	20c8      	movs	r0, #200	; 0xc8
 8003be4:	f7ff fbd4 	bl	8003390 <chThdSleep>
 8003be8:	e7f0      	b.n	8003bcc <Thread1+0xc>
 8003bea:	bf00      	nop
 8003bec:	08005668 	.word	0x08005668
 8003bf0:	40011000 	.word	0x40011000
	...

08003c00 <main>:

/*
 * Application entry point.
 */
int main(void)
{
 8003c00:	b500      	push	{lr}
 8003c02:	b085      	sub	sp, #20
   * - HAL initialization, this also initializes the configured device drivers
   *	 and performs the board-specific initializations.
   * - Kernel initialization, the main() function becomes a thread and the
   *	 RTOS is active.
   */
  halInit();
 8003c04:	f7fc fd8c 	bl	8000720 <halInit>
  chSysInit();
 8003c08:	f7fe fc82 	bl	8002510 <chSysInit>

  /*
   * Creates the blinker thread.
   */
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	9300      	str	r3, [sp, #0]
 8003c10:	4b25      	ldr	r3, [pc, #148]	; (8003ca8 <main+0xa8>)
 8003c12:	2280      	movs	r2, #128	; 0x80
 8003c14:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003c18:	4824      	ldr	r0, [pc, #144]	; (8003cac <main+0xac>)
 8003c1a:	f7ff fb11 	bl	8003240 <chThdCreateStatic>

  spiObjectInit(&SPID2);
 8003c1e:	4824      	ldr	r0, [pc, #144]	; (8003cb0 <main+0xb0>)
 8003c20:	f7fd fb06 	bl	8001230 <spiObjectInit>
  spiStart(&SPID2, &epdSpiConfig);
 8003c24:	4923      	ldr	r1, [pc, #140]	; (8003cb4 <main+0xb4>)
 8003c26:	4822      	ldr	r0, [pc, #136]	; (8003cb0 <main+0xb0>)
 8003c28:	f7fd fb1a 	bl	8001260 <spiStart>

  EPD_PowerOn();
 8003c2c:	f000 fb80 	bl	8004330 <EPD_PowerOn>
  EPD_Initialize();
 8003c30:	f000 fb9e 	bl	8004370 <EPD_Initialize>

  memset(bufA, 0, sizeof(bufA));
 8003c34:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8003c38:	2100      	movs	r1, #0
 8003c3a:	481f      	ldr	r0, [pc, #124]	; (8003cb8 <main+0xb8>)
 8003c3c:	f000 fe8a 	bl	8004954 <memset>

  systime_t start = chVTGetSystemTime();
 8003c40:	f7ff ff96 	bl	8003b70 <chVTGetSystemTime.lto_priv.0>
 8003c44:	4603      	mov	r3, r0
 8003c46:	f8ad 300a 	strh.w	r3, [sp, #10]
  EPD_UpdateDisplay(bufA, paraglider);
 8003c4a:	491c      	ldr	r1, [pc, #112]	; (8003cbc <main+0xbc>)
 8003c4c:	481a      	ldr	r0, [pc, #104]	; (8003cb8 <main+0xb8>)
 8003c4e:	f000 fcbf 	bl	80045d0 <EPD_UpdateDisplay>
  systime_t end = chVTGetSystemTime();
 8003c52:	f7ff ff8d 	bl	8003b70 <chVTGetSystemTime.lto_priv.0>
 8003c56:	4603      	mov	r3, r0
 8003c58:	f8ad 3008 	strh.w	r3, [sp, #8]

  size_t n = 0;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	9303      	str	r3, [sp, #12]
 8003c60:	e010      	b.n	8003c84 <main+0x84>
  while (n < 15) {
    if (n % 2) {
 8003c62:	9b03      	ldr	r3, [sp, #12]
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d004      	beq.n	8003c76 <main+0x76>
      EPD_PartialUpdate(paraglider, paraglider2);
 8003c6c:	4914      	ldr	r1, [pc, #80]	; (8003cc0 <main+0xc0>)
 8003c6e:	4813      	ldr	r0, [pc, #76]	; (8003cbc <main+0xbc>)
 8003c70:	f000 fcee 	bl	8004650 <EPD_PartialUpdate>
 8003c74:	e003      	b.n	8003c7e <main+0x7e>
    } else {
      EPD_PartialUpdate(paraglider2, paraglider);
 8003c76:	4911      	ldr	r1, [pc, #68]	; (8003cbc <main+0xbc>)
 8003c78:	4811      	ldr	r0, [pc, #68]	; (8003cc0 <main+0xc0>)
 8003c7a:	f000 fce9 	bl	8004650 <EPD_PartialUpdate>
    }

    n++;
 8003c7e:	9b03      	ldr	r3, [sp, #12]
 8003c80:	3301      	adds	r3, #1
 8003c82:	9303      	str	r3, [sp, #12]
  while (n < 15) {
 8003c84:	9b03      	ldr	r3, [sp, #12]
 8003c86:	2b0e      	cmp	r3, #14
 8003c88:	d9eb      	bls.n	8003c62 <main+0x62>
  }

  EPD_UpdateDisplay(paraglider, paraglider);
 8003c8a:	490c      	ldr	r1, [pc, #48]	; (8003cbc <main+0xbc>)
 8003c8c:	480b      	ldr	r0, [pc, #44]	; (8003cbc <main+0xbc>)
 8003c8e:	f000 fc9f 	bl	80045d0 <EPD_UpdateDisplay>
  EPD_UpdateDisplay(paraglider, paraglider);
 8003c92:	490a      	ldr	r1, [pc, #40]	; (8003cbc <main+0xbc>)
 8003c94:	4809      	ldr	r0, [pc, #36]	; (8003cbc <main+0xbc>)
 8003c96:	f000 fc9b 	bl	80045d0 <EPD_UpdateDisplay>

  EPD_PowerOff();
 8003c9a:	f000 fcf1 	bl	8004680 <EPD_PowerOff>
  /*
   * Normal main() thread activity, in this demo it does nothing except
   * sleeping in a loop and check the button state.
   */
  while (true) {
    chThdSleepMilliseconds(500);
 8003c9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ca2:	f7ff fb75 	bl	8003390 <chThdSleep>
 8003ca6:	e7fa      	b.n	8003c9e <main+0x9e>
 8003ca8:	08003bc1 	.word	0x08003bc1
 8003cac:	20000ab8 	.word	0x20000ab8
 8003cb0:	20000840 	.word	0x20000840
 8003cb4:	08005670 	.word	0x08005670
 8003cb8:	20000c00 	.word	0x20000c00
 8003cbc:	08004d68 	.word	0x08004d68
 8003cc0:	08005684 	.word	0x08005684
	...

08003cd0 <EPD_setScanByte>:

/*****************************************************************************/
/* DEFINITION OF GLOBAL FUNCTIONS                                            */
/*****************************************************************************/
void EPD_setScanByte(EPD_Line_t *pline, size_t i)
{
 8003cd0:	b088      	sub	sp, #32
 8003cd2:	9001      	str	r0, [sp, #4]
 8003cd4:	9100      	str	r1, [sp, #0]
  size_t j = i + 1;
 8003cd6:	9b00      	ldr	r3, [sp, #0]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	9307      	str	r3, [sp, #28]

  if (j % 2) {
 8003cdc:	9b07      	ldr	r3, [sp, #28]
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d014      	beq.n	8003d10 <EPD_setScanByte+0x40>
    size_t shift               = 127 - j;
 8003ce6:	9b07      	ldr	r3, [sp, #28]
 8003ce8:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8003cec:	9304      	str	r3, [sp, #16]
    size_t byte                = shift / 8;
 8003cee:	9b04      	ldr	r3, [sp, #16]
 8003cf0:	08db      	lsrs	r3, r3, #3
 8003cf2:	9303      	str	r3, [sp, #12]
    pline->line.scan_odd[byte] = 0xC0 >> (shift % 8);
 8003cf4:	9b04      	ldr	r3, [sp, #16]
 8003cf6:	f003 0307 	and.w	r3, r3, #7
 8003cfa:	22c0      	movs	r2, #192	; 0xc0
 8003cfc:	fa42 f303 	asr.w	r3, r2, r3
 8003d00:	b2d9      	uxtb	r1, r3
 8003d02:	9a01      	ldr	r2, [sp, #4]
 8003d04:	9b03      	ldr	r3, [sp, #12]
 8003d06:	4413      	add	r3, r2
 8003d08:	3334      	adds	r3, #52	; 0x34
 8003d0a:	460a      	mov	r2, r1
 8003d0c:	701a      	strb	r2, [r3, #0]
 8003d0e:	e011      	b.n	8003d34 <EPD_setScanByte+0x64>
  } else {
    size_t shift                = j - 2;
 8003d10:	9b07      	ldr	r3, [sp, #28]
 8003d12:	3b02      	subs	r3, #2
 8003d14:	9306      	str	r3, [sp, #24]
    size_t byte                 = shift / 8;
 8003d16:	9b06      	ldr	r3, [sp, #24]
 8003d18:	08db      	lsrs	r3, r3, #3
 8003d1a:	9305      	str	r3, [sp, #20]
    pline->line.scan_even[byte] = 0xC0 >> (shift % 8);
 8003d1c:	9b06      	ldr	r3, [sp, #24]
 8003d1e:	f003 0307 	and.w	r3, r3, #7
 8003d22:	22c0      	movs	r2, #192	; 0xc0
 8003d24:	fa42 f303 	asr.w	r3, r2, r3
 8003d28:	b2d9      	uxtb	r1, r3
 8003d2a:	9a01      	ldr	r2, [sp, #4]
 8003d2c:	9b05      	ldr	r3, [sp, #20]
 8003d2e:	4413      	add	r3, r2
 8003d30:	460a      	mov	r2, r1
 8003d32:	701a      	strb	r2, [r3, #0]
  }
}
 8003d34:	b008      	add	sp, #32
 8003d36:	4770      	bx	lr
	...

08003d40 <EPD_CreateDataBytes>:

void EPD_CreateDataBytes(uint8_t byte, EPD_Stage_t stage, uint8_t *pd1, uint8_t *pd2)
{
 8003d40:	b086      	sub	sp, #24
 8003d42:	9202      	str	r2, [sp, #8]
 8003d44:	9301      	str	r3, [sp, #4]
 8003d46:	4603      	mov	r3, r0
 8003d48:	f88d 300f 	strb.w	r3, [sp, #15]
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	f88d 300e 	strb.w	r3, [sp, #14]
  size_t i = 0;
 8003d52:	2300      	movs	r3, #0
 8003d54:	9305      	str	r3, [sp, #20]
  for (i = 0; i < 8; ++i) {
 8003d56:	2300      	movs	r3, #0
 8003d58:	9305      	str	r3, [sp, #20]
 8003d5a:	e079      	b.n	8003e50 <EPD_CreateDataBytes+0x110>
    uint8_t mask = 0x01 << i;
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	9b05      	ldr	r3, [sp, #20]
 8003d60:	fa02 f303 	lsl.w	r3, r2, r3
 8003d64:	f88d 3012 	strb.w	r3, [sp, #18]

    EPD_PixelColor_t pixel;

    switch (stage) {
 8003d68:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8003d6c:	2b03      	cmp	r3, #3
 8003d6e:	d842      	bhi.n	8003df6 <EPD_CreateDataBytes+0xb6>
 8003d70:	a201      	add	r2, pc, #4	; (adr r2, 8003d78 <EPD_CreateDataBytes+0x38>)
 8003d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d76:	bf00      	nop
 8003d78:	08003d89 	.word	0x08003d89
 8003d7c:	08003da5 	.word	0x08003da5
 8003d80:	08003dc1 	.word	0x08003dc1
 8003d84:	08003ddd 	.word	0x08003ddd
    case EPD_STAGE_1: {
      // Write the inverse
      pixel = (byte & mask) ? EPD_PIXEL_WHITE : EPD_PIXEL_BLACK;
 8003d88:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8003d8c:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8003d90:	4013      	ands	r3, r2
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <EPD_CreateDataBytes+0x5c>
 8003d98:	2302      	movs	r3, #2
 8003d9a:	e000      	b.n	8003d9e <EPD_CreateDataBytes+0x5e>
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	f88d 3013 	strb.w	r3, [sp, #19]
 8003da2:	e028      	b.n	8003df6 <EPD_CreateDataBytes+0xb6>
      break;
    }
    case EPD_STAGE_2: {
      // Write white
      pixel = (byte & mask) ? EPD_PIXEL_NOTHING : EPD_PIXEL_WHITE;
 8003da4:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8003da8:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8003dac:	4013      	ands	r3, r2
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <EPD_CreateDataBytes+0x78>
 8003db4:	2300      	movs	r3, #0
 8003db6:	e000      	b.n	8003dba <EPD_CreateDataBytes+0x7a>
 8003db8:	2302      	movs	r3, #2
 8003dba:	f88d 3013 	strb.w	r3, [sp, #19]
 8003dbe:	e01a      	b.n	8003df6 <EPD_CreateDataBytes+0xb6>
      break;
    }
    case EPD_STAGE_3: {
      // Write the inverse
      pixel = (byte & mask) ? EPD_PIXEL_NOTHING : EPD_PIXEL_BLACK;
 8003dc0:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8003dc4:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8003dc8:	4013      	ands	r3, r2
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d001      	beq.n	8003dd4 <EPD_CreateDataBytes+0x94>
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	e000      	b.n	8003dd6 <EPD_CreateDataBytes+0x96>
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	f88d 3013 	strb.w	r3, [sp, #19]
 8003dda:	e00c      	b.n	8003df6 <EPD_CreateDataBytes+0xb6>
      break;
    }
    case EPD_STAGE_4: {
      // Write image
      pixel = (byte & mask) ? EPD_PIXEL_BLACK : EPD_PIXEL_WHITE;
 8003ddc:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8003de0:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8003de4:	4013      	ands	r3, r2
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d001      	beq.n	8003df0 <EPD_CreateDataBytes+0xb0>
 8003dec:	2303      	movs	r3, #3
 8003dee:	e000      	b.n	8003df2 <EPD_CreateDataBytes+0xb2>
 8003df0:	2302      	movs	r3, #2
 8003df2:	f88d 3013 	strb.w	r3, [sp, #19]
    default: {
      break;
    }
    }

    if (i < 4)
 8003df6:	9b05      	ldr	r3, [sp, #20]
 8003df8:	2b03      	cmp	r3, #3
 8003dfa:	d813      	bhi.n	8003e24 <EPD_CreateDataBytes+0xe4>
      *pd1 |= ((uint8_t)pixel) << (((4 - i) * 2) - 2);
 8003dfc:	9b02      	ldr	r3, [sp, #8]
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	b259      	sxtb	r1, r3
 8003e02:	f89d 0013 	ldrb.w	r0, [sp, #19]
 8003e06:	9a05      	ldr	r2, [sp, #20]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	07db      	lsls	r3, r3, #31
 8003e0c:	1a9b      	subs	r3, r3, r2
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	3306      	adds	r3, #6
 8003e12:	fa00 f303 	lsl.w	r3, r0, r3
 8003e16:	b25b      	sxtb	r3, r3
 8003e18:	430b      	orrs	r3, r1
 8003e1a:	b25b      	sxtb	r3, r3
 8003e1c:	b2da      	uxtb	r2, r3
 8003e1e:	9b02      	ldr	r3, [sp, #8]
 8003e20:	701a      	strb	r2, [r3, #0]
 8003e22:	e012      	b.n	8003e4a <EPD_CreateDataBytes+0x10a>
    else
      *pd2 |= ((uint8_t)pixel) << (((8 - i) * 2) - 2);
 8003e24:	9b01      	ldr	r3, [sp, #4]
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	b259      	sxtb	r1, r3
 8003e2a:	f89d 0013 	ldrb.w	r0, [sp, #19]
 8003e2e:	9a05      	ldr	r2, [sp, #20]
 8003e30:	4613      	mov	r3, r2
 8003e32:	07db      	lsls	r3, r3, #31
 8003e34:	1a9b      	subs	r3, r3, r2
 8003e36:	005b      	lsls	r3, r3, #1
 8003e38:	330e      	adds	r3, #14
 8003e3a:	fa00 f303 	lsl.w	r3, r0, r3
 8003e3e:	b25b      	sxtb	r3, r3
 8003e40:	430b      	orrs	r3, r1
 8003e42:	b25b      	sxtb	r3, r3
 8003e44:	b2da      	uxtb	r2, r3
 8003e46:	9b01      	ldr	r3, [sp, #4]
 8003e48:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 8; ++i) {
 8003e4a:	9b05      	ldr	r3, [sp, #20]
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	9305      	str	r3, [sp, #20]
 8003e50:	9b05      	ldr	r3, [sp, #20]
 8003e52:	2b07      	cmp	r3, #7
 8003e54:	d982      	bls.n	8003d5c <EPD_CreateDataBytes+0x1c>
  }
}
 8003e56:	b006      	add	sp, #24
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	0000      	movs	r0, r0
	...

08003e60 <port_timer_get_time.lto_priv.55>:
static inline systime_t port_timer_get_time(void) {
 8003e60:	b508      	push	{r3, lr}
  return stGetCounter();
 8003e62:	f7fc fcdd 	bl	8000820 <stGetCounter>
 8003e66:	4603      	mov	r3, r0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	bd08      	pop	{r3, pc}
 8003e6c:	0000      	movs	r0, r0
	...

08003e70 <chSysLock.lto_priv.50>:
static inline void chSysLock(void) {
 8003e70:	b500      	push	{lr}
 8003e72:	b083      	sub	sp, #12
 8003e74:	2320      	movs	r3, #32
 8003e76:	9301      	str	r3, [sp, #4]
 8003e78:	9b01      	ldr	r3, [sp, #4]
 8003e7a:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8003e7e:	f7fe fba7 	bl	80025d0 <_dbg_check_lock>
}
 8003e82:	b003      	add	sp, #12
 8003e84:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003e90 <chSysUnlock.lto_priv.28>:
static inline void chSysUnlock(void) {
 8003e90:	b500      	push	{lr}
 8003e92:	b083      	sub	sp, #12
  _dbg_check_unlock();
 8003e94:	f7fe fbb4 	bl	8002600 <_dbg_check_unlock>
 8003e98:	2300      	movs	r3, #0
 8003e9a:	9301      	str	r3, [sp, #4]
 8003e9c:	9b01      	ldr	r3, [sp, #4]
 8003e9e:	f383 8811 	msr	BASEPRI, r3
}
 8003ea2:	b003      	add	sp, #12
 8003ea4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003eb0 <chVTGetSystemTimeX.lto_priv.6>:
static inline systime_t chVTGetSystemTimeX(void) {
 8003eb0:	b508      	push	{r3, lr}
  return port_timer_get_time();
 8003eb2:	f7ff ffd5 	bl	8003e60 <port_timer_get_time.lto_priv.55>
 8003eb6:	4603      	mov	r3, r0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	bd08      	pop	{r3, pc}
 8003ebc:	0000      	movs	r0, r0
	...

08003ec0 <chVTGetSystemTime.lto_priv.1>:
static inline systime_t chVTGetSystemTime(void) {
 8003ec0:	b500      	push	{lr}
 8003ec2:	b083      	sub	sp, #12
  chSysLock();
 8003ec4:	f7ff ffd4 	bl	8003e70 <chSysLock.lto_priv.50>
  systime = chVTGetSystemTimeX();
 8003ec8:	f7ff fff2 	bl	8003eb0 <chVTGetSystemTimeX.lto_priv.6>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	f8ad 3006 	strh.w	r3, [sp, #6]
  chSysUnlock();
 8003ed2:	f7ff ffdd 	bl	8003e90 <chSysUnlock.lto_priv.28>
  return systime;
 8003ed6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	b003      	add	sp, #12
 8003ede:	f85d fb04 	ldr.w	pc, [sp], #4
 8003ee2:	bf00      	nop
	...

08003ef0 <EPD_WriteFrame>:

#include "ch.h"

void EPD_WriteFrame(const uint8_t image[128][144 / 8], EPD_Stage_t stage)
{
 8003ef0:	b500      	push	{lr}
 8003ef2:	b09d      	sub	sp, #116	; 0x74
 8003ef4:	9001      	str	r0, [sp, #4]
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	f88d 3003 	strb.w	r3, [sp, #3]
  EPD_Line_t line;

  systime_t start = chVTGetSystemTime();
 8003efc:	f7ff ffe0 	bl	8003ec0 <chVTGetSystemTime.lto_priv.1>
 8003f00:	4603      	mov	r3, r0
 8003f02:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66

  uint8_t border = (EPD_STAGE_4 == stage) ? 0xAA : 0x00;
 8003f06:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003f0a:	2b03      	cmp	r3, #3
 8003f0c:	d101      	bne.n	8003f12 <EPD_WriteFrame+0x22>
 8003f0e:	23aa      	movs	r3, #170	; 0xaa
 8003f10:	e000      	b.n	8003f14 <EPD_WriteFrame+0x24>
 8003f12:	2300      	movs	r3, #0
 8003f14:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65

  size_t y = 0;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	931b      	str	r3, [sp, #108]	; 0x6c
  for (y = 0; y < 128; ++y) {
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	931b      	str	r3, [sp, #108]	; 0x6c
 8003f20:	e053      	b.n	8003fca <EPD_WriteFrame+0xda>
    memset(&line, 0, sizeof(line));
 8003f22:	ab04      	add	r3, sp, #16
 8003f24:	2245      	movs	r2, #69	; 0x45
 8003f26:	2100      	movs	r1, #0
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f000 fd13 	bl	8004954 <memset>

    EPD_setScanByte(&line, y);
 8003f2e:	ab04      	add	r3, sp, #16
 8003f30:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7ff fecc 	bl	8003cd0 <EPD_setScanByte>
    line.line.border = border;
 8003f38:	f89d 3065 	ldrb.w	r3, [sp, #101]	; 0x65
 8003f3c:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54

    size_t x = 0;
 8003f40:	2300      	movs	r3, #0
 8003f42:	931a      	str	r3, [sp, #104]	; 0x68
    for (x = 0; x < (144 / 8); ++x) {
 8003f44:	2300      	movs	r3, #0
 8003f46:	931a      	str	r3, [sp, #104]	; 0x68
 8003f48:	e025      	b.n	8003f96 <EPD_WriteFrame+0xa6>
      uint8_t b    = image[y][(144 / 8) - x - 1];
 8003f4a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	4413      	add	r3, r2
 8003f52:	005b      	lsls	r3, r3, #1
 8003f54:	461a      	mov	r2, r3
 8003f56:	9b01      	ldr	r3, [sp, #4]
 8003f58:	441a      	add	r2, r3
 8003f5a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8003f5c:	f1c3 0311 	rsb	r3, r3, #17
 8003f60:	5cd3      	ldrb	r3, [r2, r3]
 8003f62:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
      uint8_t *pd1 = &line.line.data[2 * x];
 8003f66:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	aa04      	add	r2, sp, #16
 8003f6c:	3310      	adds	r3, #16
 8003f6e:	4413      	add	r3, r2
 8003f70:	9317      	str	r3, [sp, #92]	; 0x5c
      uint8_t *pd2 = &line.line.data[2 * x + 1];
 8003f72:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	3301      	adds	r3, #1
 8003f78:	aa04      	add	r2, sp, #16
 8003f7a:	3310      	adds	r3, #16
 8003f7c:	4413      	add	r3, r2
 8003f7e:	9316      	str	r3, [sp, #88]	; 0x58

      EPD_CreateDataBytes(b, stage, pd1, pd2);
 8003f80:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8003f84:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
 8003f88:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003f8a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003f8c:	f7ff fed8 	bl	8003d40 <EPD_CreateDataBytes>
    for (x = 0; x < (144 / 8); ++x) {
 8003f90:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8003f92:	3301      	adds	r3, #1
 8003f94:	931a      	str	r3, [sp, #104]	; 0x68
 8003f96:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8003f98:	2b11      	cmp	r3, #17
 8003f9a:	d9d6      	bls.n	8003f4a <EPD_WriteFrame+0x5a>
    }

    EPD_Write(0x0a, line.bytes.data, sizeof(line.bytes.data));
 8003f9c:	ab04      	add	r3, sp, #16
 8003f9e:	2245      	movs	r2, #69	; 0x45
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	200a      	movs	r0, #10
 8003fa4:	f000 f964 	bl	8004270 <EPD_Write>

    // Turn on OE
    uint8_t cmd  = 0x02;
 8003fa8:	2302      	movs	r3, #2
 8003faa:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
    uint8_t data = 0x07;
 8003fae:	2307      	movs	r3, #7
 8003fb0:	f88d 300f 	strb.w	r3, [sp, #15]
    EPD_Write(cmd, &data, 1);
 8003fb4:	f10d 010f 	add.w	r1, sp, #15
 8003fb8:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f000 f956 	bl	8004270 <EPD_Write>
  for (y = 0; y < 128; ++y) {
 8003fc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	931b      	str	r3, [sp, #108]	; 0x6c
 8003fca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003fcc:	2b7f      	cmp	r3, #127	; 0x7f
 8003fce:	d9a8      	bls.n	8003f22 <EPD_WriteFrame+0x32>
  }

  systime_t end = chVTGetSystemTime();
 8003fd0:	f7ff ff76 	bl	8003ec0 <chVTGetSystemTime.lto_priv.1>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
}
 8003fda:	b01d      	add	sp, #116	; 0x74
 8003fdc:	f85d fb04 	ldr.w	pc, [sp], #4

08003fe0 <EPD_WritePartialUpdateFrame>:

void EPD_WritePartialUpdateFrame(const uint8_t old[128][144 / 8], const uint8_t new[128][144 / 8])
{
 8003fe0:	b500      	push	{lr}
 8003fe2:	b09d      	sub	sp, #116	; 0x74
 8003fe4:	9001      	str	r0, [sp, #4]
 8003fe6:	9100      	str	r1, [sp, #0]
  EPD_Line_t line;

  uint8_t border = 0xAA;
 8003fe8:	23aa      	movs	r3, #170	; 0xaa
 8003fea:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62

  size_t y = 0;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	931b      	str	r3, [sp, #108]	; 0x6c
  for (y = 0; y < 128; ++y) {
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	931b      	str	r3, [sp, #108]	; 0x6c
 8003ff6:	e0b4      	b.n	8004162 <EPD_WritePartialUpdateFrame+0x182>
    memset(&line, 0, sizeof(line));
 8003ff8:	ab03      	add	r3, sp, #12
 8003ffa:	2245      	movs	r2, #69	; 0x45
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 fca8 	bl	8004954 <memset>

    EPD_setScanByte(&line, y);
 8004004:	ab03      	add	r3, sp, #12
 8004006:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8004008:	4618      	mov	r0, r3
 800400a:	f7ff fe61 	bl	8003cd0 <EPD_setScanByte>
    line.line.border = border;
 800400e:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
 8004012:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50

    size_t x = 0;
 8004016:	2300      	movs	r3, #0
 8004018:	931a      	str	r3, [sp, #104]	; 0x68
    for (x = 0; x < (144 / 8); ++x) {
 800401a:	2300      	movs	r3, #0
 800401c:	931a      	str	r3, [sp, #104]	; 0x68
 800401e:	e085      	b.n	800412c <EPD_WritePartialUpdateFrame+0x14c>
      uint8_t bo = old[y][(144 / 8) - x - 1];
 8004020:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004022:	4613      	mov	r3, r2
 8004024:	00db      	lsls	r3, r3, #3
 8004026:	4413      	add	r3, r2
 8004028:	005b      	lsls	r3, r3, #1
 800402a:	461a      	mov	r2, r3
 800402c:	9b01      	ldr	r3, [sp, #4]
 800402e:	441a      	add	r2, r3
 8004030:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8004032:	f1c3 0311 	rsb	r3, r3, #17
 8004036:	5cd3      	ldrb	r3, [r2, r3]
 8004038:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
      uint8_t bn = new[y][(144 / 8) - x - 1];
 800403c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800403e:	4613      	mov	r3, r2
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	4413      	add	r3, r2
 8004044:	005b      	lsls	r3, r3, #1
 8004046:	461a      	mov	r2, r3
 8004048:	9b00      	ldr	r3, [sp, #0]
 800404a:	441a      	add	r2, r3
 800404c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800404e:	f1c3 0311 	rsb	r3, r3, #17
 8004052:	5cd3      	ldrb	r3, [r2, r3]
 8004054:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f

      uint8_t *pd1 = &line.line.data[2 * x];
 8004058:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800405a:	005b      	lsls	r3, r3, #1
 800405c:	aa03      	add	r2, sp, #12
 800405e:	3310      	adds	r3, #16
 8004060:	4413      	add	r3, r2
 8004062:	9316      	str	r3, [sp, #88]	; 0x58
      uint8_t *pd2 = &line.line.data[2 * x + 1];
 8004064:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8004066:	005b      	lsls	r3, r3, #1
 8004068:	3301      	adds	r3, #1
 800406a:	aa03      	add	r2, sp, #12
 800406c:	3310      	adds	r3, #16
 800406e:	4413      	add	r3, r2
 8004070:	9315      	str	r3, [sp, #84]	; 0x54

      size_t i = 0;
 8004072:	2300      	movs	r3, #0
 8004074:	9319      	str	r3, [sp, #100]	; 0x64
      for (i = 0; i < 8; ++i) {
 8004076:	2300      	movs	r3, #0
 8004078:	9319      	str	r3, [sp, #100]	; 0x64
 800407a:	e051      	b.n	8004120 <EPD_WritePartialUpdateFrame+0x140>
        uint8_t mask = 0x01 << i;
 800407c:	2201      	movs	r2, #1
 800407e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004080:	fa02 f303 	lsl.w	r3, r2, r3
 8004084:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53

        EPD_PixelColor_t pixel;
        if ((bo & mask) == (bn & mask))
 8004088:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
 800408c:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8004090:	4053      	eors	r3, r2
 8004092:	b2da      	uxtb	r2, r3
 8004094:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 8004098:	4013      	ands	r3, r2
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b00      	cmp	r3, #0
 800409e:	d103      	bne.n	80040a8 <EPD_WritePartialUpdateFrame+0xc8>
          pixel = EPD_PIXEL_NOTHING;
 80040a0:	2300      	movs	r3, #0
 80040a2:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
 80040a6:	e00e      	b.n	80040c6 <EPD_WritePartialUpdateFrame+0xe6>
        else if (bn & mask)
 80040a8:	f89d 205f 	ldrb.w	r2, [sp, #95]	; 0x5f
 80040ac:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 80040b0:	4013      	ands	r3, r2
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d003      	beq.n	80040c0 <EPD_WritePartialUpdateFrame+0xe0>
          pixel = EPD_PIXEL_BLACK;
 80040b8:	2303      	movs	r3, #3
 80040ba:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
 80040be:	e002      	b.n	80040c6 <EPD_WritePartialUpdateFrame+0xe6>
        else
          pixel = EPD_PIXEL_WHITE;
 80040c0:	2302      	movs	r3, #2
 80040c2:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63

        if (i < 4)
 80040c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80040c8:	2b03      	cmp	r3, #3
 80040ca:	d813      	bhi.n	80040f4 <EPD_WritePartialUpdateFrame+0x114>
          *pd1 |= ((uint8_t)pixel) << (((4 - i) * 2) - 2);
 80040cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	b259      	sxtb	r1, r3
 80040d2:	f89d 0063 	ldrb.w	r0, [sp, #99]	; 0x63
 80040d6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80040d8:	4613      	mov	r3, r2
 80040da:	07db      	lsls	r3, r3, #31
 80040dc:	1a9b      	subs	r3, r3, r2
 80040de:	005b      	lsls	r3, r3, #1
 80040e0:	3306      	adds	r3, #6
 80040e2:	fa00 f303 	lsl.w	r3, r0, r3
 80040e6:	b25b      	sxtb	r3, r3
 80040e8:	430b      	orrs	r3, r1
 80040ea:	b25b      	sxtb	r3, r3
 80040ec:	b2da      	uxtb	r2, r3
 80040ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80040f0:	701a      	strb	r2, [r3, #0]
 80040f2:	e012      	b.n	800411a <EPD_WritePartialUpdateFrame+0x13a>
        else
          *pd2 |= ((uint8_t)pixel) << (((8 - i) * 2) - 2);
 80040f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	b259      	sxtb	r1, r3
 80040fa:	f89d 0063 	ldrb.w	r0, [sp, #99]	; 0x63
 80040fe:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004100:	4613      	mov	r3, r2
 8004102:	07db      	lsls	r3, r3, #31
 8004104:	1a9b      	subs	r3, r3, r2
 8004106:	005b      	lsls	r3, r3, #1
 8004108:	330e      	adds	r3, #14
 800410a:	fa00 f303 	lsl.w	r3, r0, r3
 800410e:	b25b      	sxtb	r3, r3
 8004110:	430b      	orrs	r3, r1
 8004112:	b25b      	sxtb	r3, r3
 8004114:	b2da      	uxtb	r2, r3
 8004116:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004118:	701a      	strb	r2, [r3, #0]
      for (i = 0; i < 8; ++i) {
 800411a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800411c:	3301      	adds	r3, #1
 800411e:	9319      	str	r3, [sp, #100]	; 0x64
 8004120:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004122:	2b07      	cmp	r3, #7
 8004124:	d9aa      	bls.n	800407c <EPD_WritePartialUpdateFrame+0x9c>
    for (x = 0; x < (144 / 8); ++x) {
 8004126:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8004128:	3301      	adds	r3, #1
 800412a:	931a      	str	r3, [sp, #104]	; 0x68
 800412c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800412e:	2b11      	cmp	r3, #17
 8004130:	f67f af76 	bls.w	8004020 <EPD_WritePartialUpdateFrame+0x40>
      }
    }

    EPD_Write(0x0a, line.bytes.data, sizeof(line.bytes.data));
 8004134:	ab03      	add	r3, sp, #12
 8004136:	2245      	movs	r2, #69	; 0x45
 8004138:	4619      	mov	r1, r3
 800413a:	200a      	movs	r0, #10
 800413c:	f000 f898 	bl	8004270 <EPD_Write>

    // Turn on OE
    uint8_t cmd  = 0x02;
 8004140:	2302      	movs	r3, #2
 8004142:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
    uint8_t data = 0x07;
 8004146:	2307      	movs	r3, #7
 8004148:	f88d 300b 	strb.w	r3, [sp, #11]
    EPD_Write(cmd, &data, 1);
 800414c:	f10d 010b 	add.w	r1, sp, #11
 8004150:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
 8004154:	2201      	movs	r2, #1
 8004156:	4618      	mov	r0, r3
 8004158:	f000 f88a 	bl	8004270 <EPD_Write>
  for (y = 0; y < 128; ++y) {
 800415c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800415e:	3301      	adds	r3, #1
 8004160:	931b      	str	r3, [sp, #108]	; 0x6c
 8004162:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004164:	2b7f      	cmp	r3, #127	; 0x7f
 8004166:	f67f af47 	bls.w	8003ff8 <EPD_WritePartialUpdateFrame+0x18>
  }
}
 800416a:	b01d      	add	sp, #116	; 0x74
 800416c:	f85d fb04 	ldr.w	pc, [sp], #4

08004170 <EPD_WriteNothingFrame>:

void EPD_WriteNothingFrame(void)
{
 8004170:	b500      	push	{lr}
 8004172:	b095      	sub	sp, #84	; 0x54
  EPD_Line_t line;

  uint8_t border = 0xAA;
 8004174:	23aa      	movs	r3, #170	; 0xaa
 8004176:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b

  size_t y = 0;
 800417a:	2300      	movs	r3, #0
 800417c:	9313      	str	r3, [sp, #76]	; 0x4c
  for (y = 0; y < 128; ++y) {
 800417e:	2300      	movs	r3, #0
 8004180:	9313      	str	r3, [sp, #76]	; 0x4c
 8004182:	e025      	b.n	80041d0 <EPD_WriteNothingFrame+0x60>
    memset(&line, 0, sizeof(line));
 8004184:	ab01      	add	r3, sp, #4
 8004186:	2245      	movs	r2, #69	; 0x45
 8004188:	2100      	movs	r1, #0
 800418a:	4618      	mov	r0, r3
 800418c:	f000 fbe2 	bl	8004954 <memset>

    EPD_setScanByte(&line, y);
 8004190:	ab01      	add	r3, sp, #4
 8004192:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8004194:	4618      	mov	r0, r3
 8004196:	f7ff fd9b 	bl	8003cd0 <EPD_setScanByte>
    line.line.border = border;
 800419a:	f89d 304b 	ldrb.w	r3, [sp, #75]	; 0x4b
 800419e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    EPD_Write(0x0a, line.bytes.data, sizeof(line.bytes.data));
 80041a2:	ab01      	add	r3, sp, #4
 80041a4:	2245      	movs	r2, #69	; 0x45
 80041a6:	4619      	mov	r1, r3
 80041a8:	200a      	movs	r0, #10
 80041aa:	f000 f861 	bl	8004270 <EPD_Write>

    // Turn on OE
    uint8_t cmd  = 0x02;
 80041ae:	2302      	movs	r3, #2
 80041b0:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
    uint8_t data = 0x07;
 80041b4:	2307      	movs	r3, #7
 80041b6:	f88d 3003 	strb.w	r3, [sp, #3]
    EPD_Write(cmd, &data, 1);
 80041ba:	f10d 0103 	add.w	r1, sp, #3
 80041be:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 80041c2:	2201      	movs	r2, #1
 80041c4:	4618      	mov	r0, r3
 80041c6:	f000 f853 	bl	8004270 <EPD_Write>
  for (y = 0; y < 128; ++y) {
 80041ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80041cc:	3301      	adds	r3, #1
 80041ce:	9313      	str	r3, [sp, #76]	; 0x4c
 80041d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80041d2:	2b7f      	cmp	r3, #127	; 0x7f
 80041d4:	d9d6      	bls.n	8004184 <EPD_WriteNothingFrame+0x14>
  }
}
 80041d6:	b015      	add	sp, #84	; 0x54
 80041d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80041dc:	0000      	movs	r0, r0
	...

080041e0 <EPD_WriteBorderDummyLine>:

void EPD_WriteBorderDummyLine(void)
{
 80041e0:	b500      	push	{lr}
 80041e2:	b095      	sub	sp, #84	; 0x54
  EPD_Line_t line;

  memset(&line, 0, sizeof(line));
 80041e4:	ab02      	add	r3, sp, #8
 80041e6:	2245      	movs	r2, #69	; 0x45
 80041e8:	2100      	movs	r1, #0
 80041ea:	4618      	mov	r0, r3
 80041ec:	f000 fbb2 	bl	8004954 <memset>
  line.line.border = 0xAA;
 80041f0:	23aa      	movs	r3, #170	; 0xaa
 80041f2:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c

  EPD_Write(0x0a, line.bytes.data, sizeof(line.bytes.data));
 80041f6:	ab02      	add	r3, sp, #8
 80041f8:	2245      	movs	r2, #69	; 0x45
 80041fa:	4619      	mov	r1, r3
 80041fc:	200a      	movs	r0, #10
 80041fe:	f000 f837 	bl	8004270 <EPD_Write>

  // Turn on OE
  uint8_t cmd  = 0x02;
 8004202:	2302      	movs	r3, #2
 8004204:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
  uint8_t data = 0x07;
 8004208:	2307      	movs	r3, #7
 800420a:	f88d 3007 	strb.w	r3, [sp, #7]
  EPD_Write(cmd, &data, 1);
 800420e:	f10d 0107 	add.w	r1, sp, #7
 8004212:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 8004216:	2201      	movs	r2, #1
 8004218:	4618      	mov	r0, r3
 800421a:	f000 f829 	bl	8004270 <EPD_Write>
}
 800421e:	b015      	add	sp, #84	; 0x54
 8004220:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004230 <EPD_readCogId>:

/*****************************************************************************/
/* DEFINITION OF LOCAL FUNCTIONS                                             */
/*****************************************************************************/
static uint8_t EPD_readCogId(void)
{
 8004230:	b500      	push	{lr}
 8004232:	b083      	sub	sp, #12
  uint8_t rid = 0x71;
 8004234:	2371      	movs	r3, #113	; 0x71
 8004236:	f88d 3007 	strb.w	r3, [sp, #7]
  uint8_t id  = 0;
 800423a:	2300      	movs	r3, #0
 800423c:	f88d 3006 	strb.w	r3, [sp, #6]

  EPD_SpiSelect();
 8004240:	f000 faa6 	bl	8004790 <EPD_SpiSelect>
  EPD_SpiSend(&rid, 1);
 8004244:	f10d 0307 	add.w	r3, sp, #7
 8004248:	2101      	movs	r1, #1
 800424a:	4618      	mov	r0, r3
 800424c:	f000 fab0 	bl	80047b0 <EPD_SpiSend>
  EPD_SpiReceive(&id, 1);
 8004250:	f10d 0306 	add.w	r3, sp, #6
 8004254:	2101      	movs	r1, #1
 8004256:	4618      	mov	r0, r3
 8004258:	f000 faba 	bl	80047d0 <EPD_SpiReceive>
  EPD_SpiUnselect();
 800425c:	f000 faa0 	bl	80047a0 <EPD_SpiUnselect>

  return id;
 8004260:	f89d 3006 	ldrb.w	r3, [sp, #6]
}
 8004264:	4618      	mov	r0, r3
 8004266:	b003      	add	sp, #12
 8004268:	f85d fb04 	ldr.w	pc, [sp], #4
 800426c:	0000      	movs	r0, r0
	...

08004270 <EPD_Write>:

/*****************************************************************************/
/* DEFINITION OF GLOBAL FUNCTIONS                                            */
/*****************************************************************************/
void EPD_Write(uint8_t cmd, const uint8_t data[], size_t length)
{
 8004270:	b500      	push	{lr}
 8004272:	b087      	sub	sp, #28
 8004274:	4603      	mov	r3, r0
 8004276:	9102      	str	r1, [sp, #8]
 8004278:	9201      	str	r2, [sp, #4]
 800427a:	f88d 300f 	strb.w	r3, [sp, #15]
  uint8_t cmdheader  = 0x70;
 800427e:	2370      	movs	r3, #112	; 0x70
 8004280:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t dataheader = 0x72;
 8004284:	2372      	movs	r3, #114	; 0x72
 8004286:	f88d 3016 	strb.w	r3, [sp, #22]

  EPD_SpiSelect();
 800428a:	f000 fa81 	bl	8004790 <EPD_SpiSelect>
  EPD_SpiSend(&cmdheader, 1);
 800428e:	f10d 0317 	add.w	r3, sp, #23
 8004292:	2101      	movs	r1, #1
 8004294:	4618      	mov	r0, r3
 8004296:	f000 fa8b 	bl	80047b0 <EPD_SpiSend>
  EPD_SpiSend(&cmd, 1);
 800429a:	f10d 030f 	add.w	r3, sp, #15
 800429e:	2101      	movs	r1, #1
 80042a0:	4618      	mov	r0, r3
 80042a2:	f000 fa85 	bl	80047b0 <EPD_SpiSend>
  EPD_SpiUnselect();
 80042a6:	f000 fa7b 	bl	80047a0 <EPD_SpiUnselect>

  // chThdSleepMicroseconds(1);

  EPD_SpiSelect();
 80042aa:	f000 fa71 	bl	8004790 <EPD_SpiSelect>
  EPD_SpiSend(&dataheader, 1);
 80042ae:	f10d 0316 	add.w	r3, sp, #22
 80042b2:	2101      	movs	r1, #1
 80042b4:	4618      	mov	r0, r3
 80042b6:	f000 fa7b 	bl	80047b0 <EPD_SpiSend>
  EPD_SpiSend(data, length);
 80042ba:	9901      	ldr	r1, [sp, #4]
 80042bc:	9802      	ldr	r0, [sp, #8]
 80042be:	f000 fa77 	bl	80047b0 <EPD_SpiSend>
  EPD_SpiUnselect();
 80042c2:	f000 fa6d 	bl	80047a0 <EPD_SpiUnselect>
}
 80042c6:	b007      	add	sp, #28
 80042c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80042cc:	0000      	movs	r0, r0
	...

080042d0 <EPD_Read>:

void EPD_Read(uint8_t cmd, uint8_t data[], size_t length)
{
 80042d0:	b500      	push	{lr}
 80042d2:	b087      	sub	sp, #28
 80042d4:	4603      	mov	r3, r0
 80042d6:	9102      	str	r1, [sp, #8]
 80042d8:	9201      	str	r2, [sp, #4]
 80042da:	f88d 300f 	strb.w	r3, [sp, #15]
  uint8_t cmdheader  = 0x70;
 80042de:	2370      	movs	r3, #112	; 0x70
 80042e0:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t dataheader = 0x73;
 80042e4:	2373      	movs	r3, #115	; 0x73
 80042e6:	f88d 3016 	strb.w	r3, [sp, #22]

  EPD_SpiSelect();
 80042ea:	f000 fa51 	bl	8004790 <EPD_SpiSelect>
  EPD_SpiSend(&cmdheader, 1);
 80042ee:	f10d 0317 	add.w	r3, sp, #23
 80042f2:	2101      	movs	r1, #1
 80042f4:	4618      	mov	r0, r3
 80042f6:	f000 fa5b 	bl	80047b0 <EPD_SpiSend>
  EPD_SpiSend(&cmd, 1);
 80042fa:	f10d 030f 	add.w	r3, sp, #15
 80042fe:	2101      	movs	r1, #1
 8004300:	4618      	mov	r0, r3
 8004302:	f000 fa55 	bl	80047b0 <EPD_SpiSend>
  EPD_SpiUnselect();
 8004306:	f000 fa4b 	bl	80047a0 <EPD_SpiUnselect>

  //chThdSleepMicroseconds(1);

  EPD_SpiSelect();
 800430a:	f000 fa41 	bl	8004790 <EPD_SpiSelect>
  EPD_SpiSend(&dataheader, 1);
 800430e:	f10d 0316 	add.w	r3, sp, #22
 8004312:	2101      	movs	r1, #1
 8004314:	4618      	mov	r0, r3
 8004316:	f000 fa4b 	bl	80047b0 <EPD_SpiSend>
  EPD_SpiReceive(data, length);
 800431a:	9901      	ldr	r1, [sp, #4]
 800431c:	9802      	ldr	r0, [sp, #8]
 800431e:	f000 fa57 	bl	80047d0 <EPD_SpiReceive>
  EPD_SpiUnselect();
 8004322:	f000 fa3d 	bl	80047a0 <EPD_SpiUnselect>
}
 8004326:	b007      	add	sp, #28
 8004328:	f85d fb04 	ldr.w	pc, [sp], #4
 800432c:	0000      	movs	r0, r0
	...

08004330 <EPD_PowerOn>:

void EPD_PowerOn(void)
{
 8004330:	b508      	push	{r3, lr}
  // Power ON
  EPD_DischargeLow();
 8004332:	f000 fa7d 	bl	8004830 <EPD_DischargeLow>
  EPD_VccOff();
 8004336:	f000 fa8b 	bl	8004850 <EPD_VccOff>
  EPD_SleepMilliseconds(100);
 800433a:	2064      	movs	r0, #100	; 0x64
 800433c:	f000 faa8 	bl	8004890 <EPD_SleepMilliseconds>

  EPD_VccOn();
 8004340:	f000 fa8e 	bl	8004860 <EPD_VccOn>
  EPD_SpiUnselect();
 8004344:	f000 fa2c 	bl	80047a0 <EPD_SpiUnselect>

  EPD_ResetOff();
 8004348:	f000 fa92 	bl	8004870 <EPD_ResetOff>
  EPD_SleepMilliseconds(5);
 800434c:	2005      	movs	r0, #5
 800434e:	f000 fa9f 	bl	8004890 <EPD_SleepMilliseconds>

  EPD_ResetOn();
 8004352:	f000 fa95 	bl	8004880 <EPD_ResetOn>
  EPD_SleepMilliseconds(5);
 8004356:	2005      	movs	r0, #5
 8004358:	f000 fa9a 	bl	8004890 <EPD_SleepMilliseconds>

  EPD_ResetOff();
 800435c:	f000 fa88 	bl	8004870 <EPD_ResetOff>
  EPD_SleepMilliseconds(5);
 8004360:	2005      	movs	r0, #5
 8004362:	f000 fa95 	bl	8004890 <EPD_SleepMilliseconds>
}
 8004366:	bd08      	pop	{r3, pc}
	...

08004370 <EPD_Initialize>:

void EPD_Initialize(void)
{
 8004370:	b500      	push	{lr}
 8004372:	b089      	sub	sp, #36	; 0x24
  bool busy = true;
 8004374:	2301      	movs	r3, #1
 8004376:	f88d 301f 	strb.w	r3, [sp, #31]
 800437a:	e007      	b.n	800438c <EPD_Initialize+0x1c>

  while (busy) {
    busy = EPD_IsBusy();
 800437c:	f000 fad0 	bl	8004920 <EPD_IsBusy>
 8004380:	4603      	mov	r3, r0
 8004382:	f88d 301f 	strb.w	r3, [sp, #31]
    EPD_SleepMilliseconds(1);
 8004386:	2001      	movs	r0, #1
 8004388:	f000 fa82 	bl	8004890 <EPD_SleepMilliseconds>
  while (busy) {
 800438c:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1f3      	bne.n	800437c <EPD_Initialize+0xc>
  }

  // Read COG ID
  uint8_t id = EPD_readCogId();
 8004394:	f7ff ff4c 	bl	8004230 <EPD_readCogId>
 8004398:	4603      	mov	r3, r0
 800439a:	f88d 3017 	strb.w	r3, [sp, #23]
  if (0x12 != id) {
 800439e:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80043a2:	2b12      	cmp	r3, #18
 80043a4:	d002      	beq.n	80043ac <EPD_Initialize+0x3c>
    EPD_Abort("wrong chip-id");
 80043a6:	4886      	ldr	r0, [pc, #536]	; (80045c0 <EPD_Initialize+0x250>)
 80043a8:	f000 faca 	bl	8004940 <EPD_Abort>
  uint8_t cmd;
  uint8_t wrdata[10];
  uint8_t rddata[10];

  // Disable OE
  cmd       = 0x02;
 80043ac:	2302      	movs	r3, #2
 80043ae:	f88d 3016 	strb.w	r3, [sp, #22]
  wrdata[0] = 0x40;
 80043b2:	2340      	movs	r3, #64	; 0x40
 80043b4:	f88d 300c 	strb.w	r3, [sp, #12]
  EPD_Write(cmd, wrdata, 1);
 80043b8:	a903      	add	r1, sp, #12
 80043ba:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80043be:	2201      	movs	r2, #1
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff ff55 	bl	8004270 <EPD_Write>

  // Breakage detection
  cmd = 0x0f;
 80043c6:	230f      	movs	r3, #15
 80043c8:	f88d 3016 	strb.w	r3, [sp, #22]
  EPD_Read(cmd, rddata, 1);
 80043cc:	4669      	mov	r1, sp
 80043ce:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80043d2:	2201      	movs	r2, #1
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7ff ff7b 	bl	80042d0 <EPD_Read>

  if (0x80 != (rddata[0] & 0x80))
 80043da:	f89d 3000 	ldrb.w	r3, [sp]
 80043de:	b25b      	sxtb	r3, r3
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	db02      	blt.n	80043ea <EPD_Initialize+0x7a>
    EPD_Abort("panel broken");
 80043e4:	4877      	ldr	r0, [pc, #476]	; (80045c4 <EPD_Initialize+0x254>)
 80043e6:	f000 faab 	bl	8004940 <EPD_Abort>

  // Power saving mode
  cmd       = 0x0b;
 80043ea:	230b      	movs	r3, #11
 80043ec:	f88d 3016 	strb.w	r3, [sp, #22]
  wrdata[0] = 0x02;
 80043f0:	2302      	movs	r3, #2
 80043f2:	f88d 300c 	strb.w	r3, [sp, #12]
  EPD_Write(cmd, wrdata, 1);
 80043f6:	a903      	add	r1, sp, #12
 80043f8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80043fc:	2201      	movs	r2, #1
 80043fe:	4618      	mov	r0, r3
 8004400:	f7ff ff36 	bl	8004270 <EPD_Write>

  // Channel select
  // (0x0000,0003,FC00,00FF)
  cmd       = 0x01;
 8004404:	2301      	movs	r3, #1
 8004406:	f88d 3016 	strb.w	r3, [sp, #22]
  wrdata[0] = 0x00;
 800440a:	2300      	movs	r3, #0
 800440c:	f88d 300c 	strb.w	r3, [sp, #12]
  wrdata[1] = 0x00;
 8004410:	2300      	movs	r3, #0
 8004412:	f88d 300d 	strb.w	r3, [sp, #13]
  wrdata[2] = 0x00;
 8004416:	2300      	movs	r3, #0
 8004418:	f88d 300e 	strb.w	r3, [sp, #14]
  wrdata[3] = 0x03;
 800441c:	2303      	movs	r3, #3
 800441e:	f88d 300f 	strb.w	r3, [sp, #15]
  wrdata[4] = 0xfc;
 8004422:	23fc      	movs	r3, #252	; 0xfc
 8004424:	f88d 3010 	strb.w	r3, [sp, #16]
  wrdata[5] = 0x00;
 8004428:	2300      	movs	r3, #0
 800442a:	f88d 3011 	strb.w	r3, [sp, #17]
  wrdata[6] = 0x00;
 800442e:	2300      	movs	r3, #0
 8004430:	f88d 3012 	strb.w	r3, [sp, #18]
  wrdata[7] = 0xff;
 8004434:	23ff      	movs	r3, #255	; 0xff
 8004436:	f88d 3013 	strb.w	r3, [sp, #19]
  EPD_Write(cmd, wrdata, 8);
 800443a:	a903      	add	r1, sp, #12
 800443c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8004440:	2208      	movs	r2, #8
 8004442:	4618      	mov	r0, r3
 8004444:	f7ff ff14 	bl	8004270 <EPD_Write>

  // High power mode
  cmd       = 0x07;
 8004448:	2307      	movs	r3, #7
 800444a:	f88d 3016 	strb.w	r3, [sp, #22]
  wrdata[0] = 0xd1;
 800444e:	23d1      	movs	r3, #209	; 0xd1
 8004450:	f88d 300c 	strb.w	r3, [sp, #12]
  EPD_Write(cmd, wrdata, 1);
 8004454:	a903      	add	r1, sp, #12
 8004456:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800445a:	2201      	movs	r2, #1
 800445c:	4618      	mov	r0, r3
 800445e:	f7ff ff07 	bl	8004270 <EPD_Write>

  // Power setting
  cmd       = 0x08;
 8004462:	2308      	movs	r3, #8
 8004464:	f88d 3016 	strb.w	r3, [sp, #22]
  wrdata[0] = 0x02;
 8004468:	2302      	movs	r3, #2
 800446a:	f88d 300c 	strb.w	r3, [sp, #12]
  EPD_Write(cmd, wrdata, 1);
 800446e:	a903      	add	r1, sp, #12
 8004470:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8004474:	2201      	movs	r2, #1
 8004476:	4618      	mov	r0, r3
 8004478:	f7ff fefa 	bl	8004270 <EPD_Write>

  // Set VCOM level
  cmd       = 0x09;
 800447c:	2309      	movs	r3, #9
 800447e:	f88d 3016 	strb.w	r3, [sp, #22]
  wrdata[0] = 0xc2;
 8004482:	23c2      	movs	r3, #194	; 0xc2
 8004484:	f88d 300c 	strb.w	r3, [sp, #12]
  EPD_Write(cmd, wrdata, 1);
 8004488:	a903      	add	r1, sp, #12
 800448a:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800448e:	2201      	movs	r2, #1
 8004490:	4618      	mov	r0, r3
 8004492:	f7ff feed 	bl	8004270 <EPD_Write>

  // Power setting
  cmd       = 0x04;
 8004496:	2304      	movs	r3, #4
 8004498:	f88d 3016 	strb.w	r3, [sp, #22]
  wrdata[0] = 0x03;
 800449c:	2303      	movs	r3, #3
 800449e:	f88d 300c 	strb.w	r3, [sp, #12]
  EPD_Write(cmd, wrdata, 1);
 80044a2:	a903      	add	r1, sp, #12
 80044a4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80044a8:	2201      	movs	r2, #1
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7ff fee0 	bl	8004270 <EPD_Write>

  // Driver latch on
  cmd       = 0x03;
 80044b0:	2303      	movs	r3, #3
 80044b2:	f88d 3016 	strb.w	r3, [sp, #22]
  wrdata[0] = 0x01;
 80044b6:	2301      	movs	r3, #1
 80044b8:	f88d 300c 	strb.w	r3, [sp, #12]
  EPD_Write(cmd, wrdata, 1);
 80044bc:	a903      	add	r1, sp, #12
 80044be:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80044c2:	2201      	movs	r2, #1
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7ff fed3 	bl	8004270 <EPD_Write>

  // Driver latch off
  cmd       = 0x03;
 80044ca:	2303      	movs	r3, #3
 80044cc:	f88d 3016 	strb.w	r3, [sp, #22]
  wrdata[0] = 0x00;
 80044d0:	2300      	movs	r3, #0
 80044d2:	f88d 300c 	strb.w	r3, [sp, #12]
  EPD_Write(cmd, wrdata, 1);
 80044d6:	a903      	add	r1, sp, #12
 80044d8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80044dc:	2201      	movs	r2, #1
 80044de:	4618      	mov	r0, r3
 80044e0:	f7ff fec6 	bl	8004270 <EPD_Write>

  EPD_SleepMilliseconds(5);
 80044e4:	2005      	movs	r0, #5
 80044e6:	f000 f9d3 	bl	8004890 <EPD_SleepMilliseconds>

  bool ready = false;
 80044ea:	2300      	movs	r3, #0
 80044ec:	f88d 301e 	strb.w	r3, [sp, #30]
  size_t i   = 0;
 80044f0:	2300      	movs	r3, #0
 80044f2:	9306      	str	r3, [sp, #24]

  for (i = 1; !ready; ++i) {
 80044f4:	2301      	movs	r3, #1
 80044f6:	9306      	str	r3, [sp, #24]
 80044f8:	e04b      	b.n	8004592 <EPD_Initialize+0x222>
    if (4 <= i)
 80044fa:	9b06      	ldr	r3, [sp, #24]
 80044fc:	2b03      	cmp	r3, #3
 80044fe:	d902      	bls.n	8004506 <EPD_Initialize+0x196>
      EPD_Abort("charge pump failed");
 8004500:	4831      	ldr	r0, [pc, #196]	; (80045c8 <EPD_Initialize+0x258>)
 8004502:	f000 fa1d 	bl	8004940 <EPD_Abort>

    // Start charge pump positive voltage
    cmd       = 0x05;
 8004506:	2305      	movs	r3, #5
 8004508:	f88d 3016 	strb.w	r3, [sp, #22]
    wrdata[0] = 0x01;
 800450c:	2301      	movs	r3, #1
 800450e:	f88d 300c 	strb.w	r3, [sp, #12]
    EPD_Write(cmd, wrdata, 1);
 8004512:	a903      	add	r1, sp, #12
 8004514:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8004518:	2201      	movs	r2, #1
 800451a:	4618      	mov	r0, r3
 800451c:	f7ff fea8 	bl	8004270 <EPD_Write>

    EPD_SleepMilliseconds(170);
 8004520:	20aa      	movs	r0, #170	; 0xaa
 8004522:	f000 f9b5 	bl	8004890 <EPD_SleepMilliseconds>

    // Start charge pump negative voltage
    cmd       = 0x05;
 8004526:	2305      	movs	r3, #5
 8004528:	f88d 3016 	strb.w	r3, [sp, #22]
    wrdata[0] = 0x03;
 800452c:	2303      	movs	r3, #3
 800452e:	f88d 300c 	strb.w	r3, [sp, #12]
    EPD_Write(cmd, wrdata, 1);
 8004532:	a903      	add	r1, sp, #12
 8004534:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8004538:	2201      	movs	r2, #1
 800453a:	4618      	mov	r0, r3
 800453c:	f7ff fe98 	bl	8004270 <EPD_Write>

    EPD_SleepMilliseconds(110);
 8004540:	206e      	movs	r0, #110	; 0x6e
 8004542:	f000 f9a5 	bl	8004890 <EPD_SleepMilliseconds>

    // Set charge pump VCOM on
    cmd       = 0x05;
 8004546:	2305      	movs	r3, #5
 8004548:	f88d 3016 	strb.w	r3, [sp, #22]
    wrdata[0] = 0x0f;
 800454c:	230f      	movs	r3, #15
 800454e:	f88d 300c 	strb.w	r3, [sp, #12]
    EPD_Write(cmd, wrdata, 1);
 8004552:	a903      	add	r1, sp, #12
 8004554:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8004558:	2201      	movs	r2, #1
 800455a:	4618      	mov	r0, r3
 800455c:	f7ff fe88 	bl	8004270 <EPD_Write>

    EPD_SleepMilliseconds(60);
 8004560:	203c      	movs	r0, #60	; 0x3c
 8004562:	f000 f995 	bl	8004890 <EPD_SleepMilliseconds>

    cmd = 0x0f;
 8004566:	230f      	movs	r3, #15
 8004568:	f88d 3016 	strb.w	r3, [sp, #22]
    EPD_Read(cmd, rddata, 1);
 800456c:	4669      	mov	r1, sp
 800456e:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8004572:	2201      	movs	r2, #1
 8004574:	4618      	mov	r0, r3
 8004576:	f7ff feab 	bl	80042d0 <EPD_Read>

    if (0x40 == (rddata[0] & 0x40))
 800457a:	f89d 3000 	ldrb.w	r3, [sp]
 800457e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004582:	2b00      	cmp	r3, #0
 8004584:	d002      	beq.n	800458c <EPD_Initialize+0x21c>
      ready = true;
 8004586:	2301      	movs	r3, #1
 8004588:	f88d 301e 	strb.w	r3, [sp, #30]
  for (i = 1; !ready; ++i) {
 800458c:	9b06      	ldr	r3, [sp, #24]
 800458e:	3301      	adds	r3, #1
 8004590:	9306      	str	r3, [sp, #24]
 8004592:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8004596:	f083 0301 	eor.w	r3, r3, #1
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1ac      	bne.n	80044fa <EPD_Initialize+0x18a>
  }

  // Output enable to disable
  cmd       = 0x02;
 80045a0:	2302      	movs	r3, #2
 80045a2:	f88d 3016 	strb.w	r3, [sp, #22]
  wrdata[0] = 0x06;
 80045a6:	2306      	movs	r3, #6
 80045a8:	f88d 300c 	strb.w	r3, [sp, #12]
  EPD_Write(cmd, wrdata, 1);
 80045ac:	a903      	add	r1, sp, #12
 80045ae:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80045b2:	2201      	movs	r2, #1
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7ff fe5b 	bl	8004270 <EPD_Write>
}
 80045ba:	b009      	add	sp, #36	; 0x24
 80045bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80045c0:	08005f84 	.word	0x08005f84
 80045c4:	08005f94 	.word	0x08005f94
 80045c8:	08005fa4 	.word	0x08005fa4
 80045cc:	00000000 	.word	0x00000000

080045d0 <EPD_UpdateDisplay>:

void EPD_UpdateDisplay(const uint8_t oldimage[128][144/8], const uint8_t newimage[128][144/8])
{
 80045d0:	b500      	push	{lr}
 80045d2:	b085      	sub	sp, #20
 80045d4:	9001      	str	r0, [sp, #4]
 80045d6:	9100      	str	r1, [sp, #0]
  size_t i = 0;
 80045d8:	2300      	movs	r3, #0
 80045da:	9303      	str	r3, [sp, #12]
  for(i = 0; i < 4; ++i)
 80045dc:	2300      	movs	r3, #0
 80045de:	9303      	str	r3, [sp, #12]
 80045e0:	e006      	b.n	80045f0 <EPD_UpdateDisplay+0x20>
    EPD_WriteFrame(oldimage, EPD_STAGE_1);
 80045e2:	2100      	movs	r1, #0
 80045e4:	9801      	ldr	r0, [sp, #4]
 80045e6:	f7ff fc83 	bl	8003ef0 <EPD_WriteFrame>
  for(i = 0; i < 4; ++i)
 80045ea:	9b03      	ldr	r3, [sp, #12]
 80045ec:	3301      	adds	r3, #1
 80045ee:	9303      	str	r3, [sp, #12]
 80045f0:	9b03      	ldr	r3, [sp, #12]
 80045f2:	2b03      	cmp	r3, #3
 80045f4:	d9f5      	bls.n	80045e2 <EPD_UpdateDisplay+0x12>

  for(i = 0; i < 4; ++i)
 80045f6:	2300      	movs	r3, #0
 80045f8:	9303      	str	r3, [sp, #12]
 80045fa:	e006      	b.n	800460a <EPD_UpdateDisplay+0x3a>
    EPD_WriteFrame(oldimage, EPD_STAGE_2);
 80045fc:	2101      	movs	r1, #1
 80045fe:	9801      	ldr	r0, [sp, #4]
 8004600:	f7ff fc76 	bl	8003ef0 <EPD_WriteFrame>
  for(i = 0; i < 4; ++i)
 8004604:	9b03      	ldr	r3, [sp, #12]
 8004606:	3301      	adds	r3, #1
 8004608:	9303      	str	r3, [sp, #12]
 800460a:	9b03      	ldr	r3, [sp, #12]
 800460c:	2b03      	cmp	r3, #3
 800460e:	d9f5      	bls.n	80045fc <EPD_UpdateDisplay+0x2c>

  for(i = 0; i < 4; ++i)
 8004610:	2300      	movs	r3, #0
 8004612:	9303      	str	r3, [sp, #12]
 8004614:	e006      	b.n	8004624 <EPD_UpdateDisplay+0x54>
    EPD_WriteFrame(newimage, EPD_STAGE_3);   
 8004616:	2102      	movs	r1, #2
 8004618:	9800      	ldr	r0, [sp, #0]
 800461a:	f7ff fc69 	bl	8003ef0 <EPD_WriteFrame>
  for(i = 0; i < 4; ++i)
 800461e:	9b03      	ldr	r3, [sp, #12]
 8004620:	3301      	adds	r3, #1
 8004622:	9303      	str	r3, [sp, #12]
 8004624:	9b03      	ldr	r3, [sp, #12]
 8004626:	2b03      	cmp	r3, #3
 8004628:	d9f5      	bls.n	8004616 <EPD_UpdateDisplay+0x46>

  for(i = 0; i < 4; ++i)
 800462a:	2300      	movs	r3, #0
 800462c:	9303      	str	r3, [sp, #12]
 800462e:	e006      	b.n	800463e <EPD_UpdateDisplay+0x6e>
    EPD_WriteFrame(newimage, EPD_STAGE_4);          
 8004630:	2103      	movs	r1, #3
 8004632:	9800      	ldr	r0, [sp, #0]
 8004634:	f7ff fc5c 	bl	8003ef0 <EPD_WriteFrame>
  for(i = 0; i < 4; ++i)
 8004638:	9b03      	ldr	r3, [sp, #12]
 800463a:	3301      	adds	r3, #1
 800463c:	9303      	str	r3, [sp, #12]
 800463e:	9b03      	ldr	r3, [sp, #12]
 8004640:	2b03      	cmp	r3, #3
 8004642:	d9f5      	bls.n	8004630 <EPD_UpdateDisplay+0x60>
}
 8004644:	b005      	add	sp, #20
 8004646:	f85d fb04 	ldr.w	pc, [sp], #4
 800464a:	bf00      	nop
 800464c:	0000      	movs	r0, r0
	...

08004650 <EPD_PartialUpdate>:
void EPD_PartialUpdate(const uint8_t oldimage[128][144/8], const uint8_t newimage[128][144/8])
{
 8004650:	b500      	push	{lr}
 8004652:	b085      	sub	sp, #20
 8004654:	9001      	str	r0, [sp, #4]
 8004656:	9100      	str	r1, [sp, #0]
  size_t i = 0;
 8004658:	2300      	movs	r3, #0
 800465a:	9303      	str	r3, [sp, #12]
  for(i = 0; i < 4; ++i)
 800465c:	2300      	movs	r3, #0
 800465e:	9303      	str	r3, [sp, #12]
 8004660:	e006      	b.n	8004670 <EPD_PartialUpdate+0x20>
    EPD_WritePartialUpdateFrame(oldimage, newimage);
 8004662:	9900      	ldr	r1, [sp, #0]
 8004664:	9801      	ldr	r0, [sp, #4]
 8004666:	f7ff fcbb 	bl	8003fe0 <EPD_WritePartialUpdateFrame>
  for(i = 0; i < 4; ++i)
 800466a:	9b03      	ldr	r3, [sp, #12]
 800466c:	3301      	adds	r3, #1
 800466e:	9303      	str	r3, [sp, #12]
 8004670:	9b03      	ldr	r3, [sp, #12]
 8004672:	2b03      	cmp	r3, #3
 8004674:	d9f5      	bls.n	8004662 <EPD_PartialUpdate+0x12>
}
 8004676:	b005      	add	sp, #20
 8004678:	f85d fb04 	ldr.w	pc, [sp], #4
 800467c:	0000      	movs	r0, r0
	...

08004680 <EPD_PowerOff>:

void EPD_PowerOff(void)
{
 8004680:	b500      	push	{lr}
 8004682:	b083      	sub	sp, #12
  EPD_WriteNothingFrame();
 8004684:	f7ff fd74 	bl	8004170 <EPD_WriteNothingFrame>

  // TODO distinguish different display sizes here

  EPD_WriteBorderDummyLine();
 8004688:	f7ff fdaa 	bl	80041e0 <EPD_WriteBorderDummyLine>

  EPD_SleepMilliseconds(200);
 800468c:	20c8      	movs	r0, #200	; 0xc8
 800468e:	f000 f8ff 	bl	8004890 <EPD_SleepMilliseconds>

  uint8_t cmd = 0x0B;
 8004692:	230b      	movs	r3, #11
 8004694:	f88d 3007 	strb.w	r3, [sp, #7]
  uint8_t data = 0x00;
 8004698:	2300      	movs	r3, #0
 800469a:	f88d 3006 	strb.w	r3, [sp, #6]
  EPD_Write(cmd, &data, 1);
 800469e:	f10d 0106 	add.w	r1, sp, #6
 80046a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80046a6:	2201      	movs	r2, #1
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7ff fde1 	bl	8004270 <EPD_Write>

  // Latch reset turn on
  cmd = 0x03;
 80046ae:	2303      	movs	r3, #3
 80046b0:	f88d 3007 	strb.w	r3, [sp, #7]
  data = 0x01;
 80046b4:	2301      	movs	r3, #1
 80046b6:	f88d 3006 	strb.w	r3, [sp, #6]
  EPD_Write(cmd, &data, 1);
 80046ba:	f10d 0106 	add.w	r1, sp, #6
 80046be:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80046c2:	2201      	movs	r2, #1
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7ff fdd3 	bl	8004270 <EPD_Write>

  // Power off chargepump Vcom off
  cmd = 0x05;
 80046ca:	2305      	movs	r3, #5
 80046cc:	f88d 3007 	strb.w	r3, [sp, #7]
  data = 0x03;
 80046d0:	2303      	movs	r3, #3
 80046d2:	f88d 3006 	strb.w	r3, [sp, #6]
  EPD_Write(cmd, &data, 1);
 80046d6:	f10d 0106 	add.w	r1, sp, #6
 80046da:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80046de:	2201      	movs	r2, #1
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7ff fdc5 	bl	8004270 <EPD_Write>

  //Power off chargepump negative voltage VGL & VDL off
  cmd = 0x05;
 80046e6:	2305      	movs	r3, #5
 80046e8:	f88d 3007 	strb.w	r3, [sp, #7]
  data = 0x01;
 80046ec:	2301      	movs	r3, #1
 80046ee:	f88d 3006 	strb.w	r3, [sp, #6]
  EPD_Write(cmd, &data, 1);
 80046f2:	f10d 0106 	add.w	r1, sp, #6
 80046f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80046fa:	2201      	movs	r2, #1
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7ff fdb7 	bl	8004270 <EPD_Write>

  // Discharge internal
  cmd = 0x04;
 8004702:	2304      	movs	r3, #4
 8004704:	f88d 3007 	strb.w	r3, [sp, #7]
  data = 0x80;
 8004708:	2380      	movs	r3, #128	; 0x80
 800470a:	f88d 3006 	strb.w	r3, [sp, #6]
  EPD_Write(cmd, &data, 1);
 800470e:	f10d 0106 	add.w	r1, sp, #6
 8004712:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004716:	2201      	movs	r2, #1
 8004718:	4618      	mov	r0, r3
 800471a:	f7ff fda9 	bl	8004270 <EPD_Write>

  // Power off chargepump positive voltage VGH & VDH off
  cmd = 0x05;
 800471e:	2305      	movs	r3, #5
 8004720:	f88d 3007 	strb.w	r3, [sp, #7]
  data = 0x00;
 8004724:	2300      	movs	r3, #0
 8004726:	f88d 3006 	strb.w	r3, [sp, #6]
  EPD_Write(cmd, &data, 1);
 800472a:	f10d 0106 	add.w	r1, sp, #6
 800472e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004732:	2201      	movs	r2, #1
 8004734:	4618      	mov	r0, r3
 8004736:	f7ff fd9b 	bl	8004270 <EPD_Write>

  // Turn off osc
  cmd = 0x07;
 800473a:	2307      	movs	r3, #7
 800473c:	f88d 3007 	strb.w	r3, [sp, #7]
  data = 0x01;
 8004740:	2301      	movs	r3, #1
 8004742:	f88d 3006 	strb.w	r3, [sp, #6]
  EPD_Write(cmd, &data, 1);
 8004746:	f10d 0106 	add.w	r1, sp, #6
 800474a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800474e:	2201      	movs	r2, #1
 8004750:	4618      	mov	r0, r3
 8004752:	f7ff fd8d 	bl	8004270 <EPD_Write>

  // Set Signals = 0 ( SI, SCLK, /BORDER_CONTROL *3 )
  EPD_MosiLow();
 8004756:	f000 f84b 	bl	80047f0 <EPD_MosiLow>
  EPD_SclkLow();
 800475a:	f000 f859 	bl	8004810 <EPD_SclkLow>

  EPD_VccOff();
 800475e:	f000 f877 	bl	8004850 <EPD_VccOff>
  EPD_SleepMilliseconds(10);
 8004762:	200a      	movs	r0, #10
 8004764:	f000 f894 	bl	8004890 <EPD_SleepMilliseconds>

  EPD_ResetOn();
 8004768:	f000 f88a 	bl	8004880 <EPD_ResetOn>
  EPD_SpiUnselect();
 800476c:	f000 f818 	bl	80047a0 <EPD_SpiUnselect>

  EPD_DischargeHigh();
 8004770:	f000 f866 	bl	8004840 <EPD_DischargeHigh>
  EPD_SleepMilliseconds(200);
 8004774:	20c8      	movs	r0, #200	; 0xc8
 8004776:	f000 f88b 	bl	8004890 <EPD_SleepMilliseconds>
  EPD_DischargeLow();
 800477a:	f000 f859 	bl	8004830 <EPD_DischargeLow>
}
 800477e:	b003      	add	sp, #12
 8004780:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004790 <EPD_SpiSelect>:

/*****************************************************************************/
/* DEFINITION OF GLOBAL FUNCTIONS                                            */
/*****************************************************************************/
void EPD_SpiSelect(void)
{
 8004790:	b508      	push	{r3, lr}
  spiSelect(&SPID2);
 8004792:	4802      	ldr	r0, [pc, #8]	; (800479c <EPD_SpiSelect+0xc>)
 8004794:	f7fc fd84 	bl	80012a0 <spiSelect>
}
 8004798:	bd08      	pop	{r3, pc}
 800479a:	bf00      	nop
 800479c:	20000840 	.word	0x20000840

080047a0 <EPD_SpiUnselect>:

void EPD_SpiUnselect(void)
{
 80047a0:	b508      	push	{r3, lr}
  spiUnselect(&SPID2);
 80047a2:	4802      	ldr	r0, [pc, #8]	; (80047ac <EPD_SpiUnselect+0xc>)
 80047a4:	f7fc fd9c 	bl	80012e0 <spiUnselect>
}
 80047a8:	bd08      	pop	{r3, pc}
 80047aa:	bf00      	nop
 80047ac:	20000840 	.word	0x20000840

080047b0 <EPD_SpiSend>:

void EPD_SpiSend(const uint8_t obuf[], size_t olen)
{
 80047b0:	b500      	push	{lr}
 80047b2:	b083      	sub	sp, #12
 80047b4:	9001      	str	r0, [sp, #4]
 80047b6:	9100      	str	r1, [sp, #0]
  spiSend(&SPID2, olen, obuf);
 80047b8:	9a01      	ldr	r2, [sp, #4]
 80047ba:	9900      	ldr	r1, [sp, #0]
 80047bc:	4802      	ldr	r0, [pc, #8]	; (80047c8 <EPD_SpiSend+0x18>)
 80047be:	f7fc fdaf 	bl	8001320 <spiSend>
}
 80047c2:	b003      	add	sp, #12
 80047c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80047c8:	20000840 	.word	0x20000840
 80047cc:	00000000 	.word	0x00000000

080047d0 <EPD_SpiReceive>:

void EPD_SpiReceive(uint8_t ibuf[], size_t ilen)
{
 80047d0:	b500      	push	{lr}
 80047d2:	b083      	sub	sp, #12
 80047d4:	9001      	str	r0, [sp, #4]
 80047d6:	9100      	str	r1, [sp, #0]
  spiReceive(&SPID2, ilen, ibuf);
 80047d8:	9a01      	ldr	r2, [sp, #4]
 80047da:	9900      	ldr	r1, [sp, #0]
 80047dc:	4802      	ldr	r0, [pc, #8]	; (80047e8 <EPD_SpiReceive+0x18>)
 80047de:	f7fc fdd7 	bl	8001390 <spiReceive>
}
 80047e2:	b003      	add	sp, #12
 80047e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80047e8:	20000840 	.word	0x20000840
 80047ec:	00000000 	.word	0x00000000

080047f0 <EPD_MosiLow>:

void EPD_MosiLow(void)
{
 80047f0:	b508      	push	{r3, lr}
  palSetPadMode(GPIOB, GPIOB_SPI2_MOSI, PAL_MODE_OUTPUT_PUSHPULL);
 80047f2:	2206      	movs	r2, #6
 80047f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80047f8:	4803      	ldr	r0, [pc, #12]	; (8004808 <EPD_MosiLow+0x18>)
 80047fa:	f7fd f899 	bl	8001930 <_pal_lld_setgroupmode>
  palClearPad(GPIOB, GPIOB_SPI2_MOSI);
 80047fe:	4b02      	ldr	r3, [pc, #8]	; (8004808 <EPD_MosiLow+0x18>)
 8004800:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004804:	615a      	str	r2, [r3, #20]
}
 8004806:	bd08      	pop	{r3, pc}
 8004808:	40010c00 	.word	0x40010c00
 800480c:	00000000 	.word	0x00000000

08004810 <EPD_SclkLow>:

void EPD_SclkLow(void)
{
 8004810:	b508      	push	{r3, lr}
  palSetPadMode(GPIOB, GPIOB_SPI2_SCK, PAL_MODE_OUTPUT_PUSHPULL);
 8004812:	2206      	movs	r2, #6
 8004814:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004818:	4803      	ldr	r0, [pc, #12]	; (8004828 <EPD_SclkLow+0x18>)
 800481a:	f7fd f889 	bl	8001930 <_pal_lld_setgroupmode>
  palClearPad(GPIOB, GPIOB_SPI2_SCK);
 800481e:	4b02      	ldr	r3, [pc, #8]	; (8004828 <EPD_SclkLow+0x18>)
 8004820:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004824:	615a      	str	r2, [r3, #20]
}
 8004826:	bd08      	pop	{r3, pc}
 8004828:	40010c00 	.word	0x40010c00
 800482c:	00000000 	.word	0x00000000

08004830 <EPD_DischargeLow>:

void EPD_DischargeLow(void)
{
  palClearPad(GPIOB, GPIOB_EPD_DISCHARGE);
 8004830:	4b02      	ldr	r3, [pc, #8]	; (800483c <EPD_DischargeLow+0xc>)
 8004832:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004836:	615a      	str	r2, [r3, #20]
}
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	40010c00 	.word	0x40010c00

08004840 <EPD_DischargeHigh>:

void EPD_DischargeHigh(void)
{
  palSetPad(GPIOB, GPIOB_EPD_DISCHARGE);
 8004840:	4b02      	ldr	r3, [pc, #8]	; (800484c <EPD_DischargeHigh+0xc>)
 8004842:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004846:	611a      	str	r2, [r3, #16]
}
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	40010c00 	.word	0x40010c00

08004850 <EPD_VccOff>:

void EPD_VccOff(void)
{
  palSetPad(GPIOB, GPIOB_EPD_VCC_EN);
 8004850:	4b02      	ldr	r3, [pc, #8]	; (800485c <EPD_VccOff+0xc>)
 8004852:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004856:	611a      	str	r2, [r3, #16]
}
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	40010c00 	.word	0x40010c00

08004860 <EPD_VccOn>:

void EPD_VccOn(void)
{
  palClearPad(GPIOB, GPIOB_EPD_VCC_EN);
 8004860:	4b02      	ldr	r3, [pc, #8]	; (800486c <EPD_VccOn+0xc>)
 8004862:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004866:	615a      	str	r2, [r3, #20]
}
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	40010c00 	.word	0x40010c00

08004870 <EPD_ResetOff>:

void EPD_ResetOff(void)
{
  palSetPad(GPIOA, GPIOA_EPD_RESET);
 8004870:	4b01      	ldr	r3, [pc, #4]	; (8004878 <EPD_ResetOff+0x8>)
 8004872:	2208      	movs	r2, #8
 8004874:	611a      	str	r2, [r3, #16]
}
 8004876:	4770      	bx	lr
 8004878:	40010800 	.word	0x40010800
 800487c:	00000000 	.word	0x00000000

08004880 <EPD_ResetOn>:

void EPD_ResetOn(void)
{
  palClearPad(GPIOA, GPIOA_EPD_RESET);
 8004880:	4b01      	ldr	r3, [pc, #4]	; (8004888 <EPD_ResetOn+0x8>)
 8004882:	2208      	movs	r2, #8
 8004884:	615a      	str	r2, [r3, #20]
}
 8004886:	4770      	bx	lr
 8004888:	40010800 	.word	0x40010800
 800488c:	00000000 	.word	0x00000000

08004890 <EPD_SleepMilliseconds>:

void EPD_SleepMilliseconds(uint32_t msec)
{
 8004890:	b570      	push	{r4, r5, r6, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	9001      	str	r0, [sp, #4]
  chThdSleepMilliseconds(msec);
 8004896:	9b01      	ldr	r3, [sp, #4]
 8004898:	461d      	mov	r5, r3
 800489a:	f04f 0600 	mov.w	r6, #0
 800489e:	462b      	mov	r3, r5
 80048a0:	4634      	mov	r4, r6
 80048a2:	f04f 0100 	mov.w	r1, #0
 80048a6:	f04f 0200 	mov.w	r2, #0
 80048aa:	0162      	lsls	r2, r4, #5
 80048ac:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80048b0:	0159      	lsls	r1, r3, #5
 80048b2:	460b      	mov	r3, r1
 80048b4:	4614      	mov	r4, r2
 80048b6:	1b5b      	subs	r3, r3, r5
 80048b8:	eb64 0406 	sbc.w	r4, r4, r6
 80048bc:	f04f 0100 	mov.w	r1, #0
 80048c0:	f04f 0200 	mov.w	r2, #0
 80048c4:	00a2      	lsls	r2, r4, #2
 80048c6:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80048ca:	0099      	lsls	r1, r3, #2
 80048cc:	460b      	mov	r3, r1
 80048ce:	4614      	mov	r4, r2
 80048d0:	195b      	adds	r3, r3, r5
 80048d2:	eb44 0406 	adc.w	r4, r4, r6
 80048d6:	f04f 0100 	mov.w	r1, #0
 80048da:	f04f 0200 	mov.w	r2, #0
 80048de:	0122      	lsls	r2, r4, #4
 80048e0:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 80048e4:	0119      	lsls	r1, r3, #4
 80048e6:	460b      	mov	r3, r1
 80048e8:	4614      	mov	r4, r2
 80048ea:	4619      	mov	r1, r3
 80048ec:	4622      	mov	r2, r4
 80048ee:	f240 33e7 	movw	r3, #999	; 0x3e7
 80048f2:	f04f 0400 	mov.w	r4, #0
 80048f6:	18cd      	adds	r5, r1, r3
 80048f8:	eb42 0604 	adc.w	r6, r2, r4
 80048fc:	4628      	mov	r0, r5
 80048fe:	4631      	mov	r1, r6
 8004900:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004904:	f04f 0300 	mov.w	r3, #0
 8004908:	f7fb fcb6 	bl	8000278 <__aeabi_uldivmod>
 800490c:	4603      	mov	r3, r0
 800490e:	460c      	mov	r4, r1
 8004910:	4618      	mov	r0, r3
 8004912:	f7fe fd3d 	bl	8003390 <chThdSleep>
}
 8004916:	b002      	add	sp, #8
 8004918:	bd70      	pop	{r4, r5, r6, pc}
 800491a:	bf00      	nop
 800491c:	0000      	movs	r0, r0
	...

08004920 <EPD_IsBusy>:

bool EPD_IsBusy(void)
{
  return PAL_HIGH == palReadPad(GPIOA, GPIOA_EPD_BUSY);
 8004920:	4b05      	ldr	r3, [pc, #20]	; (8004938 <EPD_IsBusy+0x18>)
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	089b      	lsrs	r3, r3, #2
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b01      	cmp	r3, #1
 800492c:	bf0c      	ite	eq
 800492e:	2301      	moveq	r3, #1
 8004930:	2300      	movne	r3, #0
 8004932:	b2db      	uxtb	r3, r3
}
 8004934:	4618      	mov	r0, r3
 8004936:	4770      	bx	lr
 8004938:	40010800 	.word	0x40010800
 800493c:	00000000 	.word	0x00000000

08004940 <EPD_Abort>:

void EPD_Abort(const char* msg)
{
 8004940:	b500      	push	{lr}
 8004942:	b083      	sub	sp, #12
 8004944:	9001      	str	r0, [sp, #4]
  chSysHalt(msg);
 8004946:	9801      	ldr	r0, [sp, #4]
 8004948:	f7fd fe12 	bl	8002570 <chSysHalt>
}
 800494c:	b003      	add	sp, #12
 800494e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004952:	bf00      	nop

08004954 <memset>:
 8004954:	b4f0      	push	{r4, r5, r6, r7}
 8004956:	0786      	lsls	r6, r0, #30
 8004958:	d043      	beq.n	80049e2 <memset+0x8e>
 800495a:	1e54      	subs	r4, r2, #1
 800495c:	2a00      	cmp	r2, #0
 800495e:	d03e      	beq.n	80049de <memset+0x8a>
 8004960:	b2ca      	uxtb	r2, r1
 8004962:	4603      	mov	r3, r0
 8004964:	e002      	b.n	800496c <memset+0x18>
 8004966:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 800496a:	d338      	bcc.n	80049de <memset+0x8a>
 800496c:	f803 2b01 	strb.w	r2, [r3], #1
 8004970:	079d      	lsls	r5, r3, #30
 8004972:	d1f8      	bne.n	8004966 <memset+0x12>
 8004974:	2c03      	cmp	r4, #3
 8004976:	d92b      	bls.n	80049d0 <memset+0x7c>
 8004978:	b2cd      	uxtb	r5, r1
 800497a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800497e:	2c0f      	cmp	r4, #15
 8004980:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8004984:	d916      	bls.n	80049b4 <memset+0x60>
 8004986:	f1a4 0710 	sub.w	r7, r4, #16
 800498a:	093f      	lsrs	r7, r7, #4
 800498c:	f103 0620 	add.w	r6, r3, #32
 8004990:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 8004994:	f103 0210 	add.w	r2, r3, #16
 8004998:	e942 5504 	strd	r5, r5, [r2, #-16]
 800499c:	e942 5502 	strd	r5, r5, [r2, #-8]
 80049a0:	3210      	adds	r2, #16
 80049a2:	42b2      	cmp	r2, r6
 80049a4:	d1f8      	bne.n	8004998 <memset+0x44>
 80049a6:	f004 040f 	and.w	r4, r4, #15
 80049aa:	3701      	adds	r7, #1
 80049ac:	2c03      	cmp	r4, #3
 80049ae:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 80049b2:	d90d      	bls.n	80049d0 <memset+0x7c>
 80049b4:	461e      	mov	r6, r3
 80049b6:	4622      	mov	r2, r4
 80049b8:	3a04      	subs	r2, #4
 80049ba:	2a03      	cmp	r2, #3
 80049bc:	f846 5b04 	str.w	r5, [r6], #4
 80049c0:	d8fa      	bhi.n	80049b8 <memset+0x64>
 80049c2:	1f22      	subs	r2, r4, #4
 80049c4:	f022 0203 	bic.w	r2, r2, #3
 80049c8:	3204      	adds	r2, #4
 80049ca:	4413      	add	r3, r2
 80049cc:	f004 0403 	and.w	r4, r4, #3
 80049d0:	b12c      	cbz	r4, 80049de <memset+0x8a>
 80049d2:	b2c9      	uxtb	r1, r1
 80049d4:	441c      	add	r4, r3
 80049d6:	f803 1b01 	strb.w	r1, [r3], #1
 80049da:	429c      	cmp	r4, r3
 80049dc:	d1fb      	bne.n	80049d6 <memset+0x82>
 80049de:	bcf0      	pop	{r4, r5, r6, r7}
 80049e0:	4770      	bx	lr
 80049e2:	4614      	mov	r4, r2
 80049e4:	4603      	mov	r3, r0
 80049e6:	e7c5      	b.n	8004974 <memset+0x20>
